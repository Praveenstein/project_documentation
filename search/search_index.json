{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This project is implemented to help the maintenace team of Toyota Industries Engine India Private Limited (here by called as TIEI) to help in machine maintenace activities of their new plant. Requirements of the Project The project requirements are: Machine Maintenace - Machines (General purpose machines such as cnc and special purpose machines such as laser cladding) need to monitored for any abnormal conditions. Real Time Data Visualization Feature - A graphical way to visualize the data from all these machines. Spare Part Management - A system to monitor part count of machines and alerts system to notify maintenace team when a part of a machine needs to be replaced (which is monitored from a critical limit for the part). Alarm Management - A system to generate a summary of alarms for machines. Email Alerts & Report Generation - A system to send email alerts when a machine is in abnormal state and to generate summart report of machines under abnormal states. Separate Database for the Machine Data - A new database where a copy data from the existing mongodb database will exist, and all processing and analytics should be implemeted with that data. Nature of the Current System at TIEI The Exisitng machines at CMTI's SMDDC are: Machine The following table gives the summary of available machines at TIEI: S.No Machine Name Type Description Brand Model Location Controller Name Controller Model Legacy Ip Address 1. Ace LT-2 Turning Center 2-axes horizontal turning centres Ace Micromatic LT-2-LM-500-PLUS R1 Fanuc 0i tf plus No 172.18.7.27 2. MONO 200 Turning Center MONO-200 is a CNC turning center machine Mac Power Mono 200 R2 Seimens sinumerik 828d No 172.18.7.27 3. AMS MCV - 450 Milling Center It's vertical machining center, It has a Fanuc 0i-MF plus CNC controller AMS(ACE MANUFACTURING SYSTEMS) MCV - 450 R3 Fanuc 0i - Mf Plus No 172.18.7.27 4. Mazak - H-400 N Milling Center Mazak H-400N is a horizontal machining center with a Seimens Controller Mazak H-400N R4 Seimens sinumerik 828D No 172.18.7.27 5. Mazak - H-400 N Milling Center Mazak H-400N is a horizontal machining center with a Fanuc Controller Mazak H-400N L4 Fanuc 0i -md TBA 6. Hmt - vtc 800, seimens Milling Center HMT VTC - 800 L3 Seimens TBA Yes 7. Schaublin 33 cnc Milling Center Schaublin Machines SA 33 CNC L2 Seimens 840D Yes 8. Hmt Stallion 200 Turning Center HMT Stallion L1 Fanuc ot - Series Yes Machine Parameters The machine parameters (for the 59 general purpose cnc machines) are split into 17 groups of two types: Static Parameters - These are the parameters that have a single value as their critical limits, for example, the warning limit of encoder temperature could be 50 degree celcius and critical limit could be 60 degree celcius. Hence if any of the static parameter, goes beyond these limits, it is said to be in abnormal state. Dynamic Parameters - These are the parameters have a set of values (also know as reference signals). If any new set of values (for a new machining cycle) is not similar to the reference signal, it will be considered to be in abnormal state. The group of parameters are shown in the table below. S.No Parameter Group Type 1. APC Battery Static 2. CNC Battery Static 3. Servo and Spindle Motor Temperature Static 4. Encoder Temperature Static 5. Spindle and Servo Motor Insulation Resistance Static 6. CNC Fan Speeds Static 7. Internal Fan 1 Power Supply - Spindle Motor & Spindle Amplifier Static 8. Internal Fan 1 Servo Amplifier Static 9. Internal Fan 1 Power Supply - Servo Motor Static 10. Internal Fan 2 Power Supply - Spindle Motor & Spindle Amplifier Static 11. Internal Fan 2 Servo Amplifier Static 12. Internal Fan 2 Power Supply - Servo Motor Static 13. Battery Zero Separate Detector Static 14. Battery Zero Serial Separate Detector Static 15. Radiator Fan 1 - Servo & Spindle Amplifier Static 16. Radiator Fan 2 - Servo & Spindle Amplifier Static 17. Servo & Spindle Motor Load Dynamic Features of the Project The final solution given to tiei will be a web application with the following features: Maintenace Feature - This page of the web application will have a summary of states of all machines in visual way. Real Time Data Visualization Feature - This page of the web application will display time series data for a given machine, for a given parameter group, for a given axis within a given time range. Alarm Management Feature This page of the web application will display the summary of alarms and events for a given machine, during a given period of time range. Spare Part Management Feature This section of the web application will have information about the part count of machines, and information about the parts that needs to be replaced when a critical part limit is reached. Special Purpose Machines Feature This section of the web application will real time visualization of its parameters over a given range of time. Apart from the web application, the final project solution should include the following services: 4/8 Hour Summary Report Generation Service - A Service which generates a summary of machines that were under abnormal states for every 4/8 hour. Email Alerts Service - A Service which sends email alerts as soon as a machines goes to abnormal state.","title":"Project Overview"},{"location":"#introduction","text":"This project is implemented to help the maintenace team of Toyota Industries Engine India Private Limited (here by called as TIEI) to help in machine maintenace activities of their new plant.","title":"Introduction"},{"location":"#requirements-of-the-project","text":"The project requirements are: Machine Maintenace - Machines (General purpose machines such as cnc and special purpose machines such as laser cladding) need to monitored for any abnormal conditions. Real Time Data Visualization Feature - A graphical way to visualize the data from all these machines. Spare Part Management - A system to monitor part count of machines and alerts system to notify maintenace team when a part of a machine needs to be replaced (which is monitored from a critical limit for the part). Alarm Management - A system to generate a summary of alarms for machines. Email Alerts & Report Generation - A system to send email alerts when a machine is in abnormal state and to generate summart report of machines under abnormal states. Separate Database for the Machine Data - A new database where a copy data from the existing mongodb database will exist, and all processing and analytics should be implemeted with that data.","title":"Requirements of the Project"},{"location":"#nature-of-the-current-system-at-tiei","text":"The Exisitng machines at CMTI's SMDDC are:","title":"Nature of the Current System at TIEI"},{"location":"#machine","text":"The following table gives the summary of available machines at TIEI: S.No Machine Name Type Description Brand Model Location Controller Name Controller Model Legacy Ip Address 1. Ace LT-2 Turning Center 2-axes horizontal turning centres Ace Micromatic LT-2-LM-500-PLUS R1 Fanuc 0i tf plus No 172.18.7.27 2. MONO 200 Turning Center MONO-200 is a CNC turning center machine Mac Power Mono 200 R2 Seimens sinumerik 828d No 172.18.7.27 3. AMS MCV - 450 Milling Center It's vertical machining center, It has a Fanuc 0i-MF plus CNC controller AMS(ACE MANUFACTURING SYSTEMS) MCV - 450 R3 Fanuc 0i - Mf Plus No 172.18.7.27 4. Mazak - H-400 N Milling Center Mazak H-400N is a horizontal machining center with a Seimens Controller Mazak H-400N R4 Seimens sinumerik 828D No 172.18.7.27 5. Mazak - H-400 N Milling Center Mazak H-400N is a horizontal machining center with a Fanuc Controller Mazak H-400N L4 Fanuc 0i -md TBA 6. Hmt - vtc 800, seimens Milling Center HMT VTC - 800 L3 Seimens TBA Yes 7. Schaublin 33 cnc Milling Center Schaublin Machines SA 33 CNC L2 Seimens 840D Yes 8. Hmt Stallion 200 Turning Center HMT Stallion L1 Fanuc ot - Series Yes","title":"Machine"},{"location":"#machine-parameters","text":"The machine parameters (for the 59 general purpose cnc machines) are split into 17 groups of two types: Static Parameters - These are the parameters that have a single value as their critical limits, for example, the warning limit of encoder temperature could be 50 degree celcius and critical limit could be 60 degree celcius. Hence if any of the static parameter, goes beyond these limits, it is said to be in abnormal state. Dynamic Parameters - These are the parameters have a set of values (also know as reference signals). If any new set of values (for a new machining cycle) is not similar to the reference signal, it will be considered to be in abnormal state. The group of parameters are shown in the table below. S.No Parameter Group Type 1. APC Battery Static 2. CNC Battery Static 3. Servo and Spindle Motor Temperature Static 4. Encoder Temperature Static 5. Spindle and Servo Motor Insulation Resistance Static 6. CNC Fan Speeds Static 7. Internal Fan 1 Power Supply - Spindle Motor & Spindle Amplifier Static 8. Internal Fan 1 Servo Amplifier Static 9. Internal Fan 1 Power Supply - Servo Motor Static 10. Internal Fan 2 Power Supply - Spindle Motor & Spindle Amplifier Static 11. Internal Fan 2 Servo Amplifier Static 12. Internal Fan 2 Power Supply - Servo Motor Static 13. Battery Zero Separate Detector Static 14. Battery Zero Serial Separate Detector Static 15. Radiator Fan 1 - Servo & Spindle Amplifier Static 16. Radiator Fan 2 - Servo & Spindle Amplifier Static 17. Servo & Spindle Motor Load Dynamic","title":"Machine Parameters"},{"location":"#features-of-the-project","text":"The final solution given to tiei will be a web application with the following features: Maintenace Feature - This page of the web application will have a summary of states of all machines in visual way. Real Time Data Visualization Feature - This page of the web application will display time series data for a given machine, for a given parameter group, for a given axis within a given time range. Alarm Management Feature This page of the web application will display the summary of alarms and events for a given machine, during a given period of time range. Spare Part Management Feature This section of the web application will have information about the part count of machines, and information about the parts that needs to be replaced when a critical part limit is reached. Special Purpose Machines Feature This section of the web application will real time visualization of its parameters over a given range of time. Apart from the web application, the final project solution should include the following services: 4/8 Hour Summary Report Generation Service - A Service which generates a summary of machines that were under abnormal states for every 4/8 hour. Email Alerts Service - A Service which sends email alerts as soon as a machines goes to abnormal state.","title":"Features of the Project"},{"location":"Code%20%26%20Services%20Locations/","text":"Code & Services Location Introduction This section shows the code locations and some of the services names and locations. Code Locations Collector Services Static Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_main_2/collector_main/main_static_collector.py Service Name static_collector Service File Location (systemctl daemon file) /lib/systemd/system/static_collector.service Dynamic Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_main_2/collector_main/main_dynamic_collector.py Service Name dynamic_collector Service File Location (systemctl daemon file) /lib/systemd/system/dynamic_collector.service Laser Cladding Collector Code Location /home/tnga_iot/iiot_project/codes/laser_cladding/laser_clad_main_2/laser_clad_main/main.py Service Name laser_cladding_monitoring Service File Location (systemctl daemon file) /etc/systemd/system/laser_cladding_monitoring.service Laser Cladding Collector B Code Location /home/tnga_iot/iiot_project/codes/laser_cladding/laser_cladding_b/laser_clad_main/main.py Service Name laser_cladding_monitoring_b Service File Location (systemctl daemon file) /etc/systemd/system/laser_cladding_monitoring_b.service SPM Journal Grinding Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_spm/codes/laser_clad_main/main_2.py Service Name journal_grinding_jop_X_collector Service File Location JOP 105 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_105_collector.service Service File Location JOP 130 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_130_collector.service Service File Location JOP 140 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_140_collector.service Part Count Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name part_count_collector Service File Location (systemctl daemon file) /etc/systemd/system/part_count_collector.service Email Sender Service Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name email_sender Service File Location (systemctl daemon file) /etc/systemd/system/email_sender.service Summary Repory Generator Service Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name report_summary_generator Service File Location (systemctl daemon file) /etc/systemd/system/report_summary_generator.service Back End Services The back end in developed in FastApi and deployed as docker container. The codes are available in github and can be downloaded modified and dockerized to make any new changes. Front End Services Apache Server The front end is developed using html, css, javascript and react. It is being served by apache server. The codes are available in github and can be downloaded modified and build using node package manager and copied to this location (which the apache server will serve) /var/www/tnga_iot","title":"Codes & Services Location"},{"location":"Code%20%26%20Services%20Locations/#code-services-location","text":"","title":"Code &amp; Services Location"},{"location":"Code%20%26%20Services%20Locations/#introduction","text":"This section shows the code locations and some of the services names and locations.","title":"Introduction"},{"location":"Code%20%26%20Services%20Locations/#code-locations","text":"","title":"Code Locations"},{"location":"Code%20%26%20Services%20Locations/#collector-services","text":"Static Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_main_2/collector_main/main_static_collector.py Service Name static_collector Service File Location (systemctl daemon file) /lib/systemd/system/static_collector.service Dynamic Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_main_2/collector_main/main_dynamic_collector.py Service Name dynamic_collector Service File Location (systemctl daemon file) /lib/systemd/system/dynamic_collector.service Laser Cladding Collector Code Location /home/tnga_iot/iiot_project/codes/laser_cladding/laser_clad_main_2/laser_clad_main/main.py Service Name laser_cladding_monitoring Service File Location (systemctl daemon file) /etc/systemd/system/laser_cladding_monitoring.service Laser Cladding Collector B Code Location /home/tnga_iot/iiot_project/codes/laser_cladding/laser_cladding_b/laser_clad_main/main.py Service Name laser_cladding_monitoring_b Service File Location (systemctl daemon file) /etc/systemd/system/laser_cladding_monitoring_b.service SPM Journal Grinding Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_spm/codes/laser_clad_main/main_2.py Service Name journal_grinding_jop_X_collector Service File Location JOP 105 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_105_collector.service Service File Location JOP 130 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_130_collector.service Service File Location JOP 140 (systemctl daemon file) /etc/systemd/system/journal_grinding_jop_140_collector.service Part Count Collector Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name part_count_collector Service File Location (systemctl daemon file) /etc/systemd/system/part_count_collector.service Email Sender Service Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name email_sender Service File Location (systemctl daemon file) /etc/systemd/system/email_sender.service Summary Repory Generator Service Code Location /home/tnga_iot/iiot_project/codes/collector_system/main_codes/collector_part_count/tiei_main/main_part_count.py Service Name report_summary_generator Service File Location (systemctl daemon file) /etc/systemd/system/report_summary_generator.service","title":"Collector Services"},{"location":"Code%20%26%20Services%20Locations/#back-end-services","text":"The back end in developed in FastApi and deployed as docker container. The codes are available in github and can be downloaded modified and dockerized to make any new changes.","title":"Back End Services"},{"location":"Code%20%26%20Services%20Locations/#front-end-services","text":"Apache Server The front end is developed using html, css, javascript and react. It is being served by apache server. The codes are available in github and can be downloaded modified and build using node package manager and copied to this location (which the apache server will serve) /var/www/tnga_iot","title":"Front End Services"},{"location":"Technical%20Stack/","text":"Technical Stack Introduction Based on the requirements and nature of the current system, the figure below shows the overall architecture of the proposed solution. flowchart TB subgraph MACHINES direction TB subgraph CNC[General Purpose CNC] end subgraph lc[Laser Cladding] end subgraph jg[Journal Grinding] end end subgraph COLLECTOR direction TB subgraph MtC[MtLinki Collector] end subgraph lcc[Laser Cladding Collector] end subgraph jgc[Journal Grinding Collector] end end subgraph DATABASE end CNC --MONGODB-->MtC lc --LOG FILES-->lcc jg --LOG FILES-->jgc COLLECTOR -->DATABASE DATABASE -->BACKEND BACKEND -->FRONTEND DATABASE -->sum[4/8 HOUR SUMMARY REPORTS] COLLECTOR -->anomaly[ANOMALY DETECTION] anomaly -->abnormal[ABNORMALITY REPORTS] COLLECTOR -->part[PART COUNT MONITOR] part -->abnormal part -->DATABASE abnormal -->email sum --> email[EMAIL ALERTS] Implementation All the requried services are developed using python script and deployed as linux daemon services. Collectors MtLinki Collector Static Collector - This service collects all new data from the MtLinki mongodb database for the 16 static parameter group. Dynamic Collector - This service collects all new data from the MtLinki mongodb database for the 1 dynamic (servo and spindle load) parameter group. Lasser Cladding Collector - This service collects data from the laser cladding machine from its log files. Journal Grinding Collector - This service collects all new data from the journal grinding machine from its log files. Anomaly Detection The anomaly detection for cnc machines are implemeted as part of the collector services. Static Parameters - The anomaly detection for the 16 parameter groups are part of the static collector service and it works by simply checking if the current value of the parameters are within the normal working range . Dynamic Parameters - The anomaly detection for the 1 parameter group (Servo and Spindle load) are part of the dynamic collector service and it works using Kruskal\u2013Wallis one-way analysis of variance algorithm . This method compares the signal values for a new cycle with a reference signal, for any anomaly. Part Count Monitor The machine part counts (for 59 cnc machines) are monitored from the parameter \"para name\". Once the reset button on the machine controller is pressed, the part count will be reset to zero. But to get a cumulative part count, we store the last part count value before the reset button was pressed, then whenever the part count is increased, the actual part count would be the part count before the press of reset button plus the current part count value. The formula for that is given below: \\[ \\operatorname{} P_{A} = P_{Current} + P_{Cumulative} ....... 1 \\] Where, P A --> Actual Part Count P Current --> Current Part Count P Cumulative --> Cumulative Part Count Before Press of Reset Button Abnormality Reports Different abnormalities are generated as an excel report as soon as they are recorded, and stored in a common location (Where the email alerts service will be looking for new report), these files will be deleted as soon as they are sent as email alerts by the email alerts services. The following things will create an abnormality report: Static Parameter Abnormality - This will be recorded by the static collector as soon as any parameter goes beyond it's normal working range . A sample report is shown below. Dynamic Parameter Abnormality - This will be recorded by the dynamic collector as soon as any set of parameters belonging to a specific cycle is not similar to it's reference signal . A sample report is shown below. Part Count Alert - This will be recorded by the part count monitor as soon as any component of a machine exceeded it's part count limit and needs to be replaced . A sample report is shown below. Database From the requirements and nature of current system, we've choosen timescale db as the database to store all the data. The entity relationship diargrams of all the table of the database is shown below: The details of all the tables are given below: Machine - This table will consist of data related to all the machines available at tiei new plant (including spm machines). The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer name Description - This is the name of the machine Type - String location Description - The location of the machine within the plant (crank, block, engine line) Type - String machine_number Description - This is the number of the machine. Type - String short_name Description - This is a short name for the machine Type - String description Description - This is a short description of the machine Type - String enabled Description - The columns is used to represent if the machine is enabled or not Type - Bool parameters Description - This gives the total number of parameters this machine has Type - Integer Unit - This table will consist of data related to all the units of parameters of machines available at tiei new plant (including spm machines). The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer name Description - This is the name of the unit for a machine parameter Type - String short_name Description - This is a short name for the unit Type - String description Description - This is the short description of the unit Type - String type Description - TBA (To Be Addressed) Type - String ParameterGroup - This table will consist of data related to all the groups of parameters (especially for the 59 cnc machines), such as apc battery, encoder temperature, etc. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer mongodb_query Description - This is the regex pattern used to wildcard only the parameter names (as available in the Fanuc MtLinki Mongodb) belonging to the parameter group, for example \"load\" to query all servo and spindle loads (which belongs to dynamic parameter group). This is used internally by the collector services to query parameters from different groups. Type - String latest_update_time Description - This is the latest time for which new data was available for the parameter group as whole. For example ServoLoadOp150 has latest end time as time1 and SpindleLoadOP150 has end time as time2, the latest_update_time (for this parameter group would be) time2. Type - float warning_limit Description - This is the warning limit (only available for static parameters) (this will be used if in case the individual parameter doesn't have limits) Type - Integer critical_limit Description - This is the critical limit (only available for static parameters) (this will be used if in case the individual parameter doesn't have limits) Type - Integer parameter_type Description - This value is used to tell if the parameter (applicable only for static parameters) is of type increasing or decreasing. If increasing means, the critical limit value will be greater than warning limit, such as encoder temperature. Type - String MachineParameter - This table will consist of data related to all the parameters of machines available at tiei new plant (including spm machines). The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer name Description - This is the name of the machine parameter Type - String machine_id Description - This is a foreign key, and refers to the id of Machines table, this shows the machine to which this parameter belongs to. Type - Integer warning_limit Description - This is the warning limit (only available for static parameters) Type - Integer critical_limit Description - This is the critical limit (only available for static parameters) Type - Integer reference_signal Description - This is the reference signal that are considers as good signal for this parameter (only available for dynamic parameters). Type - Array of Float parameter_group_id Description - This is a foreign key, refering to the id column of the ParameterGroup table, to represent the parameter group that this parameter belongs to. Type - Integer unit Description - This is a foreign key, refering to the id column of the Unit table, to represent the unit parameter has. Type - Integer parameter_type Description - This value is used to tell if the parameter (applicable only for static parameters) is of type increasing or decreasing. If increasing means, the critical limit value will be greater than warning limit, such as encoder temperature. Type - String Event - This table will consist of data related to all events related to a machine , such as production, breakdown. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer name Description - This is the name of the event. Type - String descrtiption Description - This is a short description of the event. Type - String MachineEventTimeline - This table will consist of data related to all events timeline data related to a machine. This table is specifically used to store the event data related to spm machines (especially laser cladding machine). The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer start_time Description - This is the start time of the event. Type - Datetime end_time Description - This is the end time of the event. Type - Datetime duration Description - This is the duration of the event. Type - Timedelta event_id Description - This is a foreign key, and refers to the id column of Events table, this shows event to which this record of timeline data belongs to. Type - Integer machine_id Description - This is a foreign key, and refers to the id of Machines table, this shows the machine to which this parameter belongs to. Type - Integer MachineProductionTimeline - This table will consist of data related to all production timeline data related to a machine. This table is specifically used to store the production data related to spm machines (especially laser cladding machine). The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer start_time Description - This is the start time of the production. Type - Datetime end_time Description - This is the end time of the production. Type - Datetime duration Description - This is the duration of the production. Type - Timedelta machine_event_timeline Description - This is a foreign key, and refers to the id column of MachineEventTimeline table, this shows event timeline to which this record of machine production timeline data belongs to. Type - Integer machine_id Description - This is a foreign key, and refers to the id of Machines table, this shows the machine to which this parameter belongs to. Type - Integer part_number Description - This is the part number of the component manufactured during this production cycle. Type - String User - This table will consist of data related to all Users registered to access the web application. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer username Description - This is the user name. Type - String email Description - This is the email id of the user. Type - String full_name Description - This is the full name of the user. Type - String disabled Description - This is a boolean variable used to check if the user is enabled or not Type - Bool hashed_password Description - This is the (hashed) password of the user. Type - String role Description - This is the role of the user. Type - String EmailUser - This table will consist of data related to all Email Ids of users for whom email reports needs to sent. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer username Description - This is the user name. Type - String email_id Description - This is the email id of the user that will receive email alerts. Type - String full_name Description - This is the full name of the user. Type - String disabled Description - This is a boolean variable used to check if the user is enabled or not Type - Bool hashed_password Description - This is the (hashed) password of the user. Type - String role Description - This is the role of the user. Type - String Note If the user (of this application) wants to add or remove any email id that receives email alerts about abnormality, he/she needs to modify this table directly SparePart - This table will consist of data related to all Spare Parts of all the machines. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer part_name Description - This is the part name. Type - String referenc_part_number Description - This is the cumulative part count of the machine, just before the press of reset button. This is the P Cumulative in equation 1. Type - String warning_limit Description - This is the warning part count limit. Type - Integer critical_limit Description - This is the critical part count limit. Type - Integer machine_id Description - This is a foreign key, and refers to the id of Machines table, this shows the machine to which this spare part belongs to. Type - Integer MachinePartCount - This table will consist of part count data of all the machines. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer part_signal_name Description - This is the signal/parameter name which holds the part count for the machine (as stored in the mongodb). Type - String current_part_count Description - This is the current part count for the machine (as denoted buy the machine column) Type - Integer last_reset_count Description - This is the part count of the machine just before the reset button was pressed. This is used to find the cumulative part count of machine, that is if the maachine part count was 500 just before the resetting it, then after that the cumulative part count would be 500 + 1, 500 + 2, and so on where 500 is your last_reset_count and 1/2 is your current_part_count. Type - Integer machine_id Description - This is a foreign key, and refers to the id of Machines table, this shows the machine to which this spare part belongs to. Type - Integer latest_update_time Description - This is the recent most timestamp during which the part count was updated (as stored in the mongodb). ParameterCondition - This table will consist of data related to all conditions of a parameter, such as ok, warning and critical. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer name Description - This is the condition name. Type - String EventStaticMachineParameter - This table will consist of real time static data related to all events of a machine . This is specifically used for SPM machines (especially laser cladding). The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer value Description - This is the value of the parameter. Type - float machine_event_timeline_id Description - This is a foreign key, and refers to the id of MachineEventTimeline table, this shows the event timeline to which this event static machine parameter value belongs to. Type - Integer machine_parameter_id Description - This is a foreign key, and refers to the id of MachineParameter table, this shows the machine parameter to which this record of value belongs to. Type - Integer RealTimeParameter - This table will consist of real time data related to all machine . The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer value Description - This is the value of the parameter. Type - float parameter_condition_id Description - This is a foreign key, and refers to the id of ParameterCondition table, this shows the condition to which this real time machine parameter value belongs to. Type - Integer machine_parameter_id Description - This is a foreign key, and refers to the id of MachineParameter table, this shows the machine parameter to which this record of value belongs to. Type - Integer Note This is the main table where the actual parameter values are stored by all the collector services, for all machines, such as cnc machines, laser cladding, journal grinding. The EventStaticMachineParameter table also stores parameter values, but only those value which are fixed for a given cycle, they are used specifically for laser cladding, since it has some static parameters that don't change during the operating time. The cnc machines, and journal grinding machines don't have such setup and hence will not use this table. RealTimeParameterActive - This table will consist of the recent most data related to all machine . The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer value Description - This is the value of the parameter. Type - float parameter_condition_id Description - This is a foreign key, and refers to the id of ParameterCondition table, this shows the condition to which this real time machine parameter value belongs to. Type - Integer machine_parameter_id Description - This is a foreign key, and refers to the id of MachineParameter table, this shows the machine parameter to which this record of value belongs to. Type - Integer Note This is the main table where the recent most value of parameters are stored by all the collector services, for all machines, such as cnc machines, laser cladding, journal grinding. This separate table allows us to optimize the performance while querying the recent most details about all machines, parameter groups, etc. 4/8 Hour Summary Report Every 4 hour (Starting from 5:30 AM) a summary of machines that were under abnormal condition are generated and saved as report in the directory 'directory location'. These reports are used by email service to send email alerts. A sample of the report is shown below: Email Alerts An email service is deployed, which looks for new reports in the directory 'directory' every 5 second. As soon a new report is created in this directory it will be sent as email and deleted. Back End The back end is developed with python and fastapi framework, and ponyorm. The structure of the backend and description of the files and folders are explained in detail in the Code Explanation section. Front End The front end is developed with html, css, javascript and react framework. The structure of the frontend and description of the files and folders are explained in detail in the Code Explanation section.","title":"Technical Stack"},{"location":"Technical%20Stack/#technical-stack","text":"","title":"Technical Stack"},{"location":"Technical%20Stack/#introduction","text":"Based on the requirements and nature of the current system, the figure below shows the overall architecture of the proposed solution. flowchart TB subgraph MACHINES direction TB subgraph CNC[General Purpose CNC] end subgraph lc[Laser Cladding] end subgraph jg[Journal Grinding] end end subgraph COLLECTOR direction TB subgraph MtC[MtLinki Collector] end subgraph lcc[Laser Cladding Collector] end subgraph jgc[Journal Grinding Collector] end end subgraph DATABASE end CNC --MONGODB-->MtC lc --LOG FILES-->lcc jg --LOG FILES-->jgc COLLECTOR -->DATABASE DATABASE -->BACKEND BACKEND -->FRONTEND DATABASE -->sum[4/8 HOUR SUMMARY REPORTS] COLLECTOR -->anomaly[ANOMALY DETECTION] anomaly -->abnormal[ABNORMALITY REPORTS] COLLECTOR -->part[PART COUNT MONITOR] part -->abnormal part -->DATABASE abnormal -->email sum --> email[EMAIL ALERTS]","title":"Introduction"},{"location":"Technical%20Stack/#implementation","text":"All the requried services are developed using python script and deployed as linux daemon services.","title":"Implementation"},{"location":"Technical%20Stack/#collectors","text":"MtLinki Collector Static Collector - This service collects all new data from the MtLinki mongodb database for the 16 static parameter group. Dynamic Collector - This service collects all new data from the MtLinki mongodb database for the 1 dynamic (servo and spindle load) parameter group. Lasser Cladding Collector - This service collects data from the laser cladding machine from its log files. Journal Grinding Collector - This service collects all new data from the journal grinding machine from its log files.","title":"Collectors"},{"location":"Technical%20Stack/#anomaly-detection","text":"The anomaly detection for cnc machines are implemeted as part of the collector services. Static Parameters - The anomaly detection for the 16 parameter groups are part of the static collector service and it works by simply checking if the current value of the parameters are within the normal working range . Dynamic Parameters - The anomaly detection for the 1 parameter group (Servo and Spindle load) are part of the dynamic collector service and it works using Kruskal\u2013Wallis one-way analysis of variance algorithm . This method compares the signal values for a new cycle with a reference signal, for any anomaly.","title":"Anomaly Detection"},{"location":"Technical%20Stack/#part-count-monitor","text":"The machine part counts (for 59 cnc machines) are monitored from the parameter \"para name\". Once the reset button on the machine controller is pressed, the part count will be reset to zero. But to get a cumulative part count, we store the last part count value before the reset button was pressed, then whenever the part count is increased, the actual part count would be the part count before the press of reset button plus the current part count value. The formula for that is given below: \\[ \\operatorname{} P_{A} = P_{Current} + P_{Cumulative} ....... 1 \\] Where, P A --> Actual Part Count P Current --> Current Part Count P Cumulative --> Cumulative Part Count Before Press of Reset Button","title":"Part Count Monitor"},{"location":"Technical%20Stack/#abnormality-reports","text":"Different abnormalities are generated as an excel report as soon as they are recorded, and stored in a common location (Where the email alerts service will be looking for new report), these files will be deleted as soon as they are sent as email alerts by the email alerts services. The following things will create an abnormality report: Static Parameter Abnormality - This will be recorded by the static collector as soon as any parameter goes beyond it's normal working range . A sample report is shown below. Dynamic Parameter Abnormality - This will be recorded by the dynamic collector as soon as any set of parameters belonging to a specific cycle is not similar to it's reference signal . A sample report is shown below. Part Count Alert - This will be recorded by the part count monitor as soon as any component of a machine exceeded it's part count limit and needs to be replaced . A sample report is shown below.","title":"Abnormality Reports"},{"location":"Technical%20Stack/#database","text":"From the requirements and nature of current system, we've choosen timescale db as the database to store all the data. The entity relationship diargrams of all the table of the database is shown below: The details of all the tables are given below: Machine - This table will consist of data related to all the machines available at tiei new plant (including spm machines). The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer name Description - This is the name of the machine Type - String location Description - The location of the machine within the plant (crank, block, engine line) Type - String machine_number Description - This is the number of the machine. Type - String short_name Description - This is a short name for the machine Type - String description Description - This is a short description of the machine Type - String enabled Description - The columns is used to represent if the machine is enabled or not Type - Bool parameters Description - This gives the total number of parameters this machine has Type - Integer Unit - This table will consist of data related to all the units of parameters of machines available at tiei new plant (including spm machines). The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer name Description - This is the name of the unit for a machine parameter Type - String short_name Description - This is a short name for the unit Type - String description Description - This is the short description of the unit Type - String type Description - TBA (To Be Addressed) Type - String ParameterGroup - This table will consist of data related to all the groups of parameters (especially for the 59 cnc machines), such as apc battery, encoder temperature, etc. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer mongodb_query Description - This is the regex pattern used to wildcard only the parameter names (as available in the Fanuc MtLinki Mongodb) belonging to the parameter group, for example \"load\" to query all servo and spindle loads (which belongs to dynamic parameter group). This is used internally by the collector services to query parameters from different groups. Type - String latest_update_time Description - This is the latest time for which new data was available for the parameter group as whole. For example ServoLoadOp150 has latest end time as time1 and SpindleLoadOP150 has end time as time2, the latest_update_time (for this parameter group would be) time2. Type - float warning_limit Description - This is the warning limit (only available for static parameters) (this will be used if in case the individual parameter doesn't have limits) Type - Integer critical_limit Description - This is the critical limit (only available for static parameters) (this will be used if in case the individual parameter doesn't have limits) Type - Integer parameter_type Description - This value is used to tell if the parameter (applicable only for static parameters) is of type increasing or decreasing. If increasing means, the critical limit value will be greater than warning limit, such as encoder temperature. Type - String MachineParameter - This table will consist of data related to all the parameters of machines available at tiei new plant (including spm machines). The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer name Description - This is the name of the machine parameter Type - String machine_id Description - This is a foreign key, and refers to the id of Machines table, this shows the machine to which this parameter belongs to. Type - Integer warning_limit Description - This is the warning limit (only available for static parameters) Type - Integer critical_limit Description - This is the critical limit (only available for static parameters) Type - Integer reference_signal Description - This is the reference signal that are considers as good signal for this parameter (only available for dynamic parameters). Type - Array of Float parameter_group_id Description - This is a foreign key, refering to the id column of the ParameterGroup table, to represent the parameter group that this parameter belongs to. Type - Integer unit Description - This is a foreign key, refering to the id column of the Unit table, to represent the unit parameter has. Type - Integer parameter_type Description - This value is used to tell if the parameter (applicable only for static parameters) is of type increasing or decreasing. If increasing means, the critical limit value will be greater than warning limit, such as encoder temperature. Type - String Event - This table will consist of data related to all events related to a machine , such as production, breakdown. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer name Description - This is the name of the event. Type - String descrtiption Description - This is a short description of the event. Type - String MachineEventTimeline - This table will consist of data related to all events timeline data related to a machine. This table is specifically used to store the event data related to spm machines (especially laser cladding machine). The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer start_time Description - This is the start time of the event. Type - Datetime end_time Description - This is the end time of the event. Type - Datetime duration Description - This is the duration of the event. Type - Timedelta event_id Description - This is a foreign key, and refers to the id column of Events table, this shows event to which this record of timeline data belongs to. Type - Integer machine_id Description - This is a foreign key, and refers to the id of Machines table, this shows the machine to which this parameter belongs to. Type - Integer MachineProductionTimeline - This table will consist of data related to all production timeline data related to a machine. This table is specifically used to store the production data related to spm machines (especially laser cladding machine). The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer start_time Description - This is the start time of the production. Type - Datetime end_time Description - This is the end time of the production. Type - Datetime duration Description - This is the duration of the production. Type - Timedelta machine_event_timeline Description - This is a foreign key, and refers to the id column of MachineEventTimeline table, this shows event timeline to which this record of machine production timeline data belongs to. Type - Integer machine_id Description - This is a foreign key, and refers to the id of Machines table, this shows the machine to which this parameter belongs to. Type - Integer part_number Description - This is the part number of the component manufactured during this production cycle. Type - String User - This table will consist of data related to all Users registered to access the web application. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer username Description - This is the user name. Type - String email Description - This is the email id of the user. Type - String full_name Description - This is the full name of the user. Type - String disabled Description - This is a boolean variable used to check if the user is enabled or not Type - Bool hashed_password Description - This is the (hashed) password of the user. Type - String role Description - This is the role of the user. Type - String EmailUser - This table will consist of data related to all Email Ids of users for whom email reports needs to sent. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer username Description - This is the user name. Type - String email_id Description - This is the email id of the user that will receive email alerts. Type - String full_name Description - This is the full name of the user. Type - String disabled Description - This is a boolean variable used to check if the user is enabled or not Type - Bool hashed_password Description - This is the (hashed) password of the user. Type - String role Description - This is the role of the user. Type - String Note If the user (of this application) wants to add or remove any email id that receives email alerts about abnormality, he/she needs to modify this table directly SparePart - This table will consist of data related to all Spare Parts of all the machines. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer part_name Description - This is the part name. Type - String referenc_part_number Description - This is the cumulative part count of the machine, just before the press of reset button. This is the P Cumulative in equation 1. Type - String warning_limit Description - This is the warning part count limit. Type - Integer critical_limit Description - This is the critical part count limit. Type - Integer machine_id Description - This is a foreign key, and refers to the id of Machines table, this shows the machine to which this spare part belongs to. Type - Integer MachinePartCount - This table will consist of part count data of all the machines. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer part_signal_name Description - This is the signal/parameter name which holds the part count for the machine (as stored in the mongodb). Type - String current_part_count Description - This is the current part count for the machine (as denoted buy the machine column) Type - Integer last_reset_count Description - This is the part count of the machine just before the reset button was pressed. This is used to find the cumulative part count of machine, that is if the maachine part count was 500 just before the resetting it, then after that the cumulative part count would be 500 + 1, 500 + 2, and so on where 500 is your last_reset_count and 1/2 is your current_part_count. Type - Integer machine_id Description - This is a foreign key, and refers to the id of Machines table, this shows the machine to which this spare part belongs to. Type - Integer latest_update_time Description - This is the recent most timestamp during which the part count was updated (as stored in the mongodb). ParameterCondition - This table will consist of data related to all conditions of a parameter, such as ok, warning and critical. The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer name Description - This is the condition name. Type - String EventStaticMachineParameter - This table will consist of real time static data related to all events of a machine . This is specifically used for SPM machines (especially laser cladding). The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer value Description - This is the value of the parameter. Type - float machine_event_timeline_id Description - This is a foreign key, and refers to the id of MachineEventTimeline table, this shows the event timeline to which this event static machine parameter value belongs to. Type - Integer machine_parameter_id Description - This is a foreign key, and refers to the id of MachineParameter table, this shows the machine parameter to which this record of value belongs to. Type - Integer RealTimeParameter - This table will consist of real time data related to all machine . The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer value Description - This is the value of the parameter. Type - float parameter_condition_id Description - This is a foreign key, and refers to the id of ParameterCondition table, this shows the condition to which this real time machine parameter value belongs to. Type - Integer machine_parameter_id Description - This is a foreign key, and refers to the id of MachineParameter table, this shows the machine parameter to which this record of value belongs to. Type - Integer Note This is the main table where the actual parameter values are stored by all the collector services, for all machines, such as cnc machines, laser cladding, journal grinding. The EventStaticMachineParameter table also stores parameter values, but only those value which are fixed for a given cycle, they are used specifically for laser cladding, since it has some static parameters that don't change during the operating time. The cnc machines, and journal grinding machines don't have such setup and hence will not use this table. RealTimeParameterActive - This table will consist of the recent most data related to all machine . The details of it's columns are given below: id Description - The prime identifier for any row within this table. Type - Integer value Description - This is the value of the parameter. Type - float parameter_condition_id Description - This is a foreign key, and refers to the id of ParameterCondition table, this shows the condition to which this real time machine parameter value belongs to. Type - Integer machine_parameter_id Description - This is a foreign key, and refers to the id of MachineParameter table, this shows the machine parameter to which this record of value belongs to. Type - Integer Note This is the main table where the recent most value of parameters are stored by all the collector services, for all machines, such as cnc machines, laser cladding, journal grinding. This separate table allows us to optimize the performance while querying the recent most details about all machines, parameter groups, etc.","title":"Database"},{"location":"Technical%20Stack/#48-hour-summary-report","text":"Every 4 hour (Starting from 5:30 AM) a summary of machines that were under abnormal condition are generated and saved as report in the directory 'directory location'. These reports are used by email service to send email alerts. A sample of the report is shown below:","title":"4/8 Hour Summary Report"},{"location":"Technical%20Stack/#email-alerts","text":"An email service is deployed, which looks for new reports in the directory 'directory' every 5 second. As soon a new report is created in this directory it will be sent as email and deleted.","title":"Email Alerts"},{"location":"Technical%20Stack/#back-end","text":"The back end is developed with python and fastapi framework, and ponyorm. The structure of the backend and description of the files and folders are explained in detail in the Code Explanation section.","title":"Back End"},{"location":"Technical%20Stack/#front-end","text":"The front end is developed with html, css, javascript and react framework. The structure of the frontend and description of the files and folders are explained in detail in the Code Explanation section.","title":"Front End"},{"location":"Troubleshoot_Faq/","text":"Troubleshooting & FAQ Introduction This section shows some of the common problems that you might face, and how to quickly solve them. How to add new machine?? CNC machine with MtLinki There are some modifications that need to be done to the collector Collector : If the machine is already connected to the MtLinki, then there are few steps that needs to followed: STEP 1: Add the machine to the machines table Note You can omit the id and enabled column while inserting (creating) a new machine, since these will be set to default values automcatically. STEP 2: Add its parameters to the machine_parameters table Note You can omit the id column, omit the critical and warning limts if the parameter is of type dynamic, and omit reference signal if its of type static. Make sure to insert the correct machine_id (corresponds to the id of the machine created at previous step and can be found by querying from the machines table), parameter_group_id (refer to the parameters_group table to find the corresponding id for the paramter group), unit_id (corresponds to the row id of the units table, if the requried unit is not available create (insert) a new unit or use no units as temporary unit) and parameter type. And also make sure that you insert the parameters into the table in right order(corresponding to its axis names), it is the same order that you want it to be displayed in the front end or as given in the machining axis document. The parameter name should be same as the signalname in MtLinki Mongodb. The parameter name should be unique in the database , if the name is not unique, add the machine name along with the parameter, such as \"carrier gas_laser_cladding_jop199\". STEP 3: Restart the static and dynamic collector services (as shown in the following sections). Front End : All the information related to machines and their parameters can be configured by modifying the config.ts file.: STEP 1: Open the config.ts file The config.ts file is located in the following location (the front end code needs to be downloaded from the github and opened in any editor) from the root directory of the project. /src/models/configs.ts STEP 2: Modify the config object The config object in this file represents the configuration parameters for the front end elements. This object has a property machinetypes . This needs to be modified. This organizes the machines into sections, you can add new machine and their corresponding axis/parameters names under the corresponding section. For example to add new machine \"T_H_OP6666\", add the following code to the machines property under the section head. { \"name\" : \"T_H_OP6666\" , \"axes\" : [ \"X\" , \"Y\" , \"Z\" , \"X1\" ] } The key point to note is, the axes names should be ordered exactly how the appear (inserted) in the database, under the table machine_parameters , but the name could differ, such as ServoLoad_1_path1_T_H_OP6666 could be mapped to X1 (but the ordering should be same, i.e ServoLoad_1_path1_T_H_OP6666 should be the fourth parameter for this machine in this parameter group (servo and spinle load) when orderded(in ascending) by the id in the machine_paramters table) STEP 3: Build the front end code and deploy. Run the following command (from your vs code terminal) npm run build This will generate the build files. The contents of the build files need to be copied to the apache server location /var/www/tnga_iot Warning Copy the contents of the apache server directory to any new folder before moving the new build files, so that if the new build doesn't work as intened, you could replace it back with original files. Press ctrl + F5 , in the front to force refresh the web page to reflect the new changes. Back End : The back need to not be modified, it is self containted and reacts automatically to any changes happening to the collector and front end. SPM machines These machine need a more custom solution as detailed below. Collector : The collector has to be developed based on how the data is available for the machine, it could be log files, proprietary api (such as haas mdc, fanuc focas). The user has to develop scripts to continuous monitor the machine for new data and add those data to the timescale database. There is no general script for it but there are certain guidelines that needs to be followed while developing the custom script for the spm machines. STEP 1: Add the machine to the machines table Note You can omit the id and enabled column while inserting (creating) a new machine, since these will be set to default values automcatically. STEP 2: Add its parameters to the machine_parameters table Note You can omit the id column, omit the critical and warning limts if the parameter is of type dynamic, and omit reference signal if its of type static. Make sure to insert the correct machine_id (corresponds to the id of the machine created at previous step and can be found by querying from the machines table), you can omit the parameter_group_id since they are not applicable for spm machines , unit_id (corresponds to the row id of the units table, if the requried unit is not available create (insert) a new unit or use no units as temporary unit) and parameter type ( \"spm_static\" for static paramter,and \"spm_dynamic\" for dynamic paramters ). And also make sure that you insert the parameters into the table in right order(corresponding to its axis names), it is the same order that you want it to be displayed in the front end or as given in the machining axis document. The parameter name should be unique in the database , if the name is not unique, add the machine name along with the parameter, such as \"carrier gas_laser_cladding_jop199\". STEP 3: Data format: The raw data from the machine, (either in log files or other format) need to be transformed to have four columns \"time\", \"machine_parameters_id\", \"value\", \"condition_id\", where the machine_parameters_id is the id of the row corresponding to the machine parameter in the machine parameters table, and condition id can take values \"1\", \"2\", or \"3\", corresponding to the id of rows from the parameter_conditions table. Once these format is transformed, they need to be inserted into real_time_machine_parameters table. For the real_time_machine_parameters_active table only the recent most data need to be updated . The key point is, the new data needs to be inserted/added to the real_time_machine_parameters table, but the recent most data need to replace the old data by updating the corresponding row (for that specific parameter) in the real_time_machine_parameters_active table. Front End : All the information related to machines and their parameters can be configured by modifying the config.ts file.: STEP 1: Open the config.ts file The config.ts file is located in the following location (the front end code needs to be downloaded from the github and opened in any editor) from the root directory of the project. /src/models/configs.ts STEP 2: Modify the config object The config object in this file represents the configuration parameters for the front end elements. This object has a property machinetypes . This needs to be modified. This organizes the machines into sections, you can add new machine and their corresponding axis/parameters names under the corresponding section. For example to add new machine \"T_H_OP6666\", add the following code to the machines property under the section head. { \"name\" : \"T_H_OP6666\" , \"axes\" : [ \"X\" , \"Y\" , \"Z\" , \"X1\" ] } The key point to note is, the axes names should be ordered exactly how the appear (inserted) in the database, under the table machine_parameters , but the name could differ, such as ServoLoad_1_path1_T_H_OP6666 could be mapped to X1 (but the ordering should be same, i.e ServoLoad_1_path1_T_H_OP6666 should be the fourth parameter for this machine in this parameter group (servo and spinle load) when orderded(in ascending) by the id in the machine_paramters table) STEP 3: Build the front end code and deploy. Run the following command (from your vs code terminal) npm run build This will generate the build files. The contents of the build files need to be copied to the apache server location /var/www/tnga_iot Warning Copy the contents of the apache server directory to any new folder before moving the new build files, so that if the new build doesn't work as intened, you could replace it back with original files. Press ctrl + F5 , in the front to force refresh the web page to reflect the new changes. Back End : The back need to not be modified, it is self containted and reacts automatically to any changes happening to the collector and front end. How to change anomaly detection algorithm for dynamic parameters?? All the anomaly detection task are carried out in the module anomaly_detection within the main application (be it cnc data collector, laser cladding collector etc). The structure of that module is shown below: As seen in the above pictures the function that carries out the detection method (kruskal method here) is implemented in the detection_algorithm.py script The contents of this function can be changed to use a different algorithm. Warning Do not change the function name (even if the new algorithm has different name) to ease out the transition to new algorithm. Any new algorithm should follow the following guidelines: It Should accept a refence signal It should accept sample signal It should accept a threshold value (if not can use a default value of zero) Should return 3 if the condition of the sample signal is classified as abnormal/critical Should return 2 if the condition of the sample signal is classified as warning Should return 1 if the condition of the sample signal is classified as normal This function is used in the following places as shown below If in case you want to change the algorithm to other advanced algorithm, with different set of arguments, then you could change the function (and its name) and call that function with appropriate signature in the above mentioned places. How to remove existing axis/parameter of a machine?? CNC machine with MtLinki There are some modifications that need to be done to the timescale db Timescale DB : STEP 1: Delete all realtime data and realtime active data corresponding to the axis/parameter: The corresponding parameter's id needs to found and their records in the real_time_machine_parameters and real_time_machine_parameters_active table needs to be deleted Use the following code to find the id of the parameter: SELECT id , name , warning_limit , critical_limit , reference_signal , unit_id , parameter_group_id , machine_id , parameter_type FROM tiei_sample_4 . machine_parameters WHERE name = 'CncFan1Speed_path1_T_B_OP180' where you should replace CncFan1Speed_path1_T_B_OP180 with the actual name of the parameter as stored in MtLink in Mongodb . Use the following code to delete all the records from the realtime_machine_parameters tables: DELETE FROM tiei_sample_4 . real_time_machine_parameters WHERE machine_parameters_id = 163 ; where you should replace 163 with the id of the parameter returned from the previous search . Use the following code to delete all the records from the realtime_machine_parameters_active tables: DELETE FROM tiei_sample_4 . real_time_machine_parameters_active WHERE machine_parameters_id = 163 ; where you should replace 163 with the id of the parameter returned from the previous search . Warning Be cautious when using the above commands as they will delete all records from the table, if important parameter data are deleted, then they cannot be recovered. STEP 2: Delete the Parameter from MtLinki MongoDB This is important step, the parameter needs to be deleted from the mongodb also, else the collector will throw error. STEP 3: Restart the static and dynamic collector services (as shown in the following sections). Front End : All the information related to machines and their parameters can be configured by modifying the config.ts file.: STEP 1: Open the config.ts file The config.ts file is located in the following location (the front end code needs to be downloaded from the github and opened in any editor) from the root directory of the project. /src/models/configs.ts STEP 2: Modify the config object The config object in this file represents the configuration parameters for the front end elements. This object has a property machinetypes . This needs to be modified. This organizes the machines into sections, you can remove axis/parameters names under the corresponding section. For example to remove \"X\" axis from the machine \"T_H_OP6666\", the following modification has to be done to the machines property under the section head. Before { \"name\" : \"T_H_OP6666\" , \"axes\" : [ \"X\" , \"Y\" , \"Z\" , \"X1\" ] } After { \"name\" : \"T_H_OP6666\" , \"axes\" : [ \"Y\" , \"Z\" , \"X1\" ] } STEP 3: Build the front end code and deploy. Run the following command (from your vs code terminal) npm run build This will generate the build files. The contents of the build files need to be copied to the apache server location /var/www/tnga_iot Warning Copy the contents of the apache server directory to any new folder before moving the new build files, so that if the new build doesn't work as intened, you could replace it back with original files. Press ctrl + F5 , in the front to force refresh the web page to reflect the new changes. - Back End : The back need to not be modified, it is self containted and reacts automatically to any changes happening to the collector and front end. How to restart services (and check it status)?? Check the Status The following code can be used to check the status of any service systemctl status static_collector You could replace the static_collector with the service you want to check. The following images shows the result of using that command You shall press ctrl + c to get back your terminal from the service status (if required). Restart the Service The following code can be used to restart any service systemctl restart static_collector You could replace the static_collector with the service you want to restart. Tip Once in a while you can check the status of all services, or if in case there is any issue you can check all the services and try restarting any service that is inactive/dead. If nothing else works, you can always contact CMTI, We're happy to help! \ud83d\ude03 \ud83e\udd1d\ud83c\udffb","title":"Troubleshooting & FAQ"},{"location":"Troubleshoot_Faq/#troubleshooting-faq","text":"","title":"Troubleshooting &amp; FAQ"},{"location":"Troubleshoot_Faq/#introduction","text":"This section shows some of the common problems that you might face, and how to quickly solve them.","title":"Introduction"},{"location":"Troubleshoot_Faq/#how-to-add-new-machine","text":"","title":"How to add new machine??"},{"location":"Troubleshoot_Faq/#cnc-machine-with-mtlinki","text":"There are some modifications that need to be done to the collector Collector : If the machine is already connected to the MtLinki, then there are few steps that needs to followed: STEP 1: Add the machine to the machines table Note You can omit the id and enabled column while inserting (creating) a new machine, since these will be set to default values automcatically. STEP 2: Add its parameters to the machine_parameters table Note You can omit the id column, omit the critical and warning limts if the parameter is of type dynamic, and omit reference signal if its of type static. Make sure to insert the correct machine_id (corresponds to the id of the machine created at previous step and can be found by querying from the machines table), parameter_group_id (refer to the parameters_group table to find the corresponding id for the paramter group), unit_id (corresponds to the row id of the units table, if the requried unit is not available create (insert) a new unit or use no units as temporary unit) and parameter type. And also make sure that you insert the parameters into the table in right order(corresponding to its axis names), it is the same order that you want it to be displayed in the front end or as given in the machining axis document. The parameter name should be same as the signalname in MtLinki Mongodb. The parameter name should be unique in the database , if the name is not unique, add the machine name along with the parameter, such as \"carrier gas_laser_cladding_jop199\". STEP 3: Restart the static and dynamic collector services (as shown in the following sections). Front End : All the information related to machines and their parameters can be configured by modifying the config.ts file.: STEP 1: Open the config.ts file The config.ts file is located in the following location (the front end code needs to be downloaded from the github and opened in any editor) from the root directory of the project. /src/models/configs.ts STEP 2: Modify the config object The config object in this file represents the configuration parameters for the front end elements. This object has a property machinetypes . This needs to be modified. This organizes the machines into sections, you can add new machine and their corresponding axis/parameters names under the corresponding section. For example to add new machine \"T_H_OP6666\", add the following code to the machines property under the section head. { \"name\" : \"T_H_OP6666\" , \"axes\" : [ \"X\" , \"Y\" , \"Z\" , \"X1\" ] } The key point to note is, the axes names should be ordered exactly how the appear (inserted) in the database, under the table machine_parameters , but the name could differ, such as ServoLoad_1_path1_T_H_OP6666 could be mapped to X1 (but the ordering should be same, i.e ServoLoad_1_path1_T_H_OP6666 should be the fourth parameter for this machine in this parameter group (servo and spinle load) when orderded(in ascending) by the id in the machine_paramters table) STEP 3: Build the front end code and deploy. Run the following command (from your vs code terminal) npm run build This will generate the build files. The contents of the build files need to be copied to the apache server location /var/www/tnga_iot Warning Copy the contents of the apache server directory to any new folder before moving the new build files, so that if the new build doesn't work as intened, you could replace it back with original files. Press ctrl + F5 , in the front to force refresh the web page to reflect the new changes. Back End : The back need to not be modified, it is self containted and reacts automatically to any changes happening to the collector and front end.","title":"CNC machine with MtLinki"},{"location":"Troubleshoot_Faq/#spm-machines","text":"These machine need a more custom solution as detailed below. Collector : The collector has to be developed based on how the data is available for the machine, it could be log files, proprietary api (such as haas mdc, fanuc focas). The user has to develop scripts to continuous monitor the machine for new data and add those data to the timescale database. There is no general script for it but there are certain guidelines that needs to be followed while developing the custom script for the spm machines. STEP 1: Add the machine to the machines table Note You can omit the id and enabled column while inserting (creating) a new machine, since these will be set to default values automcatically. STEP 2: Add its parameters to the machine_parameters table Note You can omit the id column, omit the critical and warning limts if the parameter is of type dynamic, and omit reference signal if its of type static. Make sure to insert the correct machine_id (corresponds to the id of the machine created at previous step and can be found by querying from the machines table), you can omit the parameter_group_id since they are not applicable for spm machines , unit_id (corresponds to the row id of the units table, if the requried unit is not available create (insert) a new unit or use no units as temporary unit) and parameter type ( \"spm_static\" for static paramter,and \"spm_dynamic\" for dynamic paramters ). And also make sure that you insert the parameters into the table in right order(corresponding to its axis names), it is the same order that you want it to be displayed in the front end or as given in the machining axis document. The parameter name should be unique in the database , if the name is not unique, add the machine name along with the parameter, such as \"carrier gas_laser_cladding_jop199\". STEP 3: Data format: The raw data from the machine, (either in log files or other format) need to be transformed to have four columns \"time\", \"machine_parameters_id\", \"value\", \"condition_id\", where the machine_parameters_id is the id of the row corresponding to the machine parameter in the machine parameters table, and condition id can take values \"1\", \"2\", or \"3\", corresponding to the id of rows from the parameter_conditions table. Once these format is transformed, they need to be inserted into real_time_machine_parameters table. For the real_time_machine_parameters_active table only the recent most data need to be updated . The key point is, the new data needs to be inserted/added to the real_time_machine_parameters table, but the recent most data need to replace the old data by updating the corresponding row (for that specific parameter) in the real_time_machine_parameters_active table. Front End : All the information related to machines and their parameters can be configured by modifying the config.ts file.: STEP 1: Open the config.ts file The config.ts file is located in the following location (the front end code needs to be downloaded from the github and opened in any editor) from the root directory of the project. /src/models/configs.ts STEP 2: Modify the config object The config object in this file represents the configuration parameters for the front end elements. This object has a property machinetypes . This needs to be modified. This organizes the machines into sections, you can add new machine and their corresponding axis/parameters names under the corresponding section. For example to add new machine \"T_H_OP6666\", add the following code to the machines property under the section head. { \"name\" : \"T_H_OP6666\" , \"axes\" : [ \"X\" , \"Y\" , \"Z\" , \"X1\" ] } The key point to note is, the axes names should be ordered exactly how the appear (inserted) in the database, under the table machine_parameters , but the name could differ, such as ServoLoad_1_path1_T_H_OP6666 could be mapped to X1 (but the ordering should be same, i.e ServoLoad_1_path1_T_H_OP6666 should be the fourth parameter for this machine in this parameter group (servo and spinle load) when orderded(in ascending) by the id in the machine_paramters table) STEP 3: Build the front end code and deploy. Run the following command (from your vs code terminal) npm run build This will generate the build files. The contents of the build files need to be copied to the apache server location /var/www/tnga_iot Warning Copy the contents of the apache server directory to any new folder before moving the new build files, so that if the new build doesn't work as intened, you could replace it back with original files. Press ctrl + F5 , in the front to force refresh the web page to reflect the new changes. Back End : The back need to not be modified, it is self containted and reacts automatically to any changes happening to the collector and front end.","title":"SPM machines"},{"location":"Troubleshoot_Faq/#how-to-change-anomaly-detection-algorithm-for-dynamic-parameters","text":"All the anomaly detection task are carried out in the module anomaly_detection within the main application (be it cnc data collector, laser cladding collector etc). The structure of that module is shown below: As seen in the above pictures the function that carries out the detection method (kruskal method here) is implemented in the detection_algorithm.py script The contents of this function can be changed to use a different algorithm. Warning Do not change the function name (even if the new algorithm has different name) to ease out the transition to new algorithm. Any new algorithm should follow the following guidelines: It Should accept a refence signal It should accept sample signal It should accept a threshold value (if not can use a default value of zero) Should return 3 if the condition of the sample signal is classified as abnormal/critical Should return 2 if the condition of the sample signal is classified as warning Should return 1 if the condition of the sample signal is classified as normal This function is used in the following places as shown below If in case you want to change the algorithm to other advanced algorithm, with different set of arguments, then you could change the function (and its name) and call that function with appropriate signature in the above mentioned places.","title":"How to change anomaly detection algorithm for dynamic parameters??"},{"location":"Troubleshoot_Faq/#how-to-remove-existing-axisparameter-of-a-machine","text":"","title":"How to remove existing axis/parameter of a machine??"},{"location":"Troubleshoot_Faq/#cnc-machine-with-mtlinki_1","text":"There are some modifications that need to be done to the timescale db Timescale DB : STEP 1: Delete all realtime data and realtime active data corresponding to the axis/parameter: The corresponding parameter's id needs to found and their records in the real_time_machine_parameters and real_time_machine_parameters_active table needs to be deleted Use the following code to find the id of the parameter: SELECT id , name , warning_limit , critical_limit , reference_signal , unit_id , parameter_group_id , machine_id , parameter_type FROM tiei_sample_4 . machine_parameters WHERE name = 'CncFan1Speed_path1_T_B_OP180' where you should replace CncFan1Speed_path1_T_B_OP180 with the actual name of the parameter as stored in MtLink in Mongodb . Use the following code to delete all the records from the realtime_machine_parameters tables: DELETE FROM tiei_sample_4 . real_time_machine_parameters WHERE machine_parameters_id = 163 ; where you should replace 163 with the id of the parameter returned from the previous search . Use the following code to delete all the records from the realtime_machine_parameters_active tables: DELETE FROM tiei_sample_4 . real_time_machine_parameters_active WHERE machine_parameters_id = 163 ; where you should replace 163 with the id of the parameter returned from the previous search . Warning Be cautious when using the above commands as they will delete all records from the table, if important parameter data are deleted, then they cannot be recovered. STEP 2: Delete the Parameter from MtLinki MongoDB This is important step, the parameter needs to be deleted from the mongodb also, else the collector will throw error. STEP 3: Restart the static and dynamic collector services (as shown in the following sections). Front End : All the information related to machines and their parameters can be configured by modifying the config.ts file.: STEP 1: Open the config.ts file The config.ts file is located in the following location (the front end code needs to be downloaded from the github and opened in any editor) from the root directory of the project. /src/models/configs.ts STEP 2: Modify the config object The config object in this file represents the configuration parameters for the front end elements. This object has a property machinetypes . This needs to be modified. This organizes the machines into sections, you can remove axis/parameters names under the corresponding section. For example to remove \"X\" axis from the machine \"T_H_OP6666\", the following modification has to be done to the machines property under the section head. Before { \"name\" : \"T_H_OP6666\" , \"axes\" : [ \"X\" , \"Y\" , \"Z\" , \"X1\" ] } After { \"name\" : \"T_H_OP6666\" , \"axes\" : [ \"Y\" , \"Z\" , \"X1\" ] } STEP 3: Build the front end code and deploy. Run the following command (from your vs code terminal) npm run build This will generate the build files. The contents of the build files need to be copied to the apache server location /var/www/tnga_iot Warning Copy the contents of the apache server directory to any new folder before moving the new build files, so that if the new build doesn't work as intened, you could replace it back with original files. Press ctrl + F5 , in the front to force refresh the web page to reflect the new changes. - Back End : The back need to not be modified, it is self containted and reacts automatically to any changes happening to the collector and front end.","title":"CNC machine with MtLinki"},{"location":"Troubleshoot_Faq/#how-to-restart-services-and-check-it-status","text":"","title":"How to restart services (and check it status)??"},{"location":"Troubleshoot_Faq/#check-the-status","text":"The following code can be used to check the status of any service systemctl status static_collector You could replace the static_collector with the service you want to check. The following images shows the result of using that command You shall press ctrl + c to get back your terminal from the service status (if required).","title":"Check the Status"},{"location":"Troubleshoot_Faq/#restart-the-service","text":"The following code can be used to restart any service systemctl restart static_collector You could replace the static_collector with the service you want to restart. Tip Once in a while you can check the status of all services, or if in case there is any issue you can check all the services and try restarting any service that is inactive/dead. If nothing else works, you can always contact CMTI, We're happy to help! \ud83d\ude03 \ud83e\udd1d\ud83c\udffb","title":"Restart the Service"},{"location":"user_interfaces/","text":"User Interface This section gives the details about the user interface for the implemented solution. It gives details about all the functionalites of available features and steps to carry out certain task. Maintenance Section There are two sections within the maintenacnce section, A section to show the states of all parameter group, production line, machine, and it's parameters A section that shows the realtime data (time vs axis/parameter). This can be accessed by clicking on the axis (tiny rectangular box withing the machine infomation card) Machine State Page The screens that shows that states of differenet element are shown below. This section shows the machine state of the 59 general purpose cnc machines. The main element in the screeen is your information card for the machines (rectangular box). It has two set of attributes Machine Name - This represents the full name of the machine, such as OP180A (without the production line name). Parameter/Axis Name - The different axis are represented by the smaller rectangular box within the information card right below the machine name, they typically consist of 1, 2 or 3 letter symbols. Each of the machines are grouped based on the production line such as head, crank and block. This screen shows four type of states: Machine Level State - Each of the machine (as represented by the rectangular information box) will change its color based upon the current state of all the parameters/axis it has. Axis Level State - Each of the machine axis (as represented by the smaller rectangular information box) will change its color based upon it's current state. Line Level State - Each of the production line (as represented by the bigger and transparent rectangular information box) will change its color based upon the current state of all the machines in it's production line. Parameter Group Level State - Each of the parameter group (as represented by the rectangular information box at the bottom of the page) will change its color based upon the state of the machines in a particular group such as encoder temperature. for all the above state, red represents a critical state, yellow represents a warning state and green repersents an normal state. The different sub sections of this maintenace section is explained below (as numbered in the image above) Parameter Name : This shows the parameter group name, such as encoder temperature, apc battery, etc Machine State Summary : This shows the summary of the states of all machines, it gives the total number of machines in the three different states. Logged In User Details : This shows the current user logged in. You can use that to log out from the current session. Current Section Selected : This shows the current section (of the web application) that is selected. Parameter/Axis State : This shows the current state of the parameter/axis (Critical). Machine State Information Card : This shows the current status of the machine. Parameter/Axis State : This shows the current state of the parameter/axis (Warning) that belongs to the machine. Line State Information Card : This shows the name of the production line. Line State Information Card : This shows the current state of the production line. Parameter Group State Summary : This shows the current state of the different parameter groups that belongs to the machine. Real Time Graph The screens that shows the real time data (for static parameter) is shown below The different sub sections of this maintenace section is explained below (as numbered in the image above) Parameter Name : This shows the parameter group name, prorduction line, machine name and axis/parameter name. Warning Limit : This shows the current warning limit of this parameter. Warning Limit Set Button : This is the button used to set/change the warning limit for the current parameter. Critical Limit : This shows the current critical limit of this parameter Critical Limit Set Button : This is the button used to set/change the critical limit for the current parameter. Graph Title : This shows the title of the graph. Start Time Query Selector : This is used to select the start time of your query to get the real time data. End Time Query Selector : This is used to select the end time of your query to get the real time data. Note If data is not available for the given time range, the recent most available data is given. Only in the case where the parameter has no data recorded ever, it will throw a warning. Query Submit Button : This is the button used to submit your query for real time data. Detailed Graph Information Card : This information card shows the x and y axis names, units, and the current value of x and y axis when you hover the mouse over the graph. The screens that shows the real time data (for dynamic parameter) is shown below The different sub sections of this maintenace section is explained below (as numbered in the image above) Add/Edit Limits : This button is used to add (new or remove and replace existing) or append (to already existing) reference signal to the dynamic parameter. Alarm Monitoring Section There section has one table to give the list of alarms for the selected machine in given time range, and three graphs: Alarm Count Vs Alarms - This shows a parito graph between the total count of alarms and the alarm (name), for the selected machine and time range. Alarm Timespan Vs Alarms - This shows a parito graph between the total time (in seconds) of alarms and the alarm (name), for the selected machine and time range. Alarm Timespans - This shows a pi chart of the different alarms according to their total alarm timespan in seconds. Alarm Table The screens that shows the alarm table is shown below The different sub sections of this section is explained below (as numbered in the image above) Page Name : This shows the title of the page (Alarm Monitoring). Machine Selection : This drop down box allows you to select the list of available machines Date Query Type : This drop down box allows you to select the type of date query, such as last day, week, month or custom range. Start Time Query Selector : This is used to select the start time of your query to get the alarm data. End Time Query Selector : This is used to select the end time of your query to get the alarm time data. Query Submit Button : This is the button used to submit your query for alarm data. Table Name : This shows the title of the table. Pagnation Selector : This button allows the user to select the number of rows to be displayed in the table and the page number. Partio Graphs The screens that shows the partio graphs for the Alarm Count Vs Alarms and Alarm Timespan Vs Alarms are shown below The different sub sections of this section is explained below (as numbered in the image above) Graph Name : This shows the title of the graph. Hide/Reveal Button : This button is used to hide or reveal the graph. Legend : This shows the legend of the graph. Pi Chart The screens that shows the pi chart for the Alarm Timespan are shown below: The different sub sections of this section is explained below (as numbered in the image above) Graph Name : This shows the title of the graph. Hide/Reveal Button : This button is used to hide or reveal the graph. Legend : This shows the legend of the graph. Spare Part Management This section is used for spare part management, it has two views: Machine Details - This shows information card for all available machines and has a details button, which can be clicked to view the current status of it's spare part count. Machine Specific Spare Part Details - This shows all the available spare parts for the machine, it's current part count and part count of the spare parts. All Machine Status The screens that shows the machine details is shown below The different sub sections of this section is explained below (as numbered in the image above) Page Name : This shows the title of the page (Alarm Monitoring). Machine Details : This shows the details of the machine. The different color represents the state of the machine, where warning / critical means any one or more of the spare parts of the machine has reached the limit and needs to be replaced. Production Line Name : This shows the production line number. Machine Specific Spare Part Details The screens that shows the spare part details for a selected machine is shown below The different sub sections of this section is explained below (as numbered in the image above) Machine Name : This shows the prorduction line, machine name. Cumulative Part Count : This shows the total/cumulative part count of the machine (irrespective of the number of times the reset button was pressed in the machine). Current Part Count : This shows the current part count of the machine after the reset button was pressed. Lock/Unlock Button : This button is used to lock and unlock the modification of the spare part, to avoid accidental changes. This has be unlocked before resetting the spare part count. Add Part Button : This button is used to create a new spare part for the machine. Spare Part Warning Limit : This shows the warning limit for the spare part. Spare Part Critical Limit : This shows the critical limit for the spare part. The screens that shows the spare part details for a selected machine after unlocking the table is shown below The different sub sections of this section is explained below (as numbered in the image above) Delete Spare Part Button : This button is used to delete the spare part from the database. Current Spare Part Count : This shows the number of parts produced by the machine (irrespective of the number of time the reset button was pressed, since it take the cumulative value) since the spare part was created in the front end or since the reset button was pressed. Spare Part Counter Reset Button : This button is used to reset the spare part count (to zero). This should be used once the part has been replaced in the machine. Spare Part Warning Limit : This button can be used to set the warning limit for this spare part (activated only after the table is unlocked). Spare Part Critical Limit : This button can be used to set the critical limit for this spare part (activated only after the table is unlocked). SPM Machines This section is used for management of SPM machines, it has two views: All SPM Machine Details This shows information card for all available SPM machines and has a details button, which can be clicked to view the current status of its parameters as shown in the above image. The information card is highlighted in different colors (green ,orange, red) corresponding to it's (it's parameters) state.The different sub sections of this section is explained below (as numbered in the image above): Machine Status This shows the machine name, along with its status (color coded) Machine Specific Details This shows the real time graph for the spm. It can display three information Static Parameter - All the parameters (both static and dynamic) are combined under parameters section, the static parameters will have critical and warning limits. The sample screen is shown below, The different sub sections of this section is explained below (as numbered in the image below). Machine Name : This shows the machine name. Limit Setter : This shows the current limits, and also allows the user to set the limits. Query Submitter : This shows button is used to submit a real time data query. Machine Parameter : This shows the parameter name, and it's condition (color coded by the box below the parameter name), there is a small check box (to the left of the parameter name) that allows the user to select the parameter that needs to be displayed. Legend : This shows the legend for the graph, (as the user hovers over the graph, the values will be displayed over here) Dynamic Parameter - All the parameters (both static and dynamic) are combined under parameters section, the dynamic parameters will have button to add edit reference signal. The sample screen is shown below, The different sub sections of this section is explained below (as numbered in the image below) Add/Edit Limits : This button is used to add (new or remove and replace existing) or append (to already existing) reference signal to the dynamic parameter. Position Based Query - The sample screen is shown below, The different sub sections of this section is explained below (as numbered in the image below) Add/Edit Limits : This button is used to add (new or remove and replace existing) or append (to already existing) reference signal to the dynamic parameter. Note This screen is applicable only for laser cladding. User Management This section is used for user management: The screens that shows the user details is shown below The different sub sections of this section is explained below (as numbered in the image above) Delete Button : This button is used to delete the user Note The admin user \"cmti\" cannot be deleted, for safety purposes. Add User Button : This button is used to add new user to the database","title":"User Interface"},{"location":"user_interfaces/#user-interface","text":"This section gives the details about the user interface for the implemented solution. It gives details about all the functionalites of available features and steps to carry out certain task.","title":"User Interface"},{"location":"user_interfaces/#maintenance-section","text":"There are two sections within the maintenacnce section, A section to show the states of all parameter group, production line, machine, and it's parameters A section that shows the realtime data (time vs axis/parameter). This can be accessed by clicking on the axis (tiny rectangular box withing the machine infomation card)","title":"Maintenance Section"},{"location":"user_interfaces/#machine-state-page","text":"The screens that shows that states of differenet element are shown below. This section shows the machine state of the 59 general purpose cnc machines. The main element in the screeen is your information card for the machines (rectangular box). It has two set of attributes Machine Name - This represents the full name of the machine, such as OP180A (without the production line name). Parameter/Axis Name - The different axis are represented by the smaller rectangular box within the information card right below the machine name, they typically consist of 1, 2 or 3 letter symbols. Each of the machines are grouped based on the production line such as head, crank and block. This screen shows four type of states: Machine Level State - Each of the machine (as represented by the rectangular information box) will change its color based upon the current state of all the parameters/axis it has. Axis Level State - Each of the machine axis (as represented by the smaller rectangular information box) will change its color based upon it's current state. Line Level State - Each of the production line (as represented by the bigger and transparent rectangular information box) will change its color based upon the current state of all the machines in it's production line. Parameter Group Level State - Each of the parameter group (as represented by the rectangular information box at the bottom of the page) will change its color based upon the state of the machines in a particular group such as encoder temperature. for all the above state, red represents a critical state, yellow represents a warning state and green repersents an normal state. The different sub sections of this maintenace section is explained below (as numbered in the image above) Parameter Name : This shows the parameter group name, such as encoder temperature, apc battery, etc Machine State Summary : This shows the summary of the states of all machines, it gives the total number of machines in the three different states. Logged In User Details : This shows the current user logged in. You can use that to log out from the current session. Current Section Selected : This shows the current section (of the web application) that is selected. Parameter/Axis State : This shows the current state of the parameter/axis (Critical). Machine State Information Card : This shows the current status of the machine. Parameter/Axis State : This shows the current state of the parameter/axis (Warning) that belongs to the machine. Line State Information Card : This shows the name of the production line. Line State Information Card : This shows the current state of the production line. Parameter Group State Summary : This shows the current state of the different parameter groups that belongs to the machine.","title":"Machine State Page"},{"location":"user_interfaces/#real-time-graph","text":"The screens that shows the real time data (for static parameter) is shown below The different sub sections of this maintenace section is explained below (as numbered in the image above) Parameter Name : This shows the parameter group name, prorduction line, machine name and axis/parameter name. Warning Limit : This shows the current warning limit of this parameter. Warning Limit Set Button : This is the button used to set/change the warning limit for the current parameter. Critical Limit : This shows the current critical limit of this parameter Critical Limit Set Button : This is the button used to set/change the critical limit for the current parameter. Graph Title : This shows the title of the graph. Start Time Query Selector : This is used to select the start time of your query to get the real time data. End Time Query Selector : This is used to select the end time of your query to get the real time data. Note If data is not available for the given time range, the recent most available data is given. Only in the case where the parameter has no data recorded ever, it will throw a warning. Query Submit Button : This is the button used to submit your query for real time data. Detailed Graph Information Card : This information card shows the x and y axis names, units, and the current value of x and y axis when you hover the mouse over the graph. The screens that shows the real time data (for dynamic parameter) is shown below The different sub sections of this maintenace section is explained below (as numbered in the image above) Add/Edit Limits : This button is used to add (new or remove and replace existing) or append (to already existing) reference signal to the dynamic parameter.","title":"Real Time Graph"},{"location":"user_interfaces/#alarm-monitoring-section","text":"There section has one table to give the list of alarms for the selected machine in given time range, and three graphs: Alarm Count Vs Alarms - This shows a parito graph between the total count of alarms and the alarm (name), for the selected machine and time range. Alarm Timespan Vs Alarms - This shows a parito graph between the total time (in seconds) of alarms and the alarm (name), for the selected machine and time range. Alarm Timespans - This shows a pi chart of the different alarms according to their total alarm timespan in seconds.","title":"Alarm Monitoring Section"},{"location":"user_interfaces/#alarm-table","text":"The screens that shows the alarm table is shown below The different sub sections of this section is explained below (as numbered in the image above) Page Name : This shows the title of the page (Alarm Monitoring). Machine Selection : This drop down box allows you to select the list of available machines Date Query Type : This drop down box allows you to select the type of date query, such as last day, week, month or custom range. Start Time Query Selector : This is used to select the start time of your query to get the alarm data. End Time Query Selector : This is used to select the end time of your query to get the alarm time data. Query Submit Button : This is the button used to submit your query for alarm data. Table Name : This shows the title of the table. Pagnation Selector : This button allows the user to select the number of rows to be displayed in the table and the page number.","title":"Alarm Table"},{"location":"user_interfaces/#partio-graphs","text":"The screens that shows the partio graphs for the Alarm Count Vs Alarms and Alarm Timespan Vs Alarms are shown below The different sub sections of this section is explained below (as numbered in the image above) Graph Name : This shows the title of the graph. Hide/Reveal Button : This button is used to hide or reveal the graph. Legend : This shows the legend of the graph.","title":"Partio Graphs"},{"location":"user_interfaces/#pi-chart","text":"The screens that shows the pi chart for the Alarm Timespan are shown below: The different sub sections of this section is explained below (as numbered in the image above) Graph Name : This shows the title of the graph. Hide/Reveal Button : This button is used to hide or reveal the graph. Legend : This shows the legend of the graph.","title":"Pi Chart"},{"location":"user_interfaces/#spare-part-management","text":"This section is used for spare part management, it has two views: Machine Details - This shows information card for all available machines and has a details button, which can be clicked to view the current status of it's spare part count. Machine Specific Spare Part Details - This shows all the available spare parts for the machine, it's current part count and part count of the spare parts.","title":"Spare Part Management"},{"location":"user_interfaces/#all-machine-status","text":"The screens that shows the machine details is shown below The different sub sections of this section is explained below (as numbered in the image above) Page Name : This shows the title of the page (Alarm Monitoring). Machine Details : This shows the details of the machine. The different color represents the state of the machine, where warning / critical means any one or more of the spare parts of the machine has reached the limit and needs to be replaced. Production Line Name : This shows the production line number.","title":"All Machine Status"},{"location":"user_interfaces/#machine-specific-spare-part-details","text":"The screens that shows the spare part details for a selected machine is shown below The different sub sections of this section is explained below (as numbered in the image above) Machine Name : This shows the prorduction line, machine name. Cumulative Part Count : This shows the total/cumulative part count of the machine (irrespective of the number of times the reset button was pressed in the machine). Current Part Count : This shows the current part count of the machine after the reset button was pressed. Lock/Unlock Button : This button is used to lock and unlock the modification of the spare part, to avoid accidental changes. This has be unlocked before resetting the spare part count. Add Part Button : This button is used to create a new spare part for the machine. Spare Part Warning Limit : This shows the warning limit for the spare part. Spare Part Critical Limit : This shows the critical limit for the spare part. The screens that shows the spare part details for a selected machine after unlocking the table is shown below The different sub sections of this section is explained below (as numbered in the image above) Delete Spare Part Button : This button is used to delete the spare part from the database. Current Spare Part Count : This shows the number of parts produced by the machine (irrespective of the number of time the reset button was pressed, since it take the cumulative value) since the spare part was created in the front end or since the reset button was pressed. Spare Part Counter Reset Button : This button is used to reset the spare part count (to zero). This should be used once the part has been replaced in the machine. Spare Part Warning Limit : This button can be used to set the warning limit for this spare part (activated only after the table is unlocked). Spare Part Critical Limit : This button can be used to set the critical limit for this spare part (activated only after the table is unlocked).","title":"Machine Specific Spare Part Details"},{"location":"user_interfaces/#spm-machines","text":"This section is used for management of SPM machines, it has two views:","title":"SPM Machines"},{"location":"user_interfaces/#all-spm-machine-details","text":"This shows information card for all available SPM machines and has a details button, which can be clicked to view the current status of its parameters as shown in the above image. The information card is highlighted in different colors (green ,orange, red) corresponding to it's (it's parameters) state.The different sub sections of this section is explained below (as numbered in the image above): Machine Status This shows the machine name, along with its status (color coded)","title":"All SPM Machine Details"},{"location":"user_interfaces/#machine-specific-details","text":"This shows the real time graph for the spm. It can display three information Static Parameter - All the parameters (both static and dynamic) are combined under parameters section, the static parameters will have critical and warning limits. The sample screen is shown below, The different sub sections of this section is explained below (as numbered in the image below). Machine Name : This shows the machine name. Limit Setter : This shows the current limits, and also allows the user to set the limits. Query Submitter : This shows button is used to submit a real time data query. Machine Parameter : This shows the parameter name, and it's condition (color coded by the box below the parameter name), there is a small check box (to the left of the parameter name) that allows the user to select the parameter that needs to be displayed. Legend : This shows the legend for the graph, (as the user hovers over the graph, the values will be displayed over here) Dynamic Parameter - All the parameters (both static and dynamic) are combined under parameters section, the dynamic parameters will have button to add edit reference signal. The sample screen is shown below, The different sub sections of this section is explained below (as numbered in the image below) Add/Edit Limits : This button is used to add (new or remove and replace existing) or append (to already existing) reference signal to the dynamic parameter. Position Based Query - The sample screen is shown below, The different sub sections of this section is explained below (as numbered in the image below) Add/Edit Limits : This button is used to add (new or remove and replace existing) or append (to already existing) reference signal to the dynamic parameter. Note This screen is applicable only for laser cladding.","title":"Machine Specific Details"},{"location":"user_interfaces/#user-management","text":"This section is used for user management: The screens that shows the user details is shown below The different sub sections of this section is explained below (as numbered in the image above) Delete Button : This button is used to delete the user Note The admin user \"cmti\" cannot be deleted, for safety purposes. Add User Button : This button is used to add new user to the database","title":"User Management"},{"location":"Code%20Explanation/Back%20End/","text":"Back End Introduction The requirements for the back end are: anyio==3.5.0 asgiref==3.5.1 bcrypt==3.2.2 cffi==1.15.1 click==8.1.3 colorama==0.4.4 cryptography==37.0.4 databases==0.5.5 ecdsa==0.18.0 et-xmlfile==1.1.0 fastapi==0.75.2 greenlet==1.1.2 h11==0.13.0 idna==3.3 motor==3.0.0 numpy==1.22.4 openpyxl==3.0.10 pandas==1.4.2 passlib==1.7.4 pony==0.7.16 psycopg2==2.9.3 pyasn1==0.4.8 pycparser==2.21 pydantic==1.9.0 pymongo==4.1.1 python-dateutil==2.8.2 python-dotenv==0.20.0 python-jose==3.3.0 python-multipart==0.0.5 pytz==2022.1 rsa==4.9 six==1.16.0 sniffio==1.2.0 SQLAlchemy==1.4.35 sqlalchemy2-stubs==0.0.2a22 sqlmodel==0.0.6 starlette==0.17.1 typing_extensions==4.2.0 uvicorn==0.17.6 XlsxWriter~=3.0.3 schedule~=1.1.0 Project layout main.py # The main entry point for the fastapi backend # application. machine_monitoring_app/ database/ # This python package consist of modules related # to database. __init__.py # The Initialization file for the python package. crud_operations.py # This python module consist of functions to help # in database CRUD operations. db_utils.py # This python module consist of utility functions # to help in timescaledb operations. mongo_db_utils.py # This python module consist of utility functions # to help in mongodb operations. mongodb_client.py # This python module consist of functions to help # connect with mongodb. pony_models.py # This python module consist of classes for the # ORMs with timescaledb. exception_handling/ # This python package consist of modules related # to exception handling. __init__.py # The Initialization file for the python package. custom_exception.py # This python module consist of classes for custom # exception handling. models/ # This python package consist of modules for the # pydantic classes. __init__.py # The Initialization file for the python package. base_data_models.py # The file consist of base pydantic models. request_models.py # The file consist of pydantic models that are used # for request body. response_models.py # The file consist of pydantic models that are used # for response body. router/ # The package consist of all endpoint of this backend. __init__.py # The Initialization file for the python package. core_data_route.py # The consist of core end points for this back end. router_dependencies.py # The file consist of functions to help other end points # Such as user authentication using jwt tokens. security_routes.py # The file consist of endpoint for user creation # and login methods. utils/ # The package consist of utility modules __init__.py # The Initialization file for the python package. configuration_helper.py # The consist of functions to help in configuration # Such as logger configuration, database configuration, and # Initial server configuration. global_variables.py # The file consist of function to return some common # Global variables. __init__.py # The Initialization file for the python package. API Endpoints The back end exposes api's to carry out different functionalites of the web application. The end points are classified into two type, core data routes and security routes. They are explained below. Core Data Route These set of end points consist of all the core routes requrired for data access and manipulation. Get End Points These are end points used to access data. /api/v1/machine-state/{parameterGroupId} - This end point is used to get the status of machines in the given parameter group (such as encoder temperature). Input Parameter parameterGroupId - This is the id column from the table ParameterGroup to identify the parameter group this parameter belongs to (For example id 4 for group encoder temperature). Response Body - The response body will consist of dictionary of two important key values, the first one denotes the status of machines (that are in abnormal condition) and second one is the summary of status of all other parameter groups (17 groups) { \"param\" : 4 , \"param_actual_name\" : \"ENCODER_TEMPERATURE\" , \"machines\" : [ { \"name\" : \"T_B_OP160\" , \"status\" : 2 , \"axes\" : [ { \"name\" : 1 , \"actual_name\" : \"PulseCoderTemp_1_path1_T_B_OP160\" , \"last_update_time\" : 1662514103 , \"value\" : 55 , \"status\" : 2 } ] }, { \"name\" : \"T_B_OP195A\" , \"status\" : 2 , \"axes\" : [ { \"name\" : 1 , \"actual_name\" : \"PulseCoderTemp_1_path1_T_B_OP195A\" , \"last_update_time\" : 1662514230 , \"value\" : 53 , \"status\" : 2 } ] } ], \"params_group_status\" : [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] } Explanation for the response body is given below { \"param\" : \"This is the id of the parameter group in the parameter group table\" , \"param_actual_name\" : \"Actual name of the parameter group\" , \"machines\" : [ { \"name\" : \"Name of the machine\" , \"status\" : \"Status of the machines, 1 - ok, 2-warning, 3-critical\" , \"axes\" : [ { \"name\" : \"Axis Id\" , \"actual_name\" : \"Actual name of the parameter as mentioned in the mongodb\" , \"last_update_time\" : \"The recent most time when the parameter was updates\" , \"value\" : \"Value of the parameter\" , \"status\" : \"status of the axis/parameter\" } ] }], \"params_group_status\" : \"List of length 17 with values either 1, 2 or 3 denoting the summary of status of all machines in that paramter group\" } /api/v1/{machineName}/{parameterGroupId}/{axisId} - This end point is used to get the real time data for a given machine, parameter group and axis.the given parameter group (such as encoder temperature). Input Parameter machineName - This is the name of the machine as recorded in the machines table. parameterGroupId - This is the id column from the table ParameterGroup to identify the parameter group this parameter belongs to (For example id 4 for group encoder temperature). axisId - This is the id as given in the machines axis translation file. Response Body - The response body will consist of dictionary of two important key values, the first one denotes the real time data and second one denotes the timestamp of those data. { \"param\" : 4 , \"axis\" : 0 , \"machine\" : \"T_B_OP160\" , \"start_time\" : 1662512183000 , \"stop_time\" : 1662512303000 , \"data\" : [ 36 , 37 , 36 ], \"timestamps\" : [ 1662512183000 , 1662512243000 , 1662512303000 ], \"critical_limit\" : 60 , \"warning_limit\" : 50 } Explanation for the response body is given below { \"param\" : \"This is the id of the parameter group in the parameter group table\" , \"axis\" : \"Axis Id\" , \"machine\" : \"Machine name\" , \"start_time\" : \"The start time of the returned data in epoch format\" , \"stop_time\" : \"The end time of the returned data in epoch format\" , \"data\" : \"List of real time data values\" , \"timestamps\" : \"List of timestamps in epoch format for the above data points\" , \"critical_limit\" : \"The critical limit value for this parameter\" , \"warning_limit\" : \"This is the warning limit value for this parameter\" } /api/v1/{machineName}/alarms - This end point is used to get the summary of alarms for a given machine between given start and end time. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which alarm summary is requried. startTime - This is the start time in epoch format for which a summary of the alarms is requried. endTime - This is the end time in epoch format for which a summary of the alarms is requried. Response Body - The response body will consist of dictionary of three important key values, the first one denotes alarm count data and second one denotes the total timespan of alarms, third one denotes the timeline data for the alarms between the given start and end time. { \"data\" : { \"count_data\" : [ { \"message\" : \"EMBEDDED ETHERNET ERROR DETECTION\" , \"total_count\" : 122 }, { \"message\" : \"PMC ALARM\" , \"total_count\" : 1 } ], \"timespan_data\" : [ { \"message\" : \"EMBEDDED ETHERNET ERROR DETECTION\" , \"total_time\" : 353688.5 }, { \"message\" : \"PMC ALARM\" , \"total_time\" : 5 } ], \"timeline_data\" : [ { \"enddate_epoch_time\" : 1655101839 , \"update_epoch_time\" : 1655093313.5 , \"message\" : \"EMBEDDED ETHERNET ERROR DETECTION\" }, { \"enddate_epoch_time\" : 1653279888.5 , \"update_epoch_time\" : 1653279883.5 , \"message\" : \"PMC ALARM\" } ] } } Explanation for the response body is given below { \"data\" : { \"count_data\" : [ { \"message\" : \"The alarm message\" , \"total_count\" : \"The total number of times this alarm occured during the given time\" } ], \"timespan_data\" : [ { \"message\" : \"The alarm message\" , \"total_time\" : \"The total number of seconds this alarm occured during the given time\" } ], \"timeline_data\" : [ { \"enddate_epoch_time\" : \"The enddate time of this alarm as mentioned in the mtlinki mongodb\" , \"update_epoch_time\" : \"The updatedate time of this alarm as mentioned in the mtlinki mongodb\" , \"message\" : \"The alarm message\" } ] } } Post End Points These are end points used to create new data. /api/v1/{machineName}/{sparePart} - This end point is used to create new spare part for a machine. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which new spare part needs to be created. sparePart - This is the name of the spare part that needs to be created for this machine. referencePartNumber - This is the reference part number (which is equivalent to the part number for the machine when the new part is created or the part count when reset button is pressed). This is used to get the relative part count for the specific spare part. For example if new spare part called \"spare part 1\" is created when the total part count of the machine is 1000, the reference part number would be 1000, if the total part count for the machine is increased to 1001, then the part count for this spare part would be 1 (calculatd by subtracting the reference part count for the spare part from the total part count of the machine, 10001 - 1000 = 1 in this case) warningLimit - This is the warning limit for this spare part. criticalLimit - This is the critical limit for this spare part. Response Body - If the creation of new spare part was succesful it returns the (same) input parameters that were given by the client. { \"id\" : 1 , \"part_name\" : \"Spart Part 1\" , \"reference_part_number\" : 100 , \"warning_limit\" : 1000 , \"critical_limit\" : 1500 , \"machine_id\" : 2 , \"count\" : 0 } Explanation for the response body is given below { \"id\" : \"This is the row id in the spare parts table in the postgresql\" , \"part_name\" : \"The spare part name\" , \"reference_part_number\" : \"This is the referecen part number\" , \"warning_limit\" : \"Warning limit for this spare part\" , \"critical_limit\" : \"Critical limit for this spare part\" , \"machine_id\" : \"This is the row id corresponding to the machine in the machines table in postgresql\" , \"count\" : \"This is the current part count for the spare part, initially it would be zero\" } Put End Points These are end points used to update existing data. /api/v1/{machineName}/{sparePart} - This end point is used to update an existing spare part for a machine. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which new spare part needs to be created. sparePart - This is the name of the spare part that needs to be created for this machine. parameterName - This is shows which parameter we want to update for the spare part, it could either be reference part number, warning limit or critical limit. parameterValue - This is the parameter value. Response Body - If the spare part was succesful updated it returns the parameters that were given by the client during the creation of the spare part. { \"id\" : 1 , \"part_name\" : \"Spart Part 1\" , \"reference_part_number\" : 100 , \"warning_limit\" : 1000 , \"critical_limit\" : 1500 , \"machine_id\" : 2 , \"count\" : 10 } Explanation for the response body is given below { \"id\" : \"This is the row id in the spare parts table in the postgresql\" , \"part_name\" : \"The spare part name\" , \"reference_part_number\" : \"This is the referecen part number\" , \"warning_limit\" : \"Warning limit for this spare part\" , \"critical_limit\" : \"Critical limit for this spare part\" , \"machine_id\" : \"This is the row id corresponding to the machine in the machines table in postgresql\" , \"count\" : \"This is the current part count for the spare part, initially it would be zero\" } /api/v1/parameters_limit/{machineName}/{parameterGroupId}}/{axisId} - This end point is used to update the warning /critical limits for the static parameter or to set new or update(append) reference signal for dynamic parameter. Input Parameter machineName - This is the name of the machine as recorded in the machines table whose parameter limits is to be set/updated. parameterGroupId - This is the id column from the table ParameterGroup to identify the parameter group this parameter belongs to (For example id 4 for group encoder temperature). axisId - This is the id as given in the machines axis translation file. setType - This is shows what parameter that the client is trying to set, it could be warning_limit, critical_limit, reference_signal. limit - This is the limit value. append - This tells if the client is trying to append new reference signal to existing reference signal (value should be true), or replace the existing reference signal with new signal (in this case the append parameter should be false). This is applicable only if the setType is reference_signal. Request Body - This is a list of reference signal values, for example : [1, 2, 5, 8] Response Body - If the limits are sucessfully updated, it return the set type and value. { \"set_type\" : \"warning_limit\" , \"value\" : 55 } Explanation for the response body is given below { \"set_type\" : \"The parameter set type\" , \"value\" : \"The set value for the parameter\" } Delete End Points These are end points used to delete data. /api/v1/{machineName}/{sparePart} - This end point is used to delete an existing spare part for a machine. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which a spare part needs to be deleted. sparePart - This is the name of the spare part that needs to be deleted for this machine. Response Body - If returns a message regarding the success or failure of the operation. { \"detail\" : \"Successfully Deleted\" , \"spare_part\" : \"Spart Part 1\" } Explanation for the response body is given below { \"detail\" : \"Information whether the deletion was successful or not\" , \"spare_part\" : \"Spart Part name\" } Security Route These set of end points consist of all the routes requrired for security related operations. Post End Points These are end points used to post data. /api/v1/auth - This end point is used to login a user and give JWT token for the session. Request Body { \"username\" : \"The user name\" , \"password\" : \"The user's password\" } Response Body { \"access_token\" : \"eyJhbGiIsInR5cCI6IkpXVCJ9.ey6gH9RWI5D5PFjI\" , \"token_type\" : \"bearer\" } Explanation for the response body is given below { \"access_token\" : \"The JWT token\" , \"token_type\" : \"token type\" } /api/v1/register - This end point is used to register a new user, this can be done only be admin users. Request Body { \"username\" : \"new_user\" , \"email\" : \"new_user@mail.com\" , \"full_name\" : \"User Name\" , \"password\" : \"password\" } Response Body { \"username\" : \"user name\" , \"email\" : \"email id of user\" , \"full_name\" : \"Full name of user\" }","title":"Back End Services"},{"location":"Code%20Explanation/Back%20End/#back-end","text":"","title":"Back End"},{"location":"Code%20Explanation/Back%20End/#introduction","text":"The requirements for the back end are: anyio==3.5.0 asgiref==3.5.1 bcrypt==3.2.2 cffi==1.15.1 click==8.1.3 colorama==0.4.4 cryptography==37.0.4 databases==0.5.5 ecdsa==0.18.0 et-xmlfile==1.1.0 fastapi==0.75.2 greenlet==1.1.2 h11==0.13.0 idna==3.3 motor==3.0.0 numpy==1.22.4 openpyxl==3.0.10 pandas==1.4.2 passlib==1.7.4 pony==0.7.16 psycopg2==2.9.3 pyasn1==0.4.8 pycparser==2.21 pydantic==1.9.0 pymongo==4.1.1 python-dateutil==2.8.2 python-dotenv==0.20.0 python-jose==3.3.0 python-multipart==0.0.5 pytz==2022.1 rsa==4.9 six==1.16.0 sniffio==1.2.0 SQLAlchemy==1.4.35 sqlalchemy2-stubs==0.0.2a22 sqlmodel==0.0.6 starlette==0.17.1 typing_extensions==4.2.0 uvicorn==0.17.6 XlsxWriter~=3.0.3 schedule~=1.1.0","title":"Introduction"},{"location":"Code%20Explanation/Back%20End/#project-layout","text":"main.py # The main entry point for the fastapi backend # application. machine_monitoring_app/ database/ # This python package consist of modules related # to database. __init__.py # The Initialization file for the python package. crud_operations.py # This python module consist of functions to help # in database CRUD operations. db_utils.py # This python module consist of utility functions # to help in timescaledb operations. mongo_db_utils.py # This python module consist of utility functions # to help in mongodb operations. mongodb_client.py # This python module consist of functions to help # connect with mongodb. pony_models.py # This python module consist of classes for the # ORMs with timescaledb. exception_handling/ # This python package consist of modules related # to exception handling. __init__.py # The Initialization file for the python package. custom_exception.py # This python module consist of classes for custom # exception handling. models/ # This python package consist of modules for the # pydantic classes. __init__.py # The Initialization file for the python package. base_data_models.py # The file consist of base pydantic models. request_models.py # The file consist of pydantic models that are used # for request body. response_models.py # The file consist of pydantic models that are used # for response body. router/ # The package consist of all endpoint of this backend. __init__.py # The Initialization file for the python package. core_data_route.py # The consist of core end points for this back end. router_dependencies.py # The file consist of functions to help other end points # Such as user authentication using jwt tokens. security_routes.py # The file consist of endpoint for user creation # and login methods. utils/ # The package consist of utility modules __init__.py # The Initialization file for the python package. configuration_helper.py # The consist of functions to help in configuration # Such as logger configuration, database configuration, and # Initial server configuration. global_variables.py # The file consist of function to return some common # Global variables. __init__.py # The Initialization file for the python package.","title":"Project layout"},{"location":"Code%20Explanation/Back%20End/#api-endpoints","text":"The back end exposes api's to carry out different functionalites of the web application. The end points are classified into two type, core data routes and security routes. They are explained below.","title":"API Endpoints"},{"location":"Code%20Explanation/Back%20End/#core-data-route","text":"These set of end points consist of all the core routes requrired for data access and manipulation.","title":"Core Data Route"},{"location":"Code%20Explanation/Back%20End/#get-end-points","text":"These are end points used to access data. /api/v1/machine-state/{parameterGroupId} - This end point is used to get the status of machines in the given parameter group (such as encoder temperature). Input Parameter parameterGroupId - This is the id column from the table ParameterGroup to identify the parameter group this parameter belongs to (For example id 4 for group encoder temperature). Response Body - The response body will consist of dictionary of two important key values, the first one denotes the status of machines (that are in abnormal condition) and second one is the summary of status of all other parameter groups (17 groups) { \"param\" : 4 , \"param_actual_name\" : \"ENCODER_TEMPERATURE\" , \"machines\" : [ { \"name\" : \"T_B_OP160\" , \"status\" : 2 , \"axes\" : [ { \"name\" : 1 , \"actual_name\" : \"PulseCoderTemp_1_path1_T_B_OP160\" , \"last_update_time\" : 1662514103 , \"value\" : 55 , \"status\" : 2 } ] }, { \"name\" : \"T_B_OP195A\" , \"status\" : 2 , \"axes\" : [ { \"name\" : 1 , \"actual_name\" : \"PulseCoderTemp_1_path1_T_B_OP195A\" , \"last_update_time\" : 1662514230 , \"value\" : 53 , \"status\" : 2 } ] } ], \"params_group_status\" : [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] } Explanation for the response body is given below { \"param\" : \"This is the id of the parameter group in the parameter group table\" , \"param_actual_name\" : \"Actual name of the parameter group\" , \"machines\" : [ { \"name\" : \"Name of the machine\" , \"status\" : \"Status of the machines, 1 - ok, 2-warning, 3-critical\" , \"axes\" : [ { \"name\" : \"Axis Id\" , \"actual_name\" : \"Actual name of the parameter as mentioned in the mongodb\" , \"last_update_time\" : \"The recent most time when the parameter was updates\" , \"value\" : \"Value of the parameter\" , \"status\" : \"status of the axis/parameter\" } ] }], \"params_group_status\" : \"List of length 17 with values either 1, 2 or 3 denoting the summary of status of all machines in that paramter group\" } /api/v1/{machineName}/{parameterGroupId}/{axisId} - This end point is used to get the real time data for a given machine, parameter group and axis.the given parameter group (such as encoder temperature). Input Parameter machineName - This is the name of the machine as recorded in the machines table. parameterGroupId - This is the id column from the table ParameterGroup to identify the parameter group this parameter belongs to (For example id 4 for group encoder temperature). axisId - This is the id as given in the machines axis translation file. Response Body - The response body will consist of dictionary of two important key values, the first one denotes the real time data and second one denotes the timestamp of those data. { \"param\" : 4 , \"axis\" : 0 , \"machine\" : \"T_B_OP160\" , \"start_time\" : 1662512183000 , \"stop_time\" : 1662512303000 , \"data\" : [ 36 , 37 , 36 ], \"timestamps\" : [ 1662512183000 , 1662512243000 , 1662512303000 ], \"critical_limit\" : 60 , \"warning_limit\" : 50 } Explanation for the response body is given below { \"param\" : \"This is the id of the parameter group in the parameter group table\" , \"axis\" : \"Axis Id\" , \"machine\" : \"Machine name\" , \"start_time\" : \"The start time of the returned data in epoch format\" , \"stop_time\" : \"The end time of the returned data in epoch format\" , \"data\" : \"List of real time data values\" , \"timestamps\" : \"List of timestamps in epoch format for the above data points\" , \"critical_limit\" : \"The critical limit value for this parameter\" , \"warning_limit\" : \"This is the warning limit value for this parameter\" } /api/v1/{machineName}/alarms - This end point is used to get the summary of alarms for a given machine between given start and end time. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which alarm summary is requried. startTime - This is the start time in epoch format for which a summary of the alarms is requried. endTime - This is the end time in epoch format for which a summary of the alarms is requried. Response Body - The response body will consist of dictionary of three important key values, the first one denotes alarm count data and second one denotes the total timespan of alarms, third one denotes the timeline data for the alarms between the given start and end time. { \"data\" : { \"count_data\" : [ { \"message\" : \"EMBEDDED ETHERNET ERROR DETECTION\" , \"total_count\" : 122 }, { \"message\" : \"PMC ALARM\" , \"total_count\" : 1 } ], \"timespan_data\" : [ { \"message\" : \"EMBEDDED ETHERNET ERROR DETECTION\" , \"total_time\" : 353688.5 }, { \"message\" : \"PMC ALARM\" , \"total_time\" : 5 } ], \"timeline_data\" : [ { \"enddate_epoch_time\" : 1655101839 , \"update_epoch_time\" : 1655093313.5 , \"message\" : \"EMBEDDED ETHERNET ERROR DETECTION\" }, { \"enddate_epoch_time\" : 1653279888.5 , \"update_epoch_time\" : 1653279883.5 , \"message\" : \"PMC ALARM\" } ] } } Explanation for the response body is given below { \"data\" : { \"count_data\" : [ { \"message\" : \"The alarm message\" , \"total_count\" : \"The total number of times this alarm occured during the given time\" } ], \"timespan_data\" : [ { \"message\" : \"The alarm message\" , \"total_time\" : \"The total number of seconds this alarm occured during the given time\" } ], \"timeline_data\" : [ { \"enddate_epoch_time\" : \"The enddate time of this alarm as mentioned in the mtlinki mongodb\" , \"update_epoch_time\" : \"The updatedate time of this alarm as mentioned in the mtlinki mongodb\" , \"message\" : \"The alarm message\" } ] } }","title":"Get End Points"},{"location":"Code%20Explanation/Back%20End/#post-end-points","text":"These are end points used to create new data. /api/v1/{machineName}/{sparePart} - This end point is used to create new spare part for a machine. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which new spare part needs to be created. sparePart - This is the name of the spare part that needs to be created for this machine. referencePartNumber - This is the reference part number (which is equivalent to the part number for the machine when the new part is created or the part count when reset button is pressed). This is used to get the relative part count for the specific spare part. For example if new spare part called \"spare part 1\" is created when the total part count of the machine is 1000, the reference part number would be 1000, if the total part count for the machine is increased to 1001, then the part count for this spare part would be 1 (calculatd by subtracting the reference part count for the spare part from the total part count of the machine, 10001 - 1000 = 1 in this case) warningLimit - This is the warning limit for this spare part. criticalLimit - This is the critical limit for this spare part. Response Body - If the creation of new spare part was succesful it returns the (same) input parameters that were given by the client. { \"id\" : 1 , \"part_name\" : \"Spart Part 1\" , \"reference_part_number\" : 100 , \"warning_limit\" : 1000 , \"critical_limit\" : 1500 , \"machine_id\" : 2 , \"count\" : 0 } Explanation for the response body is given below { \"id\" : \"This is the row id in the spare parts table in the postgresql\" , \"part_name\" : \"The spare part name\" , \"reference_part_number\" : \"This is the referecen part number\" , \"warning_limit\" : \"Warning limit for this spare part\" , \"critical_limit\" : \"Critical limit for this spare part\" , \"machine_id\" : \"This is the row id corresponding to the machine in the machines table in postgresql\" , \"count\" : \"This is the current part count for the spare part, initially it would be zero\" }","title":"Post End Points"},{"location":"Code%20Explanation/Back%20End/#put-end-points","text":"These are end points used to update existing data. /api/v1/{machineName}/{sparePart} - This end point is used to update an existing spare part for a machine. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which new spare part needs to be created. sparePart - This is the name of the spare part that needs to be created for this machine. parameterName - This is shows which parameter we want to update for the spare part, it could either be reference part number, warning limit or critical limit. parameterValue - This is the parameter value. Response Body - If the spare part was succesful updated it returns the parameters that were given by the client during the creation of the spare part. { \"id\" : 1 , \"part_name\" : \"Spart Part 1\" , \"reference_part_number\" : 100 , \"warning_limit\" : 1000 , \"critical_limit\" : 1500 , \"machine_id\" : 2 , \"count\" : 10 } Explanation for the response body is given below { \"id\" : \"This is the row id in the spare parts table in the postgresql\" , \"part_name\" : \"The spare part name\" , \"reference_part_number\" : \"This is the referecen part number\" , \"warning_limit\" : \"Warning limit for this spare part\" , \"critical_limit\" : \"Critical limit for this spare part\" , \"machine_id\" : \"This is the row id corresponding to the machine in the machines table in postgresql\" , \"count\" : \"This is the current part count for the spare part, initially it would be zero\" } /api/v1/parameters_limit/{machineName}/{parameterGroupId}}/{axisId} - This end point is used to update the warning /critical limits for the static parameter or to set new or update(append) reference signal for dynamic parameter. Input Parameter machineName - This is the name of the machine as recorded in the machines table whose parameter limits is to be set/updated. parameterGroupId - This is the id column from the table ParameterGroup to identify the parameter group this parameter belongs to (For example id 4 for group encoder temperature). axisId - This is the id as given in the machines axis translation file. setType - This is shows what parameter that the client is trying to set, it could be warning_limit, critical_limit, reference_signal. limit - This is the limit value. append - This tells if the client is trying to append new reference signal to existing reference signal (value should be true), or replace the existing reference signal with new signal (in this case the append parameter should be false). This is applicable only if the setType is reference_signal. Request Body - This is a list of reference signal values, for example : [1, 2, 5, 8] Response Body - If the limits are sucessfully updated, it return the set type and value. { \"set_type\" : \"warning_limit\" , \"value\" : 55 } Explanation for the response body is given below { \"set_type\" : \"The parameter set type\" , \"value\" : \"The set value for the parameter\" }","title":"Put End Points"},{"location":"Code%20Explanation/Back%20End/#delete-end-points","text":"These are end points used to delete data. /api/v1/{machineName}/{sparePart} - This end point is used to delete an existing spare part for a machine. Input Parameter machineName - This is the name of the machine as recorded in the machines table for which a spare part needs to be deleted. sparePart - This is the name of the spare part that needs to be deleted for this machine. Response Body - If returns a message regarding the success or failure of the operation. { \"detail\" : \"Successfully Deleted\" , \"spare_part\" : \"Spart Part 1\" } Explanation for the response body is given below { \"detail\" : \"Information whether the deletion was successful or not\" , \"spare_part\" : \"Spart Part name\" }","title":"Delete End Points"},{"location":"Code%20Explanation/Back%20End/#security-route","text":"These set of end points consist of all the routes requrired for security related operations.","title":"Security Route"},{"location":"Code%20Explanation/Back%20End/#post-end-points_1","text":"These are end points used to post data. /api/v1/auth - This end point is used to login a user and give JWT token for the session. Request Body { \"username\" : \"The user name\" , \"password\" : \"The user's password\" } Response Body { \"access_token\" : \"eyJhbGiIsInR5cCI6IkpXVCJ9.ey6gH9RWI5D5PFjI\" , \"token_type\" : \"bearer\" } Explanation for the response body is given below { \"access_token\" : \"The JWT token\" , \"token_type\" : \"token type\" } /api/v1/register - This end point is used to register a new user, this can be done only be admin users. Request Body { \"username\" : \"new_user\" , \"email\" : \"new_user@mail.com\" , \"full_name\" : \"User Name\" , \"password\" : \"password\" } Response Body { \"username\" : \"user name\" , \"email\" : \"email id of user\" , \"full_name\" : \"Full name of user\" }","title":"Post End Points"},{"location":"Code%20Explanation/Collector/","text":"Collector Introduction The collector consist of scripts to collect data from all different data sources at TIEI, such as general purpose cnc machines, spm machines such as laser cladding, journal grinding. It consist of 4 separate collector services: Static Parameter Collector - This is used to collect data for static parameters Dynamic Parameter Collector - This is used to collect data for dynamic parameters SPM Parameter Collector - This is used to collect data for SPM machines Laser Cladding - This is used to collect data from laser cladding machines Journal Grinding - This is used to collect data from Journal Grinding machines Part Count Monitor/Collector - This is used to collect part count from all machines. Static and Dynamic Collector Project Requirement The requirements for the collector services are: pandas~=1.4.2 pymongo~=4.1.1 psycopg2~=2.9.3 pgcopy~=1.5.0 yagmail~=0.15.277 scipy~=1.8.1 XlsxWriter~=3.0.3 numpy~=1.23.0 Project layout The following layout shows the general project structure for the Static and dynamic parameters (59 cnc machines) collectors. main_static_collector.py # The main entry point for the static collector service. main_dynamic_collector.py # The main entry point for the dynamic collector service. main_report_sender.py # The main entry point for the report generation service. collector_app/ database/ # This python package consist of modules related # to database. __init__.py # The Initialization file for the python package. crud_operations.py # This python module consist of functions to help # in database CRUD operations. db_utils.py # This python module consist of utility functions # to help in timescaledb operations. common_query_templates.py # This python module consist of template for common queries. exception_handling/ # This python package consist of modules related # to exception handling. __init__.py # The Initialization file for the python package. custom_exception_classes.py # This python module consist of classes for custom # exception handling classes. anomaly_detection/ # This python package consist of modules for the # anomaly detection. __init__.py # The Initialization file for the python package. detection_algorithm.py # The file consist of function to do Kruskal\u2013Wallis test. collector_classes/ # The package consist of modules that has collector classes. __init__.py # The Initialization file for the python package. collector_classes_module.py # The consist of core python classes that collect data. report_manager/ # The package consist of modules that for report generation. __init__.py # The Initialization file for the python package. email_Sender.py # The consist of functions to generate reports for abnormality. utils/ # The package consist of utility modules __init__.py # The Initialization file for the python package. config_helper.py # The consist of functions to help in configuration # Such as logger configuration, database configuration exception_handling.py # The file consist of function for exception handling global_variables.py # The file consist of function to return some common # Global variables. __init__.py # The Initialization file for the python package. The core functionalities for the collector services are implemeted in the collector classes, namely: ParametersGroupBase - This is the class to represent the static parameter group such as encoder temperature. These have specific variables and methods to collect data from the MtLinki.L1SignalPoolActive for all the static parameters. These classes inherit from the ParametersGroupAbstract abstract class. DynamicParameters - This is the class to represent the dynamic parameter group such as spindleload. These have specific variables and methods to collect data from the MtLinki.L1SignalPool for all the dynamic parameters. These classes inherit from the ParametersGroupBase class, but have specific methods for the requriements of dynamic parameter. CollectorClass - This is the class that has variable and methods to use the ParametersGroupBase to represent the static parameters and orchestrate the collection of all static parameter group data. DynamicCollectorClass - This is the class that has variable and methods to use the DynamicParameters to represent the dynamic parameters and orchestrate the collection of all dynamic parameter group data. The UML class diagram for the above classes are given the diagram below: classDiagram ParametersGroupAbstract <|-- ParametersGroupBase ParametersGroupBase <|-- DynamicParameters CollectorClass <|-- DynamicCollectorClass ParametersGroupAbstract : +String group_name ParametersGroupAbstract : +String mongodb_query ParametersGroupAbstract : +Int warning_limit ParametersGroupAbstract : +Int critical_limit ParametersGroupAbstract : +Float latest_update_time ParametersGroupAbstract : +Float _temp_latest_update_time ParametersGroupAbstract : +String parameter_type ParametersGroupAbstract : +Pandas DataFrame recent_data ParametersGroupAbstract : +Pandas DataFrame next_alert_time_for_all_signals ParametersGroupAbstract : +Pandas DataFrame new_alerts ParametersGroupAbstract : +check_for_new_data() ParametersGroupAbstract : +get_new_data() ParametersGroupAbstract : +add_condition_columns() ParametersGroupAbstract : +insert_to_timescaledb() ParametersGroupAbstract : +check_for_new_anomaly() ParametersGroupAbstract : +send_alerts() class DynamicParameters{ +check_dynamic_condition() } ParametersGroupBase <-- CollectorClass:has static parameter DynamicParameters <-- DynamicCollectorClass:has dynamic parameter class CollectorClass{ +String read_cycle_time +String static_parameters +String dynamic_parameters +int combined_alerts +load_parameters() +do_workflow() +merge_alerts() +send_combined_alerts() +start_collector() } Special Purpose Machines For all the spm machines, the pc which has the log files, is connected to the linux server through network, and the directory is continously monitored for new log files. As soon as a new file is generated, the services will read them and transforms the data to the timescaledb format and inserts them. Project Requirement The requirements for the laser cladding collector services are: numpy==1.22.3 pandas==1.4.2 pgcopy==1.5.0 psycopg2==2.9.3 python-dateutil==2.8.2 pytz==2022.1 six==1.16.0 Project layout The following layout shows the general project structure for all the SPM collectors. main.py # The main entry point for the laser cladding collector. app/ database/ # This python package consist of modules related # to database. __init__.py # The Initialization file for the python package. crud_operations.py # This python module consist of functions to help # in database CRUD operations. db_utils.py # This python module consist of utility functions # to help in timescaledb operations. data_transformation_Service/ # This python package consist of modules related # to functions that does transformation of log files to # Database format. __init__.py # The Initialization file for the python package. transformation_functions.py # This python module consist of function to do log file # File transformation. file_system_operation/ # This python package consist of modules for the # directory monitoring. __init__.py # The Initialization file for the python package. directory_monitoring.py # The file consist of function to monitor the machine for # New log files. initialization_services/ # The package consist of modules that has collector classes. __init__.py # The Initialization file for the python package. initial_setup.py # The consist of functions to do initial set up of this service. utils/ # The package consist of utility modules __init__.py # The Initialization file for the python package. check_mount.py # The consist of functions to check if the machine is # Mounted as a connected device to the linux server config_helper.py # The file consist of function for configuration such as log, database input_getter.py # The file consist of function to get input from the command line __init__.py # The Initialization file for the python package.","title":"Collector Services"},{"location":"Code%20Explanation/Collector/#collector","text":"","title":"Collector"},{"location":"Code%20Explanation/Collector/#introduction","text":"The collector consist of scripts to collect data from all different data sources at TIEI, such as general purpose cnc machines, spm machines such as laser cladding, journal grinding. It consist of 4 separate collector services: Static Parameter Collector - This is used to collect data for static parameters Dynamic Parameter Collector - This is used to collect data for dynamic parameters SPM Parameter Collector - This is used to collect data for SPM machines Laser Cladding - This is used to collect data from laser cladding machines Journal Grinding - This is used to collect data from Journal Grinding machines Part Count Monitor/Collector - This is used to collect part count from all machines.","title":"Introduction"},{"location":"Code%20Explanation/Collector/#static-and-dynamic-collector","text":"","title":"Static and Dynamic Collector"},{"location":"Code%20Explanation/Collector/#project-requirement","text":"The requirements for the collector services are: pandas~=1.4.2 pymongo~=4.1.1 psycopg2~=2.9.3 pgcopy~=1.5.0 yagmail~=0.15.277 scipy~=1.8.1 XlsxWriter~=3.0.3 numpy~=1.23.0","title":"Project Requirement"},{"location":"Code%20Explanation/Collector/#project-layout","text":"The following layout shows the general project structure for the Static and dynamic parameters (59 cnc machines) collectors. main_static_collector.py # The main entry point for the static collector service. main_dynamic_collector.py # The main entry point for the dynamic collector service. main_report_sender.py # The main entry point for the report generation service. collector_app/ database/ # This python package consist of modules related # to database. __init__.py # The Initialization file for the python package. crud_operations.py # This python module consist of functions to help # in database CRUD operations. db_utils.py # This python module consist of utility functions # to help in timescaledb operations. common_query_templates.py # This python module consist of template for common queries. exception_handling/ # This python package consist of modules related # to exception handling. __init__.py # The Initialization file for the python package. custom_exception_classes.py # This python module consist of classes for custom # exception handling classes. anomaly_detection/ # This python package consist of modules for the # anomaly detection. __init__.py # The Initialization file for the python package. detection_algorithm.py # The file consist of function to do Kruskal\u2013Wallis test. collector_classes/ # The package consist of modules that has collector classes. __init__.py # The Initialization file for the python package. collector_classes_module.py # The consist of core python classes that collect data. report_manager/ # The package consist of modules that for report generation. __init__.py # The Initialization file for the python package. email_Sender.py # The consist of functions to generate reports for abnormality. utils/ # The package consist of utility modules __init__.py # The Initialization file for the python package. config_helper.py # The consist of functions to help in configuration # Such as logger configuration, database configuration exception_handling.py # The file consist of function for exception handling global_variables.py # The file consist of function to return some common # Global variables. __init__.py # The Initialization file for the python package. The core functionalities for the collector services are implemeted in the collector classes, namely: ParametersGroupBase - This is the class to represent the static parameter group such as encoder temperature. These have specific variables and methods to collect data from the MtLinki.L1SignalPoolActive for all the static parameters. These classes inherit from the ParametersGroupAbstract abstract class. DynamicParameters - This is the class to represent the dynamic parameter group such as spindleload. These have specific variables and methods to collect data from the MtLinki.L1SignalPool for all the dynamic parameters. These classes inherit from the ParametersGroupBase class, but have specific methods for the requriements of dynamic parameter. CollectorClass - This is the class that has variable and methods to use the ParametersGroupBase to represent the static parameters and orchestrate the collection of all static parameter group data. DynamicCollectorClass - This is the class that has variable and methods to use the DynamicParameters to represent the dynamic parameters and orchestrate the collection of all dynamic parameter group data. The UML class diagram for the above classes are given the diagram below: classDiagram ParametersGroupAbstract <|-- ParametersGroupBase ParametersGroupBase <|-- DynamicParameters CollectorClass <|-- DynamicCollectorClass ParametersGroupAbstract : +String group_name ParametersGroupAbstract : +String mongodb_query ParametersGroupAbstract : +Int warning_limit ParametersGroupAbstract : +Int critical_limit ParametersGroupAbstract : +Float latest_update_time ParametersGroupAbstract : +Float _temp_latest_update_time ParametersGroupAbstract : +String parameter_type ParametersGroupAbstract : +Pandas DataFrame recent_data ParametersGroupAbstract : +Pandas DataFrame next_alert_time_for_all_signals ParametersGroupAbstract : +Pandas DataFrame new_alerts ParametersGroupAbstract : +check_for_new_data() ParametersGroupAbstract : +get_new_data() ParametersGroupAbstract : +add_condition_columns() ParametersGroupAbstract : +insert_to_timescaledb() ParametersGroupAbstract : +check_for_new_anomaly() ParametersGroupAbstract : +send_alerts() class DynamicParameters{ +check_dynamic_condition() } ParametersGroupBase <-- CollectorClass:has static parameter DynamicParameters <-- DynamicCollectorClass:has dynamic parameter class CollectorClass{ +String read_cycle_time +String static_parameters +String dynamic_parameters +int combined_alerts +load_parameters() +do_workflow() +merge_alerts() +send_combined_alerts() +start_collector() }","title":"Project layout"},{"location":"Code%20Explanation/Collector/#special-purpose-machines","text":"For all the spm machines, the pc which has the log files, is connected to the linux server through network, and the directory is continously monitored for new log files. As soon as a new file is generated, the services will read them and transforms the data to the timescaledb format and inserts them.","title":"Special Purpose Machines"},{"location":"Code%20Explanation/Collector/#project-requirement_1","text":"The requirements for the laser cladding collector services are: numpy==1.22.3 pandas==1.4.2 pgcopy==1.5.0 psycopg2==2.9.3 python-dateutil==2.8.2 pytz==2022.1 six==1.16.0","title":"Project Requirement"},{"location":"Code%20Explanation/Collector/#project-layout_1","text":"The following layout shows the general project structure for all the SPM collectors. main.py # The main entry point for the laser cladding collector. app/ database/ # This python package consist of modules related # to database. __init__.py # The Initialization file for the python package. crud_operations.py # This python module consist of functions to help # in database CRUD operations. db_utils.py # This python module consist of utility functions # to help in timescaledb operations. data_transformation_Service/ # This python package consist of modules related # to functions that does transformation of log files to # Database format. __init__.py # The Initialization file for the python package. transformation_functions.py # This python module consist of function to do log file # File transformation. file_system_operation/ # This python package consist of modules for the # directory monitoring. __init__.py # The Initialization file for the python package. directory_monitoring.py # The file consist of function to monitor the machine for # New log files. initialization_services/ # The package consist of modules that has collector classes. __init__.py # The Initialization file for the python package. initial_setup.py # The consist of functions to do initial set up of this service. utils/ # The package consist of utility modules __init__.py # The Initialization file for the python package. check_mount.py # The consist of functions to check if the machine is # Mounted as a connected device to the linux server config_helper.py # The file consist of function for configuration such as log, database input_getter.py # The file consist of function to get input from the command line __init__.py # The Initialization file for the python package.","title":"Project layout"},{"location":"General%20Knowledge/Focas/","text":"Focas Introduction Fanuc Focas API is a programming interface provided by Fanuc, a leading manufacturer of industrial robots and CNC (Computer Numerical Control) systems. The Focas API allows developers to interact with and control Fanuc CNC systems using various programming languages. It provides a set of functions and commands that enable applications to retrieve information from CNC controllers, monitor machine status, send commands, and perform data exchanges with the CNC system. The Focas API is widely used in industries such as manufacturing, automation, and robotics to develop custom software solutions for Fanuc CNC machines. Quick Overview of Csharp and Project setup in Visual Studio Introduction In C# and .NET, projects are organized using solutions, which consist of one or more projects. This documentation provides an overview of the project structure and key concepts related to C# and .NET development. Solutions Solutions serve as containers for organizing multiple projects in C# and .NET development. A solution represents a higher-level unit that groups related projects together. Solutions provide a convenient way to manage dependencies and build configurations for complex software systems. Projects Projects are the building blocks of a solution and contain the source code and other related files. A solution can have multiple projects, each representing a distinct component or module. Projects are typically used to organize and manage different aspects of the software solution. Assemblies and DLLs Once a project is compiled, it produces assemblies or DLLs (Dynamic Link Libraries). Assemblies are the output files of the compilation process and contain executable code and other resources. Assemblies can be thought of as a group of related namespaces and types. Namespaces Namespaces are used to organize and group related classes, interfaces, and other types within a project. Namespaces provide a way to avoid naming conflicts and provide logical separation between different components of the codebase. Namespaces make it easier to manage and navigate large codebases by providing a hierarchical structure. Default Namespace in Visual Studio By default, Visual Studio will create a namespace that matches the name of the project. The default namespace helps maintain a clear and consistent structure for the code within the project. Developers can modify the namespace to suit their needs, but it is generally recommended to keep it aligned with the project name. The following diagram shows the above hierarchy as an UML diagram flowchart TB subgraph SOLUTION direction TB Solution((Solution)) Solution --> Project1 Solution --> Project2 end subgraph PROJECT direction TB Project1((Project1)) Project1 --> Assembly1 Project1 --> Assembly2 end subgraph ASSEMBLY direction TB Assembly1((Assembly1)) Assembly2((Assembly2)) Assembly1 --> Namespace1 Assembly1 --> Namespace2 end subgraph NAMESPACE direction TB Namespace1((Namespace1)) Namespace2((Namespace2)) Namespace1 --> Class1 Namespace1 --> Class2 end subgraph CLASS direction TB Class1((Class1)) Class2((Class2)) Class1 --> Attribute1 Class1 --> Method1 end Sample Project Setup Project Directory Structure FanucFocas # The project root (i guess its a directory) properties/ # This directory may contain project-specific properties or settings files references/ # This directory may contain references to external libraries or dependencies, dll, etc App.config/ # This file is a configuration file for the application. It may contain settings such as connection strings, application-specific configurations, or environment variables. fwlib32.cs/ # This file represents the Focas library for CNC/PMC Data Window Library for FOCAS1/Ethernet. It contains the necessary classes and functions for interacting with # Focas enabled CNC machines. packages.config/ # This file is used in older versions of .NET Framework projects to manage NuGet package references. It specifies the packages and their versions used in the project. Program.cs # This file is the entry point of the application. It contains the main code that is executed when the application starts. Working with Namespaces and External Libraries in C Introduction In C#, namespaces are used to organize and group related classes, structures, and other types. They provide a way to avoid naming conflicts and improve code organization. When working with external libraries, such as the Focas library in your project, namespaces play a crucial role in referencing and accessing the library's classes and structures. Namespaces in C Namespaces are used to logically organize and group related code elements. They provide a hierarchical structure and help in avoiding naming conflicts. Namespaces improve code readability and maintainability. Using Statements and Namespaces To use classes and structures from a namespace, you need to include a using statement at the top of your file. The using statement allows you to access the classes and structures directly without specifying the fully qualified names. Syntax: using NamespaceName ; Example: using System ; using MyLibrary ; In the example above, System and MyLibrary are namespaces that contain the desired classes and structures. Including External Libraries and Using Statements When working with external libraries, you need to include the library's files in your project. The files containing the classes and structures for the library should be located in a specific directory within your project. To access the library's classes and structures, you need to specify the appropriate using statement with the library's namespace. Example: using FocasLibrary ; - In this example, FocasLibrary is the namespace where the classes and structures from the Focas library are defined. - The using statement allows you to access those classes and structures directly in your code. The fwlib32.cs File and Global Namespace In the provided fwlib32.cs file (as shown in the project directory), the namespace is not explicitly defined (you can open the file and check it out). However, when you include the fwlib32.cs file in your project and build it, the classes and structures in fwlib32.cs are treated as part of the global namespace. The global namespace includes all code elements that are not explicitly placed within a namespace. This means that you can directly reference the classes and structures from fwlib32.cs without the need for a using statement. Adding the fwlib.cs Library to a Visual Studio Project The following steps outline how to add the fwlib.cs library file to your current working project in Visual Studio. The fwlib.cs file contains the library code that you want to include in your project. Steps Open your project in Visual Studio. In the Solution Explorer, locate your project folder. Right-click on your project folder to open the context menu. From the context menu, select \"Add\" and then choose \"Existing Item.\" This action opens the file selection dialog. In the file selection dialog, navigate to the location where the fwlib.cs file is located on your computer. Select the fwlib.cs file. Click the \"Add\" button. This action adds the fwlib.cs file to your project. The following figure shows how to add the library file in visual studio Purpose Adding the fwlib.cs library file to your Visual Studio project is necessary to include the library's code in your project. By doing so, the compiler recognizes the library and its contents, enabling you to utilize its functionality in your code. Programs to Demonstrate Focas API CODE SAMPLE 1 CODE Here is a sample c# code to get the machine state using fanuc focas api using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); } else { Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); string mode = GetMode (); Console . WriteLine ( $\"\\n\\nMode is {mode}\" ); Console . Read (); } Focas1 . cnc_freelibhndl ( _handle ); } public static string GetMode () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST mode = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , mode ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain mode data\" ); return \"\" ; } return $\"Mode is {mode.aut}\" ; } } } Explanation: The given C# code demonstrates the usage of the Fanuc Focas API to connect to a Fanuc CNC system and retrieve the operating mode information. Let's go through the code step by step: The code begins with the necessary using statements to import the required namespaces for the program. The FanucFocas namespace is defined to encapsulate the code. Within the FanucFocas namespace, the Program class is defined. The program declares some static variables: _handle of type ushort (unsigned short) to store the handle for the Focas connection, and _ret of type short to store the return values of Focas API functions. The Main method is the entry point of the program. It starts by printing \"Starting\" to the console. The Focas API function Focas1.cnc_allclibhndl3 is called to establish a connection with the Fanuc CNC system. The method takes the IP address (in this case, \"172.18.30.147\"), port number (8193), Focas version (6), and an out parameter _handle to receive the handle for the connection. The return value _ret is checked to determine if the connection was successful. If the connection fails, the program prints \"Cannot Connect\" to the console and waits for user input before exiting. If the connection succeeds, the program prints the obtained _handle value to the console. The GetMode method is called to retrieve the operating mode information from the CNC system. Inside the GetMode method, it first checks if a valid handle _handle exists. If not, it prints \"Get a handle\" to the console and returns an empty string. It declares an instance of the ODBST struct (a structure provided by the Focas API) named mode. The Focas API function Focas1.cnc_statinfo is called to obtain the mode data using the handle _handle and the mode variable. The return value _ret is checked to ensure successful data retrieval. If the data retrieval is successful, it returns a string indicating the mode by accessing the aut property of the mode struct. Finally, the obtained mode information is printed to the console. The program waits for user input before exiting. After reading the user input, the program calls Focas1.cnc_freelibhndl to free the allocated Focas library handle. Overall, this code demonstrates the basic usage of the Fanuc Focas API in C# to establish a connection with a Fanuc CNC system and retrieve the operating mode information. CODE SAMPLE 2 Code using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); } else { Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); string mode = GetMode (); Console . WriteLine ( $\"\\n\\nMode is {mode}\" ); Console . Read (); } Focas1 . cnc_freelibhndl ( _handle ); } public static string GetMode () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST mode = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , mode ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain mode data\" ); return \"\" ; } switch ( mode . aut ) { case 0 : return \"MDI\" ; case 1 : return \"MEM\" ; case 3 : return \"EDIT\" ; case 4 : return \"MPG\" ; case 5 : return \"JOG\" ; case 6 : return \"Teach in JOG\" ; case 7 : return \"Teach in HND\" ; case 8 : return \"INC\" ; case 9 : return \"REF\" ; case 10 : return \"RMT\" ; default : return \"UNAVAILABLE\" ; } } } } Explanation The code begins with the necessary using statements to import the required namespaces for the program. The FanucFocas namespace is defined to encapsulate the code. Within the FanucFocas namespace, the Program class is defined. The program declares some static variables: _handle of type ushort (unsigned short) to store the handle for the Focas connection, and _ret of type short to store the return values of Focas API functions. The Main method is the entry point of the program. It starts by printing \"Starting\" to the console. The Focas API function Focas1.cnc_allclibhndl3 is called to establish a connection with the Fanuc CNC system. The method takes the IP address (in this case, \"172.18.30.147\"), port number (8193), Focas version (6), and an out parameter _handle to receive the handle for the connection. The return value _ret is checked to determine if the connection was successful. If the connection fails, the program prints \"Cannot Connect\" to the console and waits for user input before exiting. If the connection succeeds, the program prints the obtained _handle value to the console. The GetMode method is called to retrieve the operating mode information from the CNC system. Inside the GetMode method, it first checks if a valid handle _handle exists. If not, it prints \"Get a handle\" to the console and returns an empty string. It declares an instance of the ODBST struct (a structure provided by the Focas API) named mode . The Focas API function Focas1.cnc_statinfo is called to obtain the mode data using the handle _handle and the mode variable. The return value _ret is checked to ensure successful data retrieval. If the data retrieval is successful, a switch statement is used to map the mode.aut value to the corresponding operating mode string. The operating mode string is returned. Finally, the obtained mode information is printed to the console. The program waits for user input before exiting. After reading the user input, the program calls Focas1.cnc_freelibhndl to free the allocated Focas library handle. MODE The different modes and their corresponding full forms are as follows: MDI (Manual Data Input): In this mode, the operator has the ability to input instructions and programs directly into the CNC system manually. While it is not necessary for the operation to be limited to a single line, sometimes we require a simple operation like tool change, which can be accomplished in MDI mode. To achieve this, the machine must be set to MDI mode, and then, using the Human Machine Interface (HMI), the operator can manually enter the G Code that needs to be executed. Once the code is entered, the operator can initiate the cycle start by pressing the corresponding button. An example of such a process can be seen in the video provided. For instance, the code T01 M06 would be used to change to tool number 1. Video . MEM (Memory): In this mode, the CNC system runs programs stored in its memory. This mode is known as the automatic mode, where the CNC machine loads the entire G Code file into its memory and executes it automatically, without any manual intervention. In this mode, the machine follows the instructions provided in the G Code file from start to finish. The entire code is executed sequentially, allowing for a fully automated operation. The machine takes care of executing each command in the G Code file without requiring any further input or interaction from the operator. EDIT (Edit): At times, it becomes necessary to make changes to an existing CNC program, such as adjusting the feed rate or spindle speed. In such cases, the Edit mode provides the operator with the capability to modify or create CNC programs using an editing interface. This mode offers a user-friendly interface specifically designed for editing purposes. The operator can access the program and make the desired modifications, such as changing parameters, adding or removing commands, or adjusting settings related to feed rate and spindle speed. The Edit mode empowers the operator to fine-tune CNC programs to meet specific requirements, ensuring flexibility and customization in the machining process. video . MPG (Manual Pulse Generator): MPG mode is a specific operating mode in CNC systems that allows the operator to manually control the machine's movement using a manual pulse generator device. The manual pulse generator is a handheld device equipped with a rotary knob or wheels that provide precise control over machine motion. In MPG mode, the operator can manually generate pulses or increments of movement using the manual pulse generator. Each pulse corresponds to a specific movement increment, such as a defined distance or angular rotation. By rotating the knob or wheels, the operator can control the speed and direction of the machine tool's movement. By providing precise control over machine movement, MPG mode enhances operator interaction and enables fine adjustments or manual operations that require a high degree of accuracy. It offers a versatile and hands-on approach to machine control, complementing other modes and functionalities provided by CNC systems. Video . MPG mode is particularly useful in various scenarios, including: Fine Positioning: MPG mode allows operators to make small, precise adjustments to position the machine tool accurately. It provides a tactile and intuitive control mechanism, enabling fine-tuning and alignment of workpieces or tooling. Manual Operation: During setup, testing, or maintenance tasks, operators may need to manually control the machine tool for specific operations. MPG mode offers a convenient way to perform manual movements, such as tool alignment, verifying clearances, or inspecting workpiece details. Manual Machining: In certain situations, manual machining or manual intervention is required for complex or delicate operations. MPG mode allows the operator to manually guide the machine tool along the desired path, ensuring precise machining in real-time. Jogging: MPG mode can also be used for jogging the machine tool, allowing the operator to move the machine incrementally in different directions. This feature is useful for step-by-step setup, alignment, or manual machining tasks. JOG (Jogging): Jog mode allows the operator to manually move the machine tool in different directions incrementally. Jogging (as an operation, not as a mode) is an essential functionality in CNC (Computer Numerical Control) systems that allows operators to manually move the machine tool in a controlled manner. In jogging mode, the operator can incrementally move the machine tool in different directions, providing flexibility and precision in positioning and setup tasks. Jogging is widely used in various applications, including CNC machining, milling, turning, routing, and more. It offers operators a hands-on approach to position and align the machine tool precisely. By enabling manual control, jogging enhances the operator's ability to perform fine adjustments, verify positions, and ensure optimal machine performance. Here's more information about jogging: Incremental Movements: Jogging enables the operator to move the machine tool incrementally in small steps. The step size can be predefined or adjustable, allowing for fine-tuning of machine positions. The operator typically controls the movement using dedicated buttons, a pendant, or a control panel. Directional Control: Jogging allows movement in multiple directions, such as X, Y, and Z axes. The operator can move the machine tool along each axis independently or simultaneously, depending on the machine's configuration and capabilities. Speed Control: Jogging mode often provides speed control options. Operators can adjust the speed of movement to match the specific requirements of the task. This feature allows for precise positioning and control over the machine tool's motion. Manual Alignment: Jogging is commonly used for aligning tools or workpieces. By manually moving the machine tool, operators can align the cutting tool with the desired position on the workpiece, ensuring accurate machining. Setup and Inspection: Jogging is valuable during setup and inspection tasks. Operators can jog the machine tool to specific positions, allowing them to verify clearances, check dimensions, or align fixtures accurately. It helps in verifying that the workpiece and tooling are correctly positioned before starting automated machining operations. User-Friendly Interface: CNC systems often provide user-friendly interfaces for jogging, including dedicated jog wheels, control pendants, or software-based jog controls. These interfaces enhance the operator's experience by providing intuitive controls and real-time feedback on the machine tool's position. The same jogginf functionality can be achieved Teach in JOG : This mode is similar to the JOG mode but specifically designed for teaching the machine by manually moving it through the desired motions. Teach in HND (Teach in Handle): This mode enables the operator to control the machine's movement using a manual control handle. INC (Incremental): In this mode, the machine tool moves incrementally based on defined increments or distances. REF (Reference): The Reference mode allows the machine tool to perform a homing or reference operation. RMT (Remote): Remote mode enables the CNC system to receive commands and instructions from an external device or computer. UNAVAILABLE : This is the default case when the mode information is unavailable or cannot be retrieved from the CNC system. Please note that the full forms provided here are general explanations and may vary depending on the specific CNC system or context. CODE SAMPLE 3 Code using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); } else { Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); string mode = GetMode (); Console . WriteLine ( $\"\\n\\nMode is {mode}\" ); Console . Read (); } Focas1 . cnc_freelibhndl ( _handle ); } public static string GetMode () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST mode = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , mode ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain mode data\" ); return \"\" ; } switch ( mode . aut ) { case 0 : return \"MDI\" ; case 1 : return \"MEM\" ; case 3 : return \"EDIT\" ; case 4 : return \"MPG\" ; case 5 : return \"JOG\" ; case 6 : return \"Teach in JOG\" ; case 7 : return \"Teach in HND\" ; case 8 : return \"INC\" ; case 9 : return \"REF\" ; case 10 : return \"RMT\" ; default : return \"UNAVAILABLE\" ; } } public static string GetStatus () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST status = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , status ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain status data\" ); return \"\" ; } switch ( status . run ) { case 0 : return \"*****\" ; case 1 : return \"STOP\" ; case 2 : return \"HOLD\" ; case 3 : return \"STRT\" ; case 4 : return \"MSTR\" ; default : return \"UNAVAILABLE\" ; } } } } EXPLANATION The given code is a C# program that uses the Fanuc Focas API to connect to a Fanuc CNC system, retrieve the operating mode information, and obtain the status of the CNC machine. Here's a breakdown of the code: The code begins with the necessary using statements to import the required namespaces for the program. The FanucFocas namespace is defined to encapsulate the code. Within the FanucFocas namespace, the Program class is defined. The program declares some static variables: _handle of type ushort (unsigned short) to store the handle for the Focas connection, and _ret of type short to store the return values of Focas API functions. The Main method is the entry point of the program. It starts by printing \"Starting\" to the console. The Focas API function Focas1.cnc_allclibhndl3 is called to establish a connection with the Fanuc CNC system. The method takes the IP address (in this case, \"172.18.30.147\"), port number (8193), Focas version (6), and an out parameter _handle to receive the handle for the connection. The return value _ret is checked to determine if the connection was successful. If the connection fails, the program prints \"Cannot Connect\" to the console and waits for user input before exiting. If the connection succeeds, the program prints the obtained _handle value to the console. The GetMode method is called to retrieve the operating mode information from the CNC system. Inside the GetMode method, it first checks if a valid handle _handle exists. If not, it prints \"Get a handle\" to the console and returns an empty string. It declares an instance of the ODBST struct (a structure provided by the Focas API) named mode . The Focas API function Focas1.cnc_statinfo is called to obtain the mode data using the handle _handle and the mode variable. The return value _ret is checked to ensure successful data retrieval. If the data retrieval is successful, a switch statement is used to map the mode.aut value to the corresponding operating mode string. The operating mode string is returned and printed to the console. The GetStatus method is also defined to retrieve the current status of the CNC machine. The GetStatus method is similar to GetMode and follows the same pattern of checking the handle, declaring an instance of the ODBST struct for status, calling cnc_statinfo , and using a switch statement to map the status.run value to the corresponding status string. Finally, the obtained status information is returned and printed to the console. The program waits for user input before exiting. The cnc_statinfo function is part of the FANUC FOCAS library, which is used for CNC machine control. This function is used to retrieve the status information of the CNC machine. The cnc_statinfo function returns a structure that contains several fields, two of which are .aut and .run . .aut field: This field represents the automatic operation mode status. It has three possible values: 0 (MDI mode), 1 (MEM mode), and 2 (EDIT mode). .run field: This field represents the running status of the CNC machine in automatic mode. It has five possible values: 0: This value is represented as \" * \" in the code snippet we've provided. It likely represents a default or uninitialized state. 1: This value is represented as \"STOP\" in the code snippet, indicating that the CNC machine is in a stopped state. 2: This value is represented as \"HOLD\" in the code snippet, indicating that the CNC machine is in a hold or paused state. This happens when the cycle stop button is pressed in the machine 3: This value is represented as \"STRT\" in the code snippet, indicating that the CNC machine is in a start or running state. 4: This value is represented as \"MSTR\" in the code snippet, indicating that the CNC machine is in a master or controlling state. The \"default\" case in the switch statement is used to handle any other values that the .run field might have. In this case, it returns \"UNAVAILABLE\", indicating that the running status of the CNC machine is not available or not recognized. SAMPLE SEQUENCE OF MACHINE STATE The following table shows a sample sequence of machine states and their corresponding execution mode and running status S.No Actual Machine State Execution Mode (From Focas) Execution Mode (Mapped Value) Running Status (From Focas) Running Status (Mapped Value) 1. Machine is in auto Mode, a cycle has been started and it's running 1 MEM 3 STRT 2. Machine is in auto Mode, a cycle has ended from previous state 1 MEM 0 *** 3. Auto Mode, cycle start & Running 1 MEM 3 STRT 4. Auto Mode, cycle suspend in middle (pressed the cycle stop button in fanuc controller) 1 MEM 2 HOLD 5. Auto Mode, cycle resume after suspend 1 MEM 3 STRT 6. Auto Mode, cycle suspend in middle 1 MEM 2 HOLD 7. Auto Mode, cycle cancelled (cancelled after suspend, cycle did not get over, by pressing reset button) 1 MEM 0 *** 8. Auto Mode, cycle stop (nothing going), emergency button 1 MEM 0 *** 9. Emergency button released (from previous step) 1 MEM 0 *** 10. Auto Mode, cycle start, emergency button pressed 1 MEM 0 *** 11. Emergency button released (from previous step) 1 MEM 0 *** 12. MDI Mode 0 MDI 1 STOP 13. EDIT Mode 3 EDIT 0 *** 14. MPG Mode 4 MPG (Hand Wheel) 0 *** 15. JOG Mode 5 JOG 0 *** 16. REF Mode 9 REF 0 *** CODE SAMPLE 4 Code using System ; using System.Threading ; namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); return ; } Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); // Create a loop to continuously print machine mode and status every 2 seconds while ( true ) { Console . WriteLine ( \"=====================\" ); string mode = GetMode (); Console . WriteLine ( $\"Mode is {mode}\" ); string status = GetStatus (); Console . WriteLine ( $\"Status is {status}\" ); Console . WriteLine ( \"=====================\" ); // Wait for 2 seconds before the next iteration Thread . Sleep ( 2000 ); } Focas1 . cnc_freelibhndl ( _handle ); } public static string GetMode () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST mode = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , mode ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain mode data\" ); return \"\" ; } switch ( mode . aut ) { case 0 : return \"MDI\" ; case 1 : return \"MEM\" ; case 3 : return \"EDIT\" ; case 4 : return \"MPG\" ; case 5 : return \"JOG\" ; case 6 : return \"Teach in JOG\" ; case 7 : return \"Teach in HND\" ; case 8 : return \"INC\" ; case 9 : return \"REF\" ; case 10 : return \"RMT\" ; default : return \"UNAVAILABLE\" ; } } public static string GetStatus () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST status = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , status ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain status data\" ); return \"\" ; } switch ( status . run ) { case 0 : return \"*****\" ; case 1 : return \"STOP\" ; case 2 : return \"HOLD\" ; case 3 : return \"STRT\" ; case 4 : return \"MSTR\" ; default : return \"UNAVAILABLE\" ; } } } } EXPLANATION The provided code is a C# program that uses the Fanuc Focas API to establish a connection with a Fanuc CNC system, retrieve the machine mode and operational status information, and continuously display them every 2 seconds. It utilizes the GetMode() and GetStatus() methods to retrieve the corresponding information. Line-by-Line Explanation: using System ; using System.Threading ; The necessary namespaces are imported for the program. namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; The code defines the FanucFocas namespace and the Program class. It declares two static variables: _handle of type ushort (unsigned short) to store the Focas connection handle, and _ret of type short to store the return values of Focas API functions. static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); return ; } The Main method is the entry point of the program. It starts by printing \"Starting\" to the console. Then, it attempts to establish a connection with the Fanuc CNC system using the Focas1.cnc_allclibhndl3 API function, providing the IP address, port number, Focas version, and the _handle variable to receive the handle. If the connection fails, an error message is displayed and the program terminates. Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); If the connection succeeds, the obtained _handle value is printed to the console. while ( true ) { Console . WriteLine ( \"=====================\" ); string mode = GetMode (); Console . WriteLine ( $\"Mode is {mode}\" ); string status = GetStatus (); Console . WriteLine ( $\"Status is {status}\" ); Console . WriteLine ( \"=====================\" ); Thread . Sleep ( 2000 ); } A while loop is created to continuously retrieve and display the machine mode and operational status every 2 seconds. Inside the loop, the mode and status information are obtained using the GetMode() and GetStatus() methods respectively. The information is then printed to the console with appropriate labels. The loop is paused for 2 seconds using Thread.Sleep() before the next iteration. Focas1 . cnc_freelibhndl ( _handle ); } Finally, after exiting the loop, the Focas1.cnc_freelibhndl API function is called to free the allocated Focas library handle. public static string GetMode () { // Mode retrieval logic } The GetMode() method is defined to retrieve the machine mode information from the CNC system. It returns a string representation of the mode. public static string GetStatus () { // Status retrieval logic } } } Similarly, the GetStatus() method is defined to retrieve the operational status of the CNC machine. It returns a string representation of the status. The remaining part of the code contains the closing braces to close the Program class and FanucFocas namespace. Overall, the program establishes a connection with the Fanuc CNC system, retrieves and continuously displays the machine mode and operational status every 2 seconds until terminated. CODE SAMPLE 5 Code using System ; using System.Threading ; namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); return ; } Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); // Register the event handler for Ctrl+C or closing the terminal window Console . CancelKeyPress += Console_CancelKeyPress ; try { // Create a loop to continuously print machine mode, status, and active program every 2 seconds while ( true ) { Console . WriteLine ( \"=====================\" ); string mode = GetMode (); Console . WriteLine ( $\"Mode is {mode}\" ); string status = GetStatus (); Console . WriteLine ( $\"Status is {status}\" ); GetExecutionProgram (); Console . WriteLine ( \"=====================\" ); // Wait for 2 seconds before the next iteration Thread . Sleep ( 2000 ); } } finally { // Free the Focas handle when the loop exits Focas1 . cnc_freelibhndl ( _handle ); } } private static void Console_CancelKeyPress ( object sender , ConsoleCancelEventArgs e ) { // Cancel the event to prevent termination e . Cancel = true ; // Exit the program gracefully Environment . Exit ( 0 ); } public static string GetMode () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST mode = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , mode ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain mode data\" ); return \"\" ; } switch ( mode . aut ) { case 0 : return \"MDI\" ; case 1 : return \"MEM\" ; case 3 : return \"EDIT\" ; case 4 : return \"MPG\" ; case 5 : return \"JOG\" ; case 6 : return \"Teach in JOG\" ; case 7 : return \"Teach in HND\" ; case 8 : return \"INC\" ; case 9 : return \"REF\" ; case 10 : return \"RMT\" ; default : return \"UNAVAILABLE\" ; } } public static string GetStatus () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST status = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , status ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain status data\" ); return \"\" ; } switch ( status . run ) { case 0 : return \"*****\" ; case 1 : return \"STOP\" ; case 2 : return \"HOLD\" ; case 3 : return \"STRT\" ; case 4 : return \"MSTR\" ; default : return \"UNAVAILABLE\" ; } } public static void GetExecutionProgram () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return ; } Focas1 . ODBEXEPRG prg_info = new Focas1 . ODBEXEPRG (); _ret = Focas1 . cnc_exeprgname ( _handle , prg_info ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain program data\" ); return ; } string programName = new string ( prg_info . name ). TrimEnd ( '\\0' ); Console . WriteLine ( $\"Executing Program Name: {programName}\" ); } } } Explanation The provided code is a C# program that interacts with a FANUC CNC machine using the Focas library. It connects to the CNC machine, retrieves information about the machine's mode, status, and active program, and continuously prints this information every 2 seconds. Let's go through the code step by step: using System ; using System.Threading ; The code includes necessary namespaces for the program. namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; The code defines a namespace ( FanucFocas ) and a class ( Program ). It also declares two static variables _handle (of type ushort ) and _ret (of type short ) to store the Focas handle and return value respectively. static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); return ; } The Main method is the entry point of the program. It first prints \"Starting\" to the console. Then it calls the cnc_allclibhndl3 function from the Focas library to establish a connection with the CNC machine using the specified IP address (\"172.18.30.147\"), port number (8193), and timeout (6 seconds). The Focas handle is stored in the _handle variable, and the return value is stored in the _ret variable. If the connection is unsuccessful (return value is not equal to Focas1.EW_OK ), it prints \"Cannot Connect\" and waits for user input before exiting the program. Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); // Register the event handler for Ctrl+C or closing the terminal window Console . CancelKeyPress += Console_CancelKeyPress ; try { // Create a loop to continuously print machine mode, status, and active program every 2 seconds while ( true ) { Console . WriteLine ( \"=====================\" ); string mode = GetMode (); Console . WriteLine ( $\"Mode is {mode}\" ); string status = GetStatus (); Console . WriteLine ( $\"Status is {status}\" ); GetExecutionProgram (); Console . WriteLine ( \"=====================\" ); // Wait for 2 seconds before the next iteration Thread . Sleep ( 2000 ); } } finally { // Free the Focas handle when the loop exits Focas1 . cnc_freelibhndl ( _handle ); } } The program then prints the obtained Focas handle to the console. It registers the Console_CancelKeyPress method as an event handler for the Ctrl+C key press or closing the terminal window. This ensures that the program exits gracefully when these events occur. Inside the try block, the program enters a loop that continuously retrieves and prints information about the machine's mode, status, and active program every 2 seconds. The GetMode() method is called to retrieve the current machine mode, which is then printed to the console. The GetStatus() method is called to retrieve the current machine status, which is also printed to the console. The GetExecutionProgram() method is called to retrieve the name of the currently executing program on the machine, which is printed to the console. After printing the information, the program waits for 2 seconds using Thread.Sleep(2000) before the next iteration of the loop. Finally, in the finally block, the Focas handle is released using the cnc_freelibhndl function to free up resources when the program exits. private static void Console_CancelKeyPress ( object sender , ConsoleCancelEventArgs e ) { // Cancel the event to prevent termination e . Cancel = true ; // Exit the program gracefully Environment . Exit ( 0 ); } The Console_CancelKeyPress method is an event handler that is triggered when the Ctrl+C key is pressed or the terminal window is closed. It cancels the event ( e.Cancel = true ) to prevent immediate termination of the program. Then it gracefully exits the program using Environment.Exit(0) . public static string GetMode () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST mode = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , mode ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain mode data\" ); return \"\" ; } switch ( mode . aut ) { case 0 : return \"MDI\" ; case 1 : return \"MEM\" ; case 3 : return \"EDIT\" ; case 4 : return \"MPG\" ; case 5 : return \"JOG\" ; case 6 : return \"Teach in JOG\" ; case 7 : return \"Teach in HND\" ; case 8 : return \"INC\" ; case 9 : return \"REF\" ; case 10 : return \"RMT\" ; default : return \"UNAVAILABLE\" ; } } The GetMode() method retrieves the current machine mode. It first checks if a valid Focas handle exists. If not, it prints \"Get a handle\" and returns an empty string. It creates an instance of the Focas1.ODBST structure to store the mode information. Then it calls the cnc_statinfo function to retrieve the mode data using the Focas handle. The return value is stored in the _ret variable. If an error occurs during the retrieval (return value is not equal to 0), it prints \"Error: Cannot obtain mode data\" and returns an empty string. Otherwise, it uses a switch statement on the mode.aut value to determine the mode and returns the corresponding string representation. public static string GetStatus () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST status = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , status ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain status data\" ); return \"\" ; } switch ( status . run ) { case 0 : return \"*****\" ; case 1 : return \"STOP\" ; case 2 : return \"HOLD\" ; case 3 : return \"STRT\" ; case 4 : return \"MSTR\" ; default : return \"UNAVAILABLE\" ; } } The GetStatus() method retrieves the current machine status. It follows a similar structure as the GetMode() method. It first checks if a valid Focas handle exists. If not, it prints \"Get a handle\" and returns an empty string . It creates an instance of the Focas1.ODBST structure to store the status information. Then it calls the cnc_statinfo function to retrieve the status data using the Focas handle. The return value is stored in the _ret variable. If an error occurs during the retrieval (return value is not equal to 0), it prints \"Error: Cannot obtain status data\" and returns an empty string. Otherwise, it uses a switch statement on the status.run value to determine the status and returns the corresponding string representation. public static void GetExecutionProgram () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return ; } Focas1 . ODBEXEPRG prg_info = new Focas1 . ODBEXEPRG (); _ret = Focas1 . cnc_exeprgname ( _handle , prg_info ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain program data\" ); return ; } string programName = new string ( prg_info . name ). TrimEnd ( '\\0' ); Console . WriteLine ( $\"Executing Program Name: {programName}\" ); } } } The GetExecutionProgram() method retrieves the name of the currently executing program on the machine. It first checks if a valid Focas handle exists. If not, it prints \"Get a handle\" and returns. It creates an instance of the Focas1.ODBEXEPRG structure to store the program information. Then it calls the cnc_exeprgname function to retrieve the program data using the Focas handle. The return value is stored in the _ret variable. If an error occurs during the retrieval (return value is not equal to 0), it prints \"Error: Cannot obtain program data\" and returns. Otherwise, it converts the program name from a null-terminated character array to a string by creating a new string and trimming the null character ( '\\0' ) at the end. The program name is then printed to the console. That's a walkthrough of the provided code! It connects to a FANUC CNC machine, retrieves and prints information about the machine's mode, status, and active program in a continuous loop. It handles graceful program termination and cleanup when necessary.","title":"Focas"},{"location":"General%20Knowledge/Focas/#focas","text":"","title":"Focas"},{"location":"General%20Knowledge/Focas/#introduction","text":"Fanuc Focas API is a programming interface provided by Fanuc, a leading manufacturer of industrial robots and CNC (Computer Numerical Control) systems. The Focas API allows developers to interact with and control Fanuc CNC systems using various programming languages. It provides a set of functions and commands that enable applications to retrieve information from CNC controllers, monitor machine status, send commands, and perform data exchanges with the CNC system. The Focas API is widely used in industries such as manufacturing, automation, and robotics to develop custom software solutions for Fanuc CNC machines.","title":"Introduction"},{"location":"General%20Knowledge/Focas/#quick-overview-of-csharp-and-project-setup-in-visual-studio","text":"","title":"Quick Overview of Csharp and Project setup in Visual Studio"},{"location":"General%20Knowledge/Focas/#introduction_1","text":"In C# and .NET, projects are organized using solutions, which consist of one or more projects. This documentation provides an overview of the project structure and key concepts related to C# and .NET development.","title":"Introduction"},{"location":"General%20Knowledge/Focas/#solutions","text":"Solutions serve as containers for organizing multiple projects in C# and .NET development. A solution represents a higher-level unit that groups related projects together. Solutions provide a convenient way to manage dependencies and build configurations for complex software systems.","title":"Solutions"},{"location":"General%20Knowledge/Focas/#projects","text":"Projects are the building blocks of a solution and contain the source code and other related files. A solution can have multiple projects, each representing a distinct component or module. Projects are typically used to organize and manage different aspects of the software solution.","title":"Projects"},{"location":"General%20Knowledge/Focas/#assemblies-and-dlls","text":"Once a project is compiled, it produces assemblies or DLLs (Dynamic Link Libraries). Assemblies are the output files of the compilation process and contain executable code and other resources. Assemblies can be thought of as a group of related namespaces and types.","title":"Assemblies and DLLs"},{"location":"General%20Knowledge/Focas/#namespaces","text":"Namespaces are used to organize and group related classes, interfaces, and other types within a project. Namespaces provide a way to avoid naming conflicts and provide logical separation between different components of the codebase. Namespaces make it easier to manage and navigate large codebases by providing a hierarchical structure.","title":"Namespaces"},{"location":"General%20Knowledge/Focas/#default-namespace-in-visual-studio","text":"By default, Visual Studio will create a namespace that matches the name of the project. The default namespace helps maintain a clear and consistent structure for the code within the project. Developers can modify the namespace to suit their needs, but it is generally recommended to keep it aligned with the project name. The following diagram shows the above hierarchy as an UML diagram flowchart TB subgraph SOLUTION direction TB Solution((Solution)) Solution --> Project1 Solution --> Project2 end subgraph PROJECT direction TB Project1((Project1)) Project1 --> Assembly1 Project1 --> Assembly2 end subgraph ASSEMBLY direction TB Assembly1((Assembly1)) Assembly2((Assembly2)) Assembly1 --> Namespace1 Assembly1 --> Namespace2 end subgraph NAMESPACE direction TB Namespace1((Namespace1)) Namespace2((Namespace2)) Namespace1 --> Class1 Namespace1 --> Class2 end subgraph CLASS direction TB Class1((Class1)) Class2((Class2)) Class1 --> Attribute1 Class1 --> Method1 end","title":"Default Namespace in Visual Studio"},{"location":"General%20Knowledge/Focas/#sample-project-setup","text":"","title":"Sample Project Setup"},{"location":"General%20Knowledge/Focas/#project-directory-structure","text":"FanucFocas # The project root (i guess its a directory) properties/ # This directory may contain project-specific properties or settings files references/ # This directory may contain references to external libraries or dependencies, dll, etc App.config/ # This file is a configuration file for the application. It may contain settings such as connection strings, application-specific configurations, or environment variables. fwlib32.cs/ # This file represents the Focas library for CNC/PMC Data Window Library for FOCAS1/Ethernet. It contains the necessary classes and functions for interacting with # Focas enabled CNC machines. packages.config/ # This file is used in older versions of .NET Framework projects to manage NuGet package references. It specifies the packages and their versions used in the project. Program.cs # This file is the entry point of the application. It contains the main code that is executed when the application starts.","title":"Project Directory Structure"},{"location":"General%20Knowledge/Focas/#working-with-namespaces-and-external-libraries-in-c","text":"","title":"Working with Namespaces and External Libraries in C"},{"location":"General%20Knowledge/Focas/#introduction_2","text":"In C#, namespaces are used to organize and group related classes, structures, and other types. They provide a way to avoid naming conflicts and improve code organization. When working with external libraries, such as the Focas library in your project, namespaces play a crucial role in referencing and accessing the library's classes and structures.","title":"Introduction"},{"location":"General%20Knowledge/Focas/#namespaces-in-c","text":"Namespaces are used to logically organize and group related code elements. They provide a hierarchical structure and help in avoiding naming conflicts. Namespaces improve code readability and maintainability.","title":"Namespaces in C"},{"location":"General%20Knowledge/Focas/#using-statements-and-namespaces","text":"To use classes and structures from a namespace, you need to include a using statement at the top of your file. The using statement allows you to access the classes and structures directly without specifying the fully qualified names.","title":"Using Statements and Namespaces"},{"location":"General%20Knowledge/Focas/#syntax","text":"using NamespaceName ;","title":"Syntax:"},{"location":"General%20Knowledge/Focas/#example","text":"using System ; using MyLibrary ; In the example above, System and MyLibrary are namespaces that contain the desired classes and structures.","title":"Example:"},{"location":"General%20Knowledge/Focas/#including-external-libraries-and-using-statements","text":"When working with external libraries, you need to include the library's files in your project. The files containing the classes and structures for the library should be located in a specific directory within your project. To access the library's classes and structures, you need to specify the appropriate using statement with the library's namespace.","title":"Including External Libraries and Using Statements"},{"location":"General%20Knowledge/Focas/#example_1","text":"using FocasLibrary ; - In this example, FocasLibrary is the namespace where the classes and structures from the Focas library are defined. - The using statement allows you to access those classes and structures directly in your code.","title":"Example:"},{"location":"General%20Knowledge/Focas/#the-fwlib32cs-file-and-global-namespace","text":"In the provided fwlib32.cs file (as shown in the project directory), the namespace is not explicitly defined (you can open the file and check it out). However, when you include the fwlib32.cs file in your project and build it, the classes and structures in fwlib32.cs are treated as part of the global namespace. The global namespace includes all code elements that are not explicitly placed within a namespace. This means that you can directly reference the classes and structures from fwlib32.cs without the need for a using statement.","title":"The fwlib32.cs File and Global Namespace"},{"location":"General%20Knowledge/Focas/#adding-the-fwlibcs-library-to-a-visual-studio-project","text":"The following steps outline how to add the fwlib.cs library file to your current working project in Visual Studio. The fwlib.cs file contains the library code that you want to include in your project.","title":"Adding the fwlib.cs Library to a Visual Studio Project"},{"location":"General%20Knowledge/Focas/#steps","text":"Open your project in Visual Studio. In the Solution Explorer, locate your project folder. Right-click on your project folder to open the context menu. From the context menu, select \"Add\" and then choose \"Existing Item.\" This action opens the file selection dialog. In the file selection dialog, navigate to the location where the fwlib.cs file is located on your computer. Select the fwlib.cs file. Click the \"Add\" button. This action adds the fwlib.cs file to your project. The following figure shows how to add the library file in visual studio","title":"Steps"},{"location":"General%20Knowledge/Focas/#purpose","text":"Adding the fwlib.cs library file to your Visual Studio project is necessary to include the library's code in your project. By doing so, the compiler recognizes the library and its contents, enabling you to utilize its functionality in your code.","title":"Purpose"},{"location":"General%20Knowledge/Focas/#programs-to-demonstrate-focas-api","text":"","title":"Programs to Demonstrate Focas API"},{"location":"General%20Knowledge/Focas/#code-sample-1","text":"","title":"CODE SAMPLE 1"},{"location":"General%20Knowledge/Focas/#code","text":"Here is a sample c# code to get the machine state using fanuc focas api using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); } else { Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); string mode = GetMode (); Console . WriteLine ( $\"\\n\\nMode is {mode}\" ); Console . Read (); } Focas1 . cnc_freelibhndl ( _handle ); } public static string GetMode () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST mode = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , mode ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain mode data\" ); return \"\" ; } return $\"Mode is {mode.aut}\" ; } } }","title":"CODE"},{"location":"General%20Knowledge/Focas/#explanation","text":"The given C# code demonstrates the usage of the Fanuc Focas API to connect to a Fanuc CNC system and retrieve the operating mode information. Let's go through the code step by step: The code begins with the necessary using statements to import the required namespaces for the program. The FanucFocas namespace is defined to encapsulate the code. Within the FanucFocas namespace, the Program class is defined. The program declares some static variables: _handle of type ushort (unsigned short) to store the handle for the Focas connection, and _ret of type short to store the return values of Focas API functions. The Main method is the entry point of the program. It starts by printing \"Starting\" to the console. The Focas API function Focas1.cnc_allclibhndl3 is called to establish a connection with the Fanuc CNC system. The method takes the IP address (in this case, \"172.18.30.147\"), port number (8193), Focas version (6), and an out parameter _handle to receive the handle for the connection. The return value _ret is checked to determine if the connection was successful. If the connection fails, the program prints \"Cannot Connect\" to the console and waits for user input before exiting. If the connection succeeds, the program prints the obtained _handle value to the console. The GetMode method is called to retrieve the operating mode information from the CNC system. Inside the GetMode method, it first checks if a valid handle _handle exists. If not, it prints \"Get a handle\" to the console and returns an empty string. It declares an instance of the ODBST struct (a structure provided by the Focas API) named mode. The Focas API function Focas1.cnc_statinfo is called to obtain the mode data using the handle _handle and the mode variable. The return value _ret is checked to ensure successful data retrieval. If the data retrieval is successful, it returns a string indicating the mode by accessing the aut property of the mode struct. Finally, the obtained mode information is printed to the console. The program waits for user input before exiting. After reading the user input, the program calls Focas1.cnc_freelibhndl to free the allocated Focas library handle. Overall, this code demonstrates the basic usage of the Fanuc Focas API in C# to establish a connection with a Fanuc CNC system and retrieve the operating mode information.","title":"Explanation:"},{"location":"General%20Knowledge/Focas/#code-sample-2","text":"","title":"CODE SAMPLE 2"},{"location":"General%20Knowledge/Focas/#code_1","text":"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); } else { Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); string mode = GetMode (); Console . WriteLine ( $\"\\n\\nMode is {mode}\" ); Console . Read (); } Focas1 . cnc_freelibhndl ( _handle ); } public static string GetMode () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST mode = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , mode ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain mode data\" ); return \"\" ; } switch ( mode . aut ) { case 0 : return \"MDI\" ; case 1 : return \"MEM\" ; case 3 : return \"EDIT\" ; case 4 : return \"MPG\" ; case 5 : return \"JOG\" ; case 6 : return \"Teach in JOG\" ; case 7 : return \"Teach in HND\" ; case 8 : return \"INC\" ; case 9 : return \"REF\" ; case 10 : return \"RMT\" ; default : return \"UNAVAILABLE\" ; } } } }","title":"Code"},{"location":"General%20Knowledge/Focas/#explanation_1","text":"The code begins with the necessary using statements to import the required namespaces for the program. The FanucFocas namespace is defined to encapsulate the code. Within the FanucFocas namespace, the Program class is defined. The program declares some static variables: _handle of type ushort (unsigned short) to store the handle for the Focas connection, and _ret of type short to store the return values of Focas API functions. The Main method is the entry point of the program. It starts by printing \"Starting\" to the console. The Focas API function Focas1.cnc_allclibhndl3 is called to establish a connection with the Fanuc CNC system. The method takes the IP address (in this case, \"172.18.30.147\"), port number (8193), Focas version (6), and an out parameter _handle to receive the handle for the connection. The return value _ret is checked to determine if the connection was successful. If the connection fails, the program prints \"Cannot Connect\" to the console and waits for user input before exiting. If the connection succeeds, the program prints the obtained _handle value to the console. The GetMode method is called to retrieve the operating mode information from the CNC system. Inside the GetMode method, it first checks if a valid handle _handle exists. If not, it prints \"Get a handle\" to the console and returns an empty string. It declares an instance of the ODBST struct (a structure provided by the Focas API) named mode . The Focas API function Focas1.cnc_statinfo is called to obtain the mode data using the handle _handle and the mode variable. The return value _ret is checked to ensure successful data retrieval. If the data retrieval is successful, a switch statement is used to map the mode.aut value to the corresponding operating mode string. The operating mode string is returned. Finally, the obtained mode information is printed to the console. The program waits for user input before exiting. After reading the user input, the program calls Focas1.cnc_freelibhndl to free the allocated Focas library handle.","title":"Explanation"},{"location":"General%20Knowledge/Focas/#mode","text":"The different modes and their corresponding full forms are as follows: MDI (Manual Data Input): In this mode, the operator has the ability to input instructions and programs directly into the CNC system manually. While it is not necessary for the operation to be limited to a single line, sometimes we require a simple operation like tool change, which can be accomplished in MDI mode. To achieve this, the machine must be set to MDI mode, and then, using the Human Machine Interface (HMI), the operator can manually enter the G Code that needs to be executed. Once the code is entered, the operator can initiate the cycle start by pressing the corresponding button. An example of such a process can be seen in the video provided. For instance, the code T01 M06 would be used to change to tool number 1. Video . MEM (Memory): In this mode, the CNC system runs programs stored in its memory. This mode is known as the automatic mode, where the CNC machine loads the entire G Code file into its memory and executes it automatically, without any manual intervention. In this mode, the machine follows the instructions provided in the G Code file from start to finish. The entire code is executed sequentially, allowing for a fully automated operation. The machine takes care of executing each command in the G Code file without requiring any further input or interaction from the operator. EDIT (Edit): At times, it becomes necessary to make changes to an existing CNC program, such as adjusting the feed rate or spindle speed. In such cases, the Edit mode provides the operator with the capability to modify or create CNC programs using an editing interface. This mode offers a user-friendly interface specifically designed for editing purposes. The operator can access the program and make the desired modifications, such as changing parameters, adding or removing commands, or adjusting settings related to feed rate and spindle speed. The Edit mode empowers the operator to fine-tune CNC programs to meet specific requirements, ensuring flexibility and customization in the machining process. video . MPG (Manual Pulse Generator): MPG mode is a specific operating mode in CNC systems that allows the operator to manually control the machine's movement using a manual pulse generator device. The manual pulse generator is a handheld device equipped with a rotary knob or wheels that provide precise control over machine motion. In MPG mode, the operator can manually generate pulses or increments of movement using the manual pulse generator. Each pulse corresponds to a specific movement increment, such as a defined distance or angular rotation. By rotating the knob or wheels, the operator can control the speed and direction of the machine tool's movement. By providing precise control over machine movement, MPG mode enhances operator interaction and enables fine adjustments or manual operations that require a high degree of accuracy. It offers a versatile and hands-on approach to machine control, complementing other modes and functionalities provided by CNC systems. Video . MPG mode is particularly useful in various scenarios, including: Fine Positioning: MPG mode allows operators to make small, precise adjustments to position the machine tool accurately. It provides a tactile and intuitive control mechanism, enabling fine-tuning and alignment of workpieces or tooling. Manual Operation: During setup, testing, or maintenance tasks, operators may need to manually control the machine tool for specific operations. MPG mode offers a convenient way to perform manual movements, such as tool alignment, verifying clearances, or inspecting workpiece details. Manual Machining: In certain situations, manual machining or manual intervention is required for complex or delicate operations. MPG mode allows the operator to manually guide the machine tool along the desired path, ensuring precise machining in real-time. Jogging: MPG mode can also be used for jogging the machine tool, allowing the operator to move the machine incrementally in different directions. This feature is useful for step-by-step setup, alignment, or manual machining tasks. JOG (Jogging): Jog mode allows the operator to manually move the machine tool in different directions incrementally. Jogging (as an operation, not as a mode) is an essential functionality in CNC (Computer Numerical Control) systems that allows operators to manually move the machine tool in a controlled manner. In jogging mode, the operator can incrementally move the machine tool in different directions, providing flexibility and precision in positioning and setup tasks. Jogging is widely used in various applications, including CNC machining, milling, turning, routing, and more. It offers operators a hands-on approach to position and align the machine tool precisely. By enabling manual control, jogging enhances the operator's ability to perform fine adjustments, verify positions, and ensure optimal machine performance. Here's more information about jogging: Incremental Movements: Jogging enables the operator to move the machine tool incrementally in small steps. The step size can be predefined or adjustable, allowing for fine-tuning of machine positions. The operator typically controls the movement using dedicated buttons, a pendant, or a control panel. Directional Control: Jogging allows movement in multiple directions, such as X, Y, and Z axes. The operator can move the machine tool along each axis independently or simultaneously, depending on the machine's configuration and capabilities. Speed Control: Jogging mode often provides speed control options. Operators can adjust the speed of movement to match the specific requirements of the task. This feature allows for precise positioning and control over the machine tool's motion. Manual Alignment: Jogging is commonly used for aligning tools or workpieces. By manually moving the machine tool, operators can align the cutting tool with the desired position on the workpiece, ensuring accurate machining. Setup and Inspection: Jogging is valuable during setup and inspection tasks. Operators can jog the machine tool to specific positions, allowing them to verify clearances, check dimensions, or align fixtures accurately. It helps in verifying that the workpiece and tooling are correctly positioned before starting automated machining operations. User-Friendly Interface: CNC systems often provide user-friendly interfaces for jogging, including dedicated jog wheels, control pendants, or software-based jog controls. These interfaces enhance the operator's experience by providing intuitive controls and real-time feedback on the machine tool's position. The same jogginf functionality can be achieved Teach in JOG : This mode is similar to the JOG mode but specifically designed for teaching the machine by manually moving it through the desired motions. Teach in HND (Teach in Handle): This mode enables the operator to control the machine's movement using a manual control handle. INC (Incremental): In this mode, the machine tool moves incrementally based on defined increments or distances. REF (Reference): The Reference mode allows the machine tool to perform a homing or reference operation. RMT (Remote): Remote mode enables the CNC system to receive commands and instructions from an external device or computer. UNAVAILABLE : This is the default case when the mode information is unavailable or cannot be retrieved from the CNC system. Please note that the full forms provided here are general explanations and may vary depending on the specific CNC system or context.","title":"MODE"},{"location":"General%20Knowledge/Focas/#code-sample-3","text":"","title":"CODE SAMPLE 3"},{"location":"General%20Knowledge/Focas/#code_2","text":"using System ; using System.Collections.Generic ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); } else { Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); string mode = GetMode (); Console . WriteLine ( $\"\\n\\nMode is {mode}\" ); Console . Read (); } Focas1 . cnc_freelibhndl ( _handle ); } public static string GetMode () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST mode = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , mode ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain mode data\" ); return \"\" ; } switch ( mode . aut ) { case 0 : return \"MDI\" ; case 1 : return \"MEM\" ; case 3 : return \"EDIT\" ; case 4 : return \"MPG\" ; case 5 : return \"JOG\" ; case 6 : return \"Teach in JOG\" ; case 7 : return \"Teach in HND\" ; case 8 : return \"INC\" ; case 9 : return \"REF\" ; case 10 : return \"RMT\" ; default : return \"UNAVAILABLE\" ; } } public static string GetStatus () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST status = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , status ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain status data\" ); return \"\" ; } switch ( status . run ) { case 0 : return \"*****\" ; case 1 : return \"STOP\" ; case 2 : return \"HOLD\" ; case 3 : return \"STRT\" ; case 4 : return \"MSTR\" ; default : return \"UNAVAILABLE\" ; } } } }","title":"Code"},{"location":"General%20Knowledge/Focas/#explanation_2","text":"The given code is a C# program that uses the Fanuc Focas API to connect to a Fanuc CNC system, retrieve the operating mode information, and obtain the status of the CNC machine. Here's a breakdown of the code: The code begins with the necessary using statements to import the required namespaces for the program. The FanucFocas namespace is defined to encapsulate the code. Within the FanucFocas namespace, the Program class is defined. The program declares some static variables: _handle of type ushort (unsigned short) to store the handle for the Focas connection, and _ret of type short to store the return values of Focas API functions. The Main method is the entry point of the program. It starts by printing \"Starting\" to the console. The Focas API function Focas1.cnc_allclibhndl3 is called to establish a connection with the Fanuc CNC system. The method takes the IP address (in this case, \"172.18.30.147\"), port number (8193), Focas version (6), and an out parameter _handle to receive the handle for the connection. The return value _ret is checked to determine if the connection was successful. If the connection fails, the program prints \"Cannot Connect\" to the console and waits for user input before exiting. If the connection succeeds, the program prints the obtained _handle value to the console. The GetMode method is called to retrieve the operating mode information from the CNC system. Inside the GetMode method, it first checks if a valid handle _handle exists. If not, it prints \"Get a handle\" to the console and returns an empty string. It declares an instance of the ODBST struct (a structure provided by the Focas API) named mode . The Focas API function Focas1.cnc_statinfo is called to obtain the mode data using the handle _handle and the mode variable. The return value _ret is checked to ensure successful data retrieval. If the data retrieval is successful, a switch statement is used to map the mode.aut value to the corresponding operating mode string. The operating mode string is returned and printed to the console. The GetStatus method is also defined to retrieve the current status of the CNC machine. The GetStatus method is similar to GetMode and follows the same pattern of checking the handle, declaring an instance of the ODBST struct for status, calling cnc_statinfo , and using a switch statement to map the status.run value to the corresponding status string. Finally, the obtained status information is returned and printed to the console. The program waits for user input before exiting. The cnc_statinfo function is part of the FANUC FOCAS library, which is used for CNC machine control. This function is used to retrieve the status information of the CNC machine. The cnc_statinfo function returns a structure that contains several fields, two of which are .aut and .run . .aut field: This field represents the automatic operation mode status. It has three possible values: 0 (MDI mode), 1 (MEM mode), and 2 (EDIT mode). .run field: This field represents the running status of the CNC machine in automatic mode. It has five possible values: 0: This value is represented as \" * \" in the code snippet we've provided. It likely represents a default or uninitialized state. 1: This value is represented as \"STOP\" in the code snippet, indicating that the CNC machine is in a stopped state. 2: This value is represented as \"HOLD\" in the code snippet, indicating that the CNC machine is in a hold or paused state. This happens when the cycle stop button is pressed in the machine 3: This value is represented as \"STRT\" in the code snippet, indicating that the CNC machine is in a start or running state. 4: This value is represented as \"MSTR\" in the code snippet, indicating that the CNC machine is in a master or controlling state. The \"default\" case in the switch statement is used to handle any other values that the .run field might have. In this case, it returns \"UNAVAILABLE\", indicating that the running status of the CNC machine is not available or not recognized.","title":"EXPLANATION"},{"location":"General%20Knowledge/Focas/#sample-sequence-of-machine-state","text":"The following table shows a sample sequence of machine states and their corresponding execution mode and running status S.No Actual Machine State Execution Mode (From Focas) Execution Mode (Mapped Value) Running Status (From Focas) Running Status (Mapped Value) 1. Machine is in auto Mode, a cycle has been started and it's running 1 MEM 3 STRT 2. Machine is in auto Mode, a cycle has ended from previous state 1 MEM 0 *** 3. Auto Mode, cycle start & Running 1 MEM 3 STRT 4. Auto Mode, cycle suspend in middle (pressed the cycle stop button in fanuc controller) 1 MEM 2 HOLD 5. Auto Mode, cycle resume after suspend 1 MEM 3 STRT 6. Auto Mode, cycle suspend in middle 1 MEM 2 HOLD 7. Auto Mode, cycle cancelled (cancelled after suspend, cycle did not get over, by pressing reset button) 1 MEM 0 *** 8. Auto Mode, cycle stop (nothing going), emergency button 1 MEM 0 *** 9. Emergency button released (from previous step) 1 MEM 0 *** 10. Auto Mode, cycle start, emergency button pressed 1 MEM 0 *** 11. Emergency button released (from previous step) 1 MEM 0 *** 12. MDI Mode 0 MDI 1 STOP 13. EDIT Mode 3 EDIT 0 *** 14. MPG Mode 4 MPG (Hand Wheel) 0 *** 15. JOG Mode 5 JOG 0 *** 16. REF Mode 9 REF 0 ***","title":"SAMPLE SEQUENCE OF MACHINE STATE"},{"location":"General%20Knowledge/Focas/#code-sample-4","text":"","title":"CODE SAMPLE 4"},{"location":"General%20Knowledge/Focas/#code_3","text":"using System ; using System.Threading ; namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); return ; } Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); // Create a loop to continuously print machine mode and status every 2 seconds while ( true ) { Console . WriteLine ( \"=====================\" ); string mode = GetMode (); Console . WriteLine ( $\"Mode is {mode}\" ); string status = GetStatus (); Console . WriteLine ( $\"Status is {status}\" ); Console . WriteLine ( \"=====================\" ); // Wait for 2 seconds before the next iteration Thread . Sleep ( 2000 ); } Focas1 . cnc_freelibhndl ( _handle ); } public static string GetMode () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST mode = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , mode ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain mode data\" ); return \"\" ; } switch ( mode . aut ) { case 0 : return \"MDI\" ; case 1 : return \"MEM\" ; case 3 : return \"EDIT\" ; case 4 : return \"MPG\" ; case 5 : return \"JOG\" ; case 6 : return \"Teach in JOG\" ; case 7 : return \"Teach in HND\" ; case 8 : return \"INC\" ; case 9 : return \"REF\" ; case 10 : return \"RMT\" ; default : return \"UNAVAILABLE\" ; } } public static string GetStatus () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST status = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , status ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain status data\" ); return \"\" ; } switch ( status . run ) { case 0 : return \"*****\" ; case 1 : return \"STOP\" ; case 2 : return \"HOLD\" ; case 3 : return \"STRT\" ; case 4 : return \"MSTR\" ; default : return \"UNAVAILABLE\" ; } } } }","title":"Code"},{"location":"General%20Knowledge/Focas/#explanation_3","text":"The provided code is a C# program that uses the Fanuc Focas API to establish a connection with a Fanuc CNC system, retrieve the machine mode and operational status information, and continuously display them every 2 seconds. It utilizes the GetMode() and GetStatus() methods to retrieve the corresponding information. Line-by-Line Explanation: using System ; using System.Threading ; The necessary namespaces are imported for the program. namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; The code defines the FanucFocas namespace and the Program class. It declares two static variables: _handle of type ushort (unsigned short) to store the Focas connection handle, and _ret of type short to store the return values of Focas API functions. static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); return ; } The Main method is the entry point of the program. It starts by printing \"Starting\" to the console. Then, it attempts to establish a connection with the Fanuc CNC system using the Focas1.cnc_allclibhndl3 API function, providing the IP address, port number, Focas version, and the _handle variable to receive the handle. If the connection fails, an error message is displayed and the program terminates. Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); If the connection succeeds, the obtained _handle value is printed to the console. while ( true ) { Console . WriteLine ( \"=====================\" ); string mode = GetMode (); Console . WriteLine ( $\"Mode is {mode}\" ); string status = GetStatus (); Console . WriteLine ( $\"Status is {status}\" ); Console . WriteLine ( \"=====================\" ); Thread . Sleep ( 2000 ); } A while loop is created to continuously retrieve and display the machine mode and operational status every 2 seconds. Inside the loop, the mode and status information are obtained using the GetMode() and GetStatus() methods respectively. The information is then printed to the console with appropriate labels. The loop is paused for 2 seconds using Thread.Sleep() before the next iteration. Focas1 . cnc_freelibhndl ( _handle ); } Finally, after exiting the loop, the Focas1.cnc_freelibhndl API function is called to free the allocated Focas library handle. public static string GetMode () { // Mode retrieval logic } The GetMode() method is defined to retrieve the machine mode information from the CNC system. It returns a string representation of the mode. public static string GetStatus () { // Status retrieval logic } } } Similarly, the GetStatus() method is defined to retrieve the operational status of the CNC machine. It returns a string representation of the status. The remaining part of the code contains the closing braces to close the Program class and FanucFocas namespace. Overall, the program establishes a connection with the Fanuc CNC system, retrieves and continuously displays the machine mode and operational status every 2 seconds until terminated.","title":"EXPLANATION"},{"location":"General%20Knowledge/Focas/#code-sample-5","text":"","title":"CODE SAMPLE 5"},{"location":"General%20Knowledge/Focas/#code_4","text":"using System ; using System.Threading ; namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); return ; } Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); // Register the event handler for Ctrl+C or closing the terminal window Console . CancelKeyPress += Console_CancelKeyPress ; try { // Create a loop to continuously print machine mode, status, and active program every 2 seconds while ( true ) { Console . WriteLine ( \"=====================\" ); string mode = GetMode (); Console . WriteLine ( $\"Mode is {mode}\" ); string status = GetStatus (); Console . WriteLine ( $\"Status is {status}\" ); GetExecutionProgram (); Console . WriteLine ( \"=====================\" ); // Wait for 2 seconds before the next iteration Thread . Sleep ( 2000 ); } } finally { // Free the Focas handle when the loop exits Focas1 . cnc_freelibhndl ( _handle ); } } private static void Console_CancelKeyPress ( object sender , ConsoleCancelEventArgs e ) { // Cancel the event to prevent termination e . Cancel = true ; // Exit the program gracefully Environment . Exit ( 0 ); } public static string GetMode () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST mode = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , mode ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain mode data\" ); return \"\" ; } switch ( mode . aut ) { case 0 : return \"MDI\" ; case 1 : return \"MEM\" ; case 3 : return \"EDIT\" ; case 4 : return \"MPG\" ; case 5 : return \"JOG\" ; case 6 : return \"Teach in JOG\" ; case 7 : return \"Teach in HND\" ; case 8 : return \"INC\" ; case 9 : return \"REF\" ; case 10 : return \"RMT\" ; default : return \"UNAVAILABLE\" ; } } public static string GetStatus () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST status = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , status ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain status data\" ); return \"\" ; } switch ( status . run ) { case 0 : return \"*****\" ; case 1 : return \"STOP\" ; case 2 : return \"HOLD\" ; case 3 : return \"STRT\" ; case 4 : return \"MSTR\" ; default : return \"UNAVAILABLE\" ; } } public static void GetExecutionProgram () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return ; } Focas1 . ODBEXEPRG prg_info = new Focas1 . ODBEXEPRG (); _ret = Focas1 . cnc_exeprgname ( _handle , prg_info ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain program data\" ); return ; } string programName = new string ( prg_info . name ). TrimEnd ( '\\0' ); Console . WriteLine ( $\"Executing Program Name: {programName}\" ); } } }","title":"Code"},{"location":"General%20Knowledge/Focas/#explanation_4","text":"The provided code is a C# program that interacts with a FANUC CNC machine using the Focas library. It connects to the CNC machine, retrieves information about the machine's mode, status, and active program, and continuously prints this information every 2 seconds. Let's go through the code step by step: using System ; using System.Threading ; The code includes necessary namespaces for the program. namespace FanucFocas { class Program { static ushort _handle = 0 ; static short _ret = 0 ; The code defines a namespace ( FanucFocas ) and a class ( Program ). It also declares two static variables _handle (of type ushort ) and _ret (of type short ) to store the Focas handle and return value respectively. static void Main ( string [] args ) { Console . WriteLine ( \"Starting\" ); _ret = Focas1 . cnc_allclibhndl3 ( \"172.18.30.147\" , 8193 , 6 , out _handle ); if ( _ret != Focas1 . EW_OK ) { Console . WriteLine ( \"Cannot Connect\" ); Console . Read (); return ; } The Main method is the entry point of the program. It first prints \"Starting\" to the console. Then it calls the cnc_allclibhndl3 function from the Focas library to establish a connection with the CNC machine using the specified IP address (\"172.18.30.147\"), port number (8193), and timeout (6 seconds). The Focas handle is stored in the _handle variable, and the return value is stored in the _ret variable. If the connection is unsuccessful (return value is not equal to Focas1.EW_OK ), it prints \"Cannot Connect\" and waits for user input before exiting the program. Console . WriteLine ( $\"Our Focas Handle is {_handle}\" ); // Register the event handler for Ctrl+C or closing the terminal window Console . CancelKeyPress += Console_CancelKeyPress ; try { // Create a loop to continuously print machine mode, status, and active program every 2 seconds while ( true ) { Console . WriteLine ( \"=====================\" ); string mode = GetMode (); Console . WriteLine ( $\"Mode is {mode}\" ); string status = GetStatus (); Console . WriteLine ( $\"Status is {status}\" ); GetExecutionProgram (); Console . WriteLine ( \"=====================\" ); // Wait for 2 seconds before the next iteration Thread . Sleep ( 2000 ); } } finally { // Free the Focas handle when the loop exits Focas1 . cnc_freelibhndl ( _handle ); } } The program then prints the obtained Focas handle to the console. It registers the Console_CancelKeyPress method as an event handler for the Ctrl+C key press or closing the terminal window. This ensures that the program exits gracefully when these events occur. Inside the try block, the program enters a loop that continuously retrieves and prints information about the machine's mode, status, and active program every 2 seconds. The GetMode() method is called to retrieve the current machine mode, which is then printed to the console. The GetStatus() method is called to retrieve the current machine status, which is also printed to the console. The GetExecutionProgram() method is called to retrieve the name of the currently executing program on the machine, which is printed to the console. After printing the information, the program waits for 2 seconds using Thread.Sleep(2000) before the next iteration of the loop. Finally, in the finally block, the Focas handle is released using the cnc_freelibhndl function to free up resources when the program exits. private static void Console_CancelKeyPress ( object sender , ConsoleCancelEventArgs e ) { // Cancel the event to prevent termination e . Cancel = true ; // Exit the program gracefully Environment . Exit ( 0 ); } The Console_CancelKeyPress method is an event handler that is triggered when the Ctrl+C key is pressed or the terminal window is closed. It cancels the event ( e.Cancel = true ) to prevent immediate termination of the program. Then it gracefully exits the program using Environment.Exit(0) . public static string GetMode () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST mode = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , mode ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain mode data\" ); return \"\" ; } switch ( mode . aut ) { case 0 : return \"MDI\" ; case 1 : return \"MEM\" ; case 3 : return \"EDIT\" ; case 4 : return \"MPG\" ; case 5 : return \"JOG\" ; case 6 : return \"Teach in JOG\" ; case 7 : return \"Teach in HND\" ; case 8 : return \"INC\" ; case 9 : return \"REF\" ; case 10 : return \"RMT\" ; default : return \"UNAVAILABLE\" ; } } The GetMode() method retrieves the current machine mode. It first checks if a valid Focas handle exists. If not, it prints \"Get a handle\" and returns an empty string. It creates an instance of the Focas1.ODBST structure to store the mode information. Then it calls the cnc_statinfo function to retrieve the mode data using the Focas handle. The return value is stored in the _ret variable. If an error occurs during the retrieval (return value is not equal to 0), it prints \"Error: Cannot obtain mode data\" and returns an empty string. Otherwise, it uses a switch statement on the mode.aut value to determine the mode and returns the corresponding string representation. public static string GetStatus () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return \"\" ; } Focas1 . ODBST status = new Focas1 . ODBST (); _ret = Focas1 . cnc_statinfo ( _handle , status ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain status data\" ); return \"\" ; } switch ( status . run ) { case 0 : return \"*****\" ; case 1 : return \"STOP\" ; case 2 : return \"HOLD\" ; case 3 : return \"STRT\" ; case 4 : return \"MSTR\" ; default : return \"UNAVAILABLE\" ; } } The GetStatus() method retrieves the current machine status. It follows a similar structure as the GetMode() method. It first checks if a valid Focas handle exists. If not, it prints \"Get a handle\" and returns an empty string . It creates an instance of the Focas1.ODBST structure to store the status information. Then it calls the cnc_statinfo function to retrieve the status data using the Focas handle. The return value is stored in the _ret variable. If an error occurs during the retrieval (return value is not equal to 0), it prints \"Error: Cannot obtain status data\" and returns an empty string. Otherwise, it uses a switch statement on the status.run value to determine the status and returns the corresponding string representation. public static void GetExecutionProgram () { if ( _handle == 0 ) { Console . WriteLine ( \"Get a handle\" ); return ; } Focas1 . ODBEXEPRG prg_info = new Focas1 . ODBEXEPRG (); _ret = Focas1 . cnc_exeprgname ( _handle , prg_info ); if ( _ret != 0 ) { Console . WriteLine ( \"Error: Cannot obtain program data\" ); return ; } string programName = new string ( prg_info . name ). TrimEnd ( '\\0' ); Console . WriteLine ( $\"Executing Program Name: {programName}\" ); } } } The GetExecutionProgram() method retrieves the name of the currently executing program on the machine. It first checks if a valid Focas handle exists. If not, it prints \"Get a handle\" and returns. It creates an instance of the Focas1.ODBEXEPRG structure to store the program information. Then it calls the cnc_exeprgname function to retrieve the program data using the Focas handle. The return value is stored in the _ret variable. If an error occurs during the retrieval (return value is not equal to 0), it prints \"Error: Cannot obtain program data\" and returns. Otherwise, it converts the program name from a null-terminated character array to a string by creating a new string and trimming the null character ( '\\0' ) at the end. The program name is then printed to the console. That's a walkthrough of the provided code! It connects to a FANUC CNC machine, retrieves and prints information about the machine's mode, status, and active program in a continuous loop. It handles graceful program termination and cleanup when necessary.","title":"Explanation"},{"location":"General%20Knowledge/KPI%20in%20Manufacturing/","text":"KPI in Manufacturing Six Big Losses The Six Big Losses are a key concept in Total Productive Maintenance (TPM) and Overall Equipment Effectiveness (OEE). They represent the most common causes of efficiency loss in manufacturing. Here they are: Downtime Loss (Mapped to Availability in OEE) Breakdowns: These are instances of equipment failure that result in unscheduled downtime. They can be caused by tooling failures, unplanned maintenance, equipment breakdown, etc. Setup and Adjustments: This refers to the time taken to change over from one product variant to another. It includes setup and adjustment time during which the equipment is not operational. Idling and Small Stops: These are minor stops or pauses in the production process that are usually less than 5 minutes and do not require maintenance personnel. They can be caused by issues like a blocked sensor or a minor jam. Speed Loss (Mapped to Performance in OEE) Reduced Speed: This refers to instances where the machinery is operating, but not at its optimal speed. This could be due to wear and tear, equipment issues, or sub-optimal operating conditions. Defect Loss (Mapped to Quality in OEE) Startup Rejects: These are defects that occur during the startup phase of production. When equipment is first started, it may take a while for it to operate correctly, resulting in defective output. Production Rejects: These are defects that occur during steady-state production. Despite the equipment running as expected, there can still be quality losses due to factors like tool wear or process variation. Rework: These are defects that can be rectified by some rework. Scrap: These are defects that cannot be rectified and are scraped. By identifying and targeting these Six Big Losses, manufacturers can significantly improve their OEE and overall productivity.","title":"KPIs in Manufacturing"},{"location":"General%20Knowledge/KPI%20in%20Manufacturing/#kpi-in-manufacturing","text":"","title":"KPI in Manufacturing"},{"location":"General%20Knowledge/KPI%20in%20Manufacturing/#six-big-losses","text":"The Six Big Losses are a key concept in Total Productive Maintenance (TPM) and Overall Equipment Effectiveness (OEE). They represent the most common causes of efficiency loss in manufacturing. Here they are: Downtime Loss (Mapped to Availability in OEE) Breakdowns: These are instances of equipment failure that result in unscheduled downtime. They can be caused by tooling failures, unplanned maintenance, equipment breakdown, etc. Setup and Adjustments: This refers to the time taken to change over from one product variant to another. It includes setup and adjustment time during which the equipment is not operational. Idling and Small Stops: These are minor stops or pauses in the production process that are usually less than 5 minutes and do not require maintenance personnel. They can be caused by issues like a blocked sensor or a minor jam. Speed Loss (Mapped to Performance in OEE) Reduced Speed: This refers to instances where the machinery is operating, but not at its optimal speed. This could be due to wear and tear, equipment issues, or sub-optimal operating conditions. Defect Loss (Mapped to Quality in OEE) Startup Rejects: These are defects that occur during the startup phase of production. When equipment is first started, it may take a while for it to operate correctly, resulting in defective output. Production Rejects: These are defects that occur during steady-state production. Despite the equipment running as expected, there can still be quality losses due to factors like tool wear or process variation. Rework: These are defects that can be rectified by some rework. Scrap: These are defects that cannot be rectified and are scraped. By identifying and targeting these Six Big Losses, manufacturers can significantly improve their OEE and overall productivity.","title":"Six Big Losses"},{"location":"General%20Knowledge/OPC%20UA/","text":"OPC UA Introduction OPC UA (Open Platform Communications Unified Architecture) is a device-to-device communication protocol for industrial automation and industrial IoT (Internet of Things) applications. It is a widely adopted and standardized protocol designed to enable seamless and secure communication between various devices and systems in industrial environments. Here are some key aspects of OPC UA: Architecture: OPC UA follows a client-server architecture, where one or more clients communicate with one or more servers. Clients can request data, perform operations, and subscribe to real-time data from servers. Servers provide access to data and services and respond to client requests. Interoperability: OPC UA is designed to facilitate interoperability among devices and systems from different vendors. It provides a common framework for communication and data exchange, ensuring that different devices can communicate with each other regardless of the underlying hardware, operating system, or programming language. Data Modeling: OPC UA allows for flexible and extensible data modeling. It defines a standardized information model that enables the representation of various types of data, such as process data, alarms, events, historical data, and more. This modeling capability allows for consistent and meaningful data exchange between different systems. Security: Security is a crucial aspect of OPC UA. It incorporates robust security measures to protect the integrity, confidentiality, and authenticity of data exchanged between devices and systems. OPC UA supports encryption, authentication, access control, and secure channel establishment to ensure secure communication in industrial networks. Platform Independence: OPC UA is designed to be platform-independent, meaning it can run on different operating systems and hardware architectures. This flexibility allows OPC UA to be implemented in a wide range of devices, including sensors, programmable logic controllers (PLCs), human-machine interfaces (HMIs), and enterprise systems. Services and Functionality: OPC UA provides a rich set of services and functionality for various industrial automation scenarios. It supports services like data access, event subscriptions, method calls, historical data access, alarms, and more. These services enable real-time and historical data exchange, remote monitoring and control, and integration with higher-level enterprise systems. Scalability and Performance: OPC UA is designed to handle large-scale industrial systems and networks. It offers features like publish-subscribe communication patterns, high-performance data access, and support for efficient data compression. These capabilities allow OPC UA to scale to meet the requirements of diverse industrial environments. Overall, OPC UA is widely regarded as a robust and secure communication protocol for industrial automation. Its flexibility, interoperability, and standardized approach make it a preferred choice for integrating diverse devices, systems, and applications in industrial settings. Open62541 open62541 is an open-source implementation of the OPC UA (Open Platform Communications Unified Architecture) protocol stack. It provides a C-based library that enables developers to create OPC UA client and server applications. The name \"open62541\" comes from the fact that it adheres to the OPC UA specification and is implemented in C, and \"62541\" is the OPC UA specification number. Here are some key points about open62541: Open-Source Implementation: open62541 is an open-source project released under the Mozilla Public License (MPL) 2.0. This means that the source code is freely available, allowing developers to inspect, modify, and distribute it as per the terms of the license. OPC UA Compliance: open62541 aims to provide compliance with the OPC UA specifications defined by the OPC Foundation. It supports the core OPC UA features, including secure communication, data modeling, services, and functionality, to enable interoperability with other OPC UA compliant systems. C-Based Library: open62541 is implemented in C programming language, making it suitable for a wide range of platforms and environments. The library provides an API that developers can use to build OPC UA client and server applications from scratch or integrate OPC UA functionality into existing systems. Modularity and Customization: open62541 is designed with modularity in mind, allowing developers to enable or disable specific features based on their requirements. It offers flexibility in terms of configuring security policies, network transports, and data modeling options to adapt to various industrial scenarios. Scalability and Performance: open62541 is built to handle scalable and high-performance OPC UA applications. It utilizes asynchronous communication and multi-threading to handle multiple client connections efficiently. It also includes features like data exchange optimization, subscriptions, and history management to support real-time and historical data processing. Community and Support: open62541 has an active community of developers and contributors who provide support, bug fixes, and improvements to the project. The community forum and GitHub repository serve as platforms for discussions, issue tracking, and collaboration among users. Integration and Extensibility: open62541 can be integrated with various software platforms, frameworks, and hardware devices. It offers extensibility through plugins and custom extensions, enabling developers to add additional functionality or integrate with existing systems seamlessly. Overall, open62541 is a powerful open-source implementation of the OPC UA protocol stack, providing a flexible and customizable framework for building OPC UA client and server applications. It offers developers the tools and libraries to enable secure and interoperable communication in industrial automation and IoT environments. .Net Stack The Standard .NET OPC UA Stack is a software framework developed by the OPC Foundation for implementing OPC UA client and server applications using the .NET platform. It provides a set of libraries and tools that enable developers to build OPC UA compliant applications in the .NET environment. The Standard .NET OPC UA Stack and open62541 are both implementations of the OPC UA protocol stack, but they differ in terms of their programming language, platform compatibility, and specific features. Difference Between .Net Stack and open62541 Here are some key points highlighting the differences between the Standard .NET OPC UA Stack and open62541: Programming Language: The Standard .NET OPC UA Stack is implemented in C# and is specifically designed for the .NET platform, leveraging the features and capabilities of the .NET framework. On the other hand, open62541 is implemented in C and can be used on a broader range of platforms, including those that do not have native support for the .NET framework. Platform Compatibility: The Standard .NET OPC UA Stack is primarily intended for use with the .NET framework and is well-suited for developing OPC UA applications on Windows-based systems. It provides seamless integration with other .NET technologies and tools. In contrast, open62541 is designed to be platform-independent and can be used on various operating systems, including Windows, Linux, and others. Features and Functionality: Both implementations strive to comply with the OPC UA specifications defined by the OPC Foundation. However, there may be some differences in terms of specific features and functionality offered by each stack. The Standard .NET OPC UA Stack provides a rich set of APIs and tools that align closely with the .NET framework, making it easier to develop OPC UA applications within the .NET ecosystem. open62541, being a C-based library, offers flexibility and customization options and can be used in a wide range of scenarios. Community and Support: Both the Standard .NET OPC UA Stack and open62541 have active communities of developers and users. The OPC Foundation provides support and resources for the Standard .NET OPC UA Stack, including documentation, examples, and forums. open62541 also has an active community on GitHub, where users can collaborate, report issues, and contribute to the project. In summary, the Standard .NET OPC UA Stack and open62541 are both implementations of the OPC UA protocol stack, but they differ in terms of programming language, platform compatibility, and specific features. The choice between them depends on factors such as the targeted platform, programming language preference, and the specific requirements of the application. Extending OPC UA Servers When working with OPC UA servers, it is possible to create an extended server that inherits the nodes and parameters from another OPC UA server while introducing additional sets of nodes and parameters. This allows for the customization and expansion of functionality based on specific requirements. Can an OPC UA server extend another server by adding new nodes and parameters? Yes, it is possible to create an OPC UA server that extends another OPC UA server. By following server hierarchies and utilizing OPC UA's object-oriented models, an extended server can inherit the existing nodes and parameters from the base server while introducing new sets of nodes and parameters specific to the extended server. Handling requests for inherited and new nodes/parameters To achieve the desired behavior where the extended server can provide data from the inherited server for common nodes/parameters and its own data for new nodes/parameters, the following steps can be implemented: Handle requests for common nodes/parameters: When a client requests a common node or parameter that is inherited from the base server, the extended server acts as a proxy and forwards the request to the base server to retrieve the data. Respond to requests for new nodes/parameters: When a client requests a node or parameter that is specific to the extended server and not available in the base server, the extended server can handle those requests directly by providing the data from its own implementation. By implementing this logic, the extended OPC UA server seamlessly combines data from the inherited server and provides its own data for new nodes/parameters, delivering a unified and customized experience to OPC UA clients. Please note that the implementation details may vary depending on the OPC UA stack or framework being used. The specific APIs, methods, and event handlers provided by the stack will determine how to handle requests and retrieve data from the base server or the extended server's own implementation.","title":"Opc Ua"},{"location":"General%20Knowledge/OPC%20UA/#opc-ua","text":"","title":"OPC UA"},{"location":"General%20Knowledge/OPC%20UA/#introduction","text":"OPC UA (Open Platform Communications Unified Architecture) is a device-to-device communication protocol for industrial automation and industrial IoT (Internet of Things) applications. It is a widely adopted and standardized protocol designed to enable seamless and secure communication between various devices and systems in industrial environments. Here are some key aspects of OPC UA: Architecture: OPC UA follows a client-server architecture, where one or more clients communicate with one or more servers. Clients can request data, perform operations, and subscribe to real-time data from servers. Servers provide access to data and services and respond to client requests. Interoperability: OPC UA is designed to facilitate interoperability among devices and systems from different vendors. It provides a common framework for communication and data exchange, ensuring that different devices can communicate with each other regardless of the underlying hardware, operating system, or programming language. Data Modeling: OPC UA allows for flexible and extensible data modeling. It defines a standardized information model that enables the representation of various types of data, such as process data, alarms, events, historical data, and more. This modeling capability allows for consistent and meaningful data exchange between different systems. Security: Security is a crucial aspect of OPC UA. It incorporates robust security measures to protect the integrity, confidentiality, and authenticity of data exchanged between devices and systems. OPC UA supports encryption, authentication, access control, and secure channel establishment to ensure secure communication in industrial networks. Platform Independence: OPC UA is designed to be platform-independent, meaning it can run on different operating systems and hardware architectures. This flexibility allows OPC UA to be implemented in a wide range of devices, including sensors, programmable logic controllers (PLCs), human-machine interfaces (HMIs), and enterprise systems. Services and Functionality: OPC UA provides a rich set of services and functionality for various industrial automation scenarios. It supports services like data access, event subscriptions, method calls, historical data access, alarms, and more. These services enable real-time and historical data exchange, remote monitoring and control, and integration with higher-level enterprise systems. Scalability and Performance: OPC UA is designed to handle large-scale industrial systems and networks. It offers features like publish-subscribe communication patterns, high-performance data access, and support for efficient data compression. These capabilities allow OPC UA to scale to meet the requirements of diverse industrial environments. Overall, OPC UA is widely regarded as a robust and secure communication protocol for industrial automation. Its flexibility, interoperability, and standardized approach make it a preferred choice for integrating diverse devices, systems, and applications in industrial settings.","title":"Introduction"},{"location":"General%20Knowledge/OPC%20UA/#open62541","text":"open62541 is an open-source implementation of the OPC UA (Open Platform Communications Unified Architecture) protocol stack. It provides a C-based library that enables developers to create OPC UA client and server applications. The name \"open62541\" comes from the fact that it adheres to the OPC UA specification and is implemented in C, and \"62541\" is the OPC UA specification number. Here are some key points about open62541: Open-Source Implementation: open62541 is an open-source project released under the Mozilla Public License (MPL) 2.0. This means that the source code is freely available, allowing developers to inspect, modify, and distribute it as per the terms of the license. OPC UA Compliance: open62541 aims to provide compliance with the OPC UA specifications defined by the OPC Foundation. It supports the core OPC UA features, including secure communication, data modeling, services, and functionality, to enable interoperability with other OPC UA compliant systems. C-Based Library: open62541 is implemented in C programming language, making it suitable for a wide range of platforms and environments. The library provides an API that developers can use to build OPC UA client and server applications from scratch or integrate OPC UA functionality into existing systems. Modularity and Customization: open62541 is designed with modularity in mind, allowing developers to enable or disable specific features based on their requirements. It offers flexibility in terms of configuring security policies, network transports, and data modeling options to adapt to various industrial scenarios. Scalability and Performance: open62541 is built to handle scalable and high-performance OPC UA applications. It utilizes asynchronous communication and multi-threading to handle multiple client connections efficiently. It also includes features like data exchange optimization, subscriptions, and history management to support real-time and historical data processing. Community and Support: open62541 has an active community of developers and contributors who provide support, bug fixes, and improvements to the project. The community forum and GitHub repository serve as platforms for discussions, issue tracking, and collaboration among users. Integration and Extensibility: open62541 can be integrated with various software platforms, frameworks, and hardware devices. It offers extensibility through plugins and custom extensions, enabling developers to add additional functionality or integrate with existing systems seamlessly. Overall, open62541 is a powerful open-source implementation of the OPC UA protocol stack, providing a flexible and customizable framework for building OPC UA client and server applications. It offers developers the tools and libraries to enable secure and interoperable communication in industrial automation and IoT environments.","title":"Open62541"},{"location":"General%20Knowledge/OPC%20UA/#net-stack","text":"The Standard .NET OPC UA Stack is a software framework developed by the OPC Foundation for implementing OPC UA client and server applications using the .NET platform. It provides a set of libraries and tools that enable developers to build OPC UA compliant applications in the .NET environment. The Standard .NET OPC UA Stack and open62541 are both implementations of the OPC UA protocol stack, but they differ in terms of their programming language, platform compatibility, and specific features.","title":".Net Stack"},{"location":"General%20Knowledge/OPC%20UA/#difference-between-net-stack-and-open62541","text":"Here are some key points highlighting the differences between the Standard .NET OPC UA Stack and open62541: Programming Language: The Standard .NET OPC UA Stack is implemented in C# and is specifically designed for the .NET platform, leveraging the features and capabilities of the .NET framework. On the other hand, open62541 is implemented in C and can be used on a broader range of platforms, including those that do not have native support for the .NET framework. Platform Compatibility: The Standard .NET OPC UA Stack is primarily intended for use with the .NET framework and is well-suited for developing OPC UA applications on Windows-based systems. It provides seamless integration with other .NET technologies and tools. In contrast, open62541 is designed to be platform-independent and can be used on various operating systems, including Windows, Linux, and others. Features and Functionality: Both implementations strive to comply with the OPC UA specifications defined by the OPC Foundation. However, there may be some differences in terms of specific features and functionality offered by each stack. The Standard .NET OPC UA Stack provides a rich set of APIs and tools that align closely with the .NET framework, making it easier to develop OPC UA applications within the .NET ecosystem. open62541, being a C-based library, offers flexibility and customization options and can be used in a wide range of scenarios. Community and Support: Both the Standard .NET OPC UA Stack and open62541 have active communities of developers and users. The OPC Foundation provides support and resources for the Standard .NET OPC UA Stack, including documentation, examples, and forums. open62541 also has an active community on GitHub, where users can collaborate, report issues, and contribute to the project. In summary, the Standard .NET OPC UA Stack and open62541 are both implementations of the OPC UA protocol stack, but they differ in terms of programming language, platform compatibility, and specific features. The choice between them depends on factors such as the targeted platform, programming language preference, and the specific requirements of the application.","title":"Difference Between .Net Stack and open62541"},{"location":"General%20Knowledge/OPC%20UA/#extending-opc-ua-servers","text":"When working with OPC UA servers, it is possible to create an extended server that inherits the nodes and parameters from another OPC UA server while introducing additional sets of nodes and parameters. This allows for the customization and expansion of functionality based on specific requirements.","title":"Extending OPC UA Servers"},{"location":"General%20Knowledge/OPC%20UA/#can-an-opc-ua-server-extend-another-server-by-adding-new-nodes-and-parameters","text":"Yes, it is possible to create an OPC UA server that extends another OPC UA server. By following server hierarchies and utilizing OPC UA's object-oriented models, an extended server can inherit the existing nodes and parameters from the base server while introducing new sets of nodes and parameters specific to the extended server.","title":"Can an OPC UA server extend another server by adding new nodes and parameters?"},{"location":"General%20Knowledge/OPC%20UA/#handling-requests-for-inherited-and-new-nodesparameters","text":"To achieve the desired behavior where the extended server can provide data from the inherited server for common nodes/parameters and its own data for new nodes/parameters, the following steps can be implemented: Handle requests for common nodes/parameters: When a client requests a common node or parameter that is inherited from the base server, the extended server acts as a proxy and forwards the request to the base server to retrieve the data. Respond to requests for new nodes/parameters: When a client requests a node or parameter that is specific to the extended server and not available in the base server, the extended server can handle those requests directly by providing the data from its own implementation. By implementing this logic, the extended OPC UA server seamlessly combines data from the inherited server and provides its own data for new nodes/parameters, delivering a unified and customized experience to OPC UA clients. Please note that the implementation details may vary depending on the OPC UA stack or framework being used. The specific APIs, methods, and event handlers provided by the stack will determine how to handle requests and retrieve data from the base server or the extended server's own implementation.","title":"Handling requests for inherited and new nodes/parameters"},{"location":"Project%20Knowledge/KPI%20Calculations%20%28CMTI%29/","text":"OEE Metrics Since there is not much production going in CMTI, and due to lack of systematic method for manufacturing, we're are using a different approach to calculate the KPIs, which will not reflect the actual performance of the plant and machine, but for the sake of demonstration we have to do this. Let's explain the calculation with a sample data shown below: Machine Production Timeline: S.No Machine Name Start Time End Time Duration* Ideal Time Product Name Program Name Part Status 1. MCV - 450 31-05-2023T11:15:03 31-05-2023T11:17:09 126 120 CNC_DRILL_1 crank_feature_1 1 2. MCV - 450 31-05-2023T11:17:45 31-05-2023T11:19:22 127 120 CNC_DRILL_1 crank_feature_1 2 * Sometime the duration column in the above table will not be exactly equal to the difference between end and start time columns, reason is, the machine could have been stopped in the middle of production for minor adjustments, which could be seen in the machine status timeline table. Part Status Desctiption Table: Id (PK) Part Status Description Category 1. Good This denotes the part is of good quality and was manufactured according the given tolerances good 2. rework_start_up This denotes the part is was of bad quality but it could be made good by rework, it was part of the start up phase of the production, where fault will be usually high loss_start_up 3. scrap_start_up This denotes the part is was of bad quality and cannot be reworked, it was part of the start up phase of the production, where fault will be usually high loss_start_up 4. rework_production This denotes the part is was of bad quality but it could be made good by rework, it was part of the production phase of the production, where fault will be usually low loss_production 5. scrap_production This denotes the part is was of bad quality and cannot be reworked, it was part of the production phase of the production, where fault will be usually low loss_production Machine Status Timeline: S.No Machine Name Start Time End Time Duration Machine State Label Label Value 1. MCV - 450 31-05-2023T11:15:03 31-05-2023T11:17:09 126 production program name crank_feature_1 2. MCV - 450 31-05-2023T11:17:09 31-05-2023T11:17:45 36 idle reason setup_and_adjustments 3. MCV - 450 31-05-2023T11:17:45 31-05-2023T11:19:22 127 production program name crank_feature_1 Planned Event Timeline: S.No Date Shift Start Time End Time Duration (s) 1. 31/05/2023 1 31-05-2023T8:00:00 31-05-2023T4:00:00 28800 Availability The formula for availability is given by: \\[ \\text{Availability} = \\frac{\\text{Actual Production Time}}{\\text{Planned Production Time}} \\] Let's say we want to find the availability between Start time : 31-05-2023T11:15:03 End time: 31-05-2023T11:19:22 Find the planned production time for the given duration: We can see that from the planned event timeline, the query start and end datetime falls under prodution (full time), hence the planned production time for the given query time duration is the query time duration itself (which is 31-05-2023T11:19:22 - 31-05-2023T11:15:03 = 289 s). \\[ \\text{Planned Production Time} = \\text{289} \\] Find the Actual Production Time: The actual production time is given by summation of duration column in the Machine Production Timeline table for all rows where the start and end time is within the query range. For example in the current case: 126 + 127 = 253 seconds. \\[ \\text{Actual Production Time} = \\text{253} \\] Find Availability: By substituting in the previous formula we can find the value \\[ \\text{Availability} = \\frac{\\text{253}}{\\text{289}} \\] \\[ \\text{Availability} = {\\text{0.8754}} \\] \\[ \\text{Availability \\%} = {\\text{87.54 \\%}} \\] Performance The formula for Performance is given by: \\[ \\text{Performance} = \\frac{\\text{Ideal Production Time}}{\\text{Actual Production Time}} \\] Find Ideal Production Time: The ideal production time is determined by summing up the ideal cycle times for all the cycles that occurred between the given start and end time. For the solution deployed at cmti, this is available in the machine production timeline table, with the column name of Ideal Time . The collector which collects the data from the machine, will give a dummy data for this by taking a value that is between 90 % and 98 % of the actual duration time. This is something that we have to do, since there is no systematic way to get the ideal time in the current set up at cmti, and since we have to demonstrate a prototype we use some same value. \\[ \\text{Ideal Production Time} = \\sum \\text{Ideal Cycle Times for All Cycles during the given Query Range} \\] For example in the previous case, the following would be applicable 120 + 120 = 240 \\[ \\text{Ideal Production Time } = {\\text{240}} \\] The actual production time is already found in previous metric(Availability): Find Performance \\[ \\text{Performance} = \\frac{\\text{Ideal Production Time}}{\\text{Actual Production Time}} \\] \\[ \\text{Performance} = \\frac{\\text{240}}{\\text{253}} \\] \\[ \\text{Performance} = {\\text{0.9486}} \\] \\[ \\text{Performance \\%} = {\\text{94.86 \\%}} \\] Quality The formula for Quality is given by \\[ \\text{Quality} = \\frac{\\text{Good Parts Produced}}{\\text{Total Parts Produced}} \\] Total Parts: This can be calculated by querying the table of machine production timeline, the total count equal to the number of rows with column 'Machine State' equal to production and The number of good parts is equal to the number of rows where the rejected is not equal to 'No'. For example in the above case \\[ \\text{Quality} = \\frac{\\text{2}}{\\text{2}} \\] \\[ \\text{Quality } = {\\text{1}} \\] \\[ \\text{Quality \\%} = {\\text{100 \\%}} \\] Overall Equipment Effectiveness (OEE) The formula for OEE is given by \\[ \\text{OEE} = {\\text{Availability}}\\times{\\text{Performance}}\\times{\\text{Quality}} \\] \\[ \\text{OEE} = {\\text{0.8754}}\\times{\\text{0.9486}}\\times{\\text{1}} \\] \\[ \\text{OEE} = {\\text{0.8304}} \\] \\[ \\text{OEE \\%} = {\\text{83.04 \\%}} \\] Six Big Losses The Six Big Losses are a key concept in Total Productive Maintenance (TPM) and Overall Equipment Effectiveness (OEE). They represent the most common causes of efficiency loss in manufacturing. Here they are: Downtime Loss (Mapped to Availability in OEE) Breakdowns: These are instances of equipment failure that result in unscheduled downtime. They can be caused by tooling failures, unplanned maintenance, equipment breakdown, etc. Setup and Adjustments: This refers to the time taken to change over from one product variant to another. It includes setup and adjustment time during which the equipment is not operational. Idling and Small Stops: These refer to minor stops or pauses in the production process that last for less than 5 minutes and do not require maintenance personnel. They can occur due to issues like a blocked sensor, a minor jam, or idle time during part changeover. It is the collector's responsibility to accurately identify the reason for the machine's idle state. One simple method is to categorize durations less than 5 minutes as \"Idling and Small Stops,\" durations between 5 minutes and 2 hours as \"Setup and Adjustments,\" and durations exceeding 2 hours as \"Breakdowns.\" Calculation: To calculate the losses associated with these conditions within a specific time range, we need to query the Machine Status Timeline table for that range, focusing on entries where the Machine State column indicates an idle or off condition. For cumulative downtime, we sum the duration values across all corresponding rows related to the above conditions. To obtain individual values, we further filter the rows based on the label column, using the following criteria: Breakdowns: Select entries where the machine state is idle or off, and the label value is breakdown . Setup and Adjustments: Select entries where the machine state is idle or off, and the label value is setup and adjustments . Idling and Small Stops: Select entries where the machine state is idle or off, and the label value is idling and small stops . Speed Loss (Mapped to Performance in OEE) Reduced Speed: This refers to instances where the machinery is operating, but not at its optimal speed. This could be due to wear and tear, equipment issues, or sub-optimal operating conditions. Calculation: The formula for reeduced speed loss is given by the following formula, and it is almost similar to calculation of performance \\[ \\text{Reduced Speed Loss} = \\frac{\\text{Actual Production Time - Ideal Production Time}}{\\text{Actual Production Time}} \\] Defect Loss (Mapped to Quality in OEE) Startup Rejects: These are defects that occur during the startup phase of production. When equipment is first started, it may take a while for it to operate correctly, resulting in defective output. Calculation: To determine the start-up reject loss within a given time range, you can refer to the Machine Production Timeline table. By filtering out the rows with a Part Status column value of either 2 or 3, corresponding to rework_start_up or scrap_start_up in the Part Status Description Table, you can identify the start-up reject instances. Let's assume there are 3 such rows. To calculate the start-up reject loss, you need to consider the total number of parts produced during that time range, which includes both good and bad parts. This can be determined by counting the total number of rows in the table within the specified time range, let's say it's 10. The start-up reject loss can then be calculated as follows: \\[ \\text{Startup Rejects Loss} = \\frac{\\text{Bad Parts Produced During Start Up}}{\\text{Total Parts Produced}} \\] \\[ \\text{Startup Rejects Loss} = \\frac{\\text{3}}{\\text{10}} \\] \\[ \\text{Startup Rejects Loss \\%} = \\text{30 \\%} \\] Production Rejects: These are defects that occur during steady-state production. Despite the equipment running as expected, there can still be quality losses due to factors like tool wear or process variation. Calculation: To determine the start-up reject loss within a given time range, you can refer to the Machine Production Timeline table. By filtering out the rows with a Part Status column value of either 4 or 5, corresponding to rework_production or scrap_production in the Part Status Description Table, you can identify the production reject instances. Let's assume there are 2 such rows. To calculate the production reject loss, you need to consider the total number of parts produced during that time range, which includes both good and bad parts. This can be determined by counting the total number of rows in the table within the specified time range, let's say it's 10. The production reject loss can then be calculated as follows: \\[ \\text{Production Rejects Loss} = \\frac{\\text{Bad Parts Produced During Production}}{\\text{Total Parts Produced}} \\] \\[ \\text{Production Rejects Loss} = \\frac{\\text{2}}{\\text{10}} \\] \\[ \\text{Production Rejects Loss \\%} = \\text{20 \\%} \\] To classify the losses into rework and scrap categories, we can apply additional filtering based on the Part Status column value. Specifically, we can include values 2, 3, 4, or 5, which correspond to different types of losses: rework loss during start-up, scrap loss during start-up, rework loss during production, and scrap loss during production, respectively. By filtering the Part Status column to only include these values, we can further categorize the losses accordingly. By identifying and targeting these Six Big Losses, manufacturers can significantly improve their OEE and overall productivity.","title":"KPIs Calculations (CMTI)"},{"location":"Project%20Knowledge/KPI%20Calculations%20%28CMTI%29/#oee-metrics","text":"Since there is not much production going in CMTI, and due to lack of systematic method for manufacturing, we're are using a different approach to calculate the KPIs, which will not reflect the actual performance of the plant and machine, but for the sake of demonstration we have to do this. Let's explain the calculation with a sample data shown below: Machine Production Timeline: S.No Machine Name Start Time End Time Duration* Ideal Time Product Name Program Name Part Status 1. MCV - 450 31-05-2023T11:15:03 31-05-2023T11:17:09 126 120 CNC_DRILL_1 crank_feature_1 1 2. MCV - 450 31-05-2023T11:17:45 31-05-2023T11:19:22 127 120 CNC_DRILL_1 crank_feature_1 2 * Sometime the duration column in the above table will not be exactly equal to the difference between end and start time columns, reason is, the machine could have been stopped in the middle of production for minor adjustments, which could be seen in the machine status timeline table. Part Status Desctiption Table: Id (PK) Part Status Description Category 1. Good This denotes the part is of good quality and was manufactured according the given tolerances good 2. rework_start_up This denotes the part is was of bad quality but it could be made good by rework, it was part of the start up phase of the production, where fault will be usually high loss_start_up 3. scrap_start_up This denotes the part is was of bad quality and cannot be reworked, it was part of the start up phase of the production, where fault will be usually high loss_start_up 4. rework_production This denotes the part is was of bad quality but it could be made good by rework, it was part of the production phase of the production, where fault will be usually low loss_production 5. scrap_production This denotes the part is was of bad quality and cannot be reworked, it was part of the production phase of the production, where fault will be usually low loss_production Machine Status Timeline: S.No Machine Name Start Time End Time Duration Machine State Label Label Value 1. MCV - 450 31-05-2023T11:15:03 31-05-2023T11:17:09 126 production program name crank_feature_1 2. MCV - 450 31-05-2023T11:17:09 31-05-2023T11:17:45 36 idle reason setup_and_adjustments 3. MCV - 450 31-05-2023T11:17:45 31-05-2023T11:19:22 127 production program name crank_feature_1 Planned Event Timeline: S.No Date Shift Start Time End Time Duration (s) 1. 31/05/2023 1 31-05-2023T8:00:00 31-05-2023T4:00:00 28800","title":"OEE Metrics"},{"location":"Project%20Knowledge/KPI%20Calculations%20%28CMTI%29/#availability","text":"The formula for availability is given by: \\[ \\text{Availability} = \\frac{\\text{Actual Production Time}}{\\text{Planned Production Time}} \\] Let's say we want to find the availability between Start time : 31-05-2023T11:15:03 End time: 31-05-2023T11:19:22 Find the planned production time for the given duration: We can see that from the planned event timeline, the query start and end datetime falls under prodution (full time), hence the planned production time for the given query time duration is the query time duration itself (which is 31-05-2023T11:19:22 - 31-05-2023T11:15:03 = 289 s). \\[ \\text{Planned Production Time} = \\text{289} \\] Find the Actual Production Time: The actual production time is given by summation of duration column in the Machine Production Timeline table for all rows where the start and end time is within the query range. For example in the current case: 126 + 127 = 253 seconds. \\[ \\text{Actual Production Time} = \\text{253} \\] Find Availability: By substituting in the previous formula we can find the value \\[ \\text{Availability} = \\frac{\\text{253}}{\\text{289}} \\] \\[ \\text{Availability} = {\\text{0.8754}} \\] \\[ \\text{Availability \\%} = {\\text{87.54 \\%}} \\]","title":"Availability"},{"location":"Project%20Knowledge/KPI%20Calculations%20%28CMTI%29/#performance","text":"The formula for Performance is given by: \\[ \\text{Performance} = \\frac{\\text{Ideal Production Time}}{\\text{Actual Production Time}} \\] Find Ideal Production Time: The ideal production time is determined by summing up the ideal cycle times for all the cycles that occurred between the given start and end time. For the solution deployed at cmti, this is available in the machine production timeline table, with the column name of Ideal Time . The collector which collects the data from the machine, will give a dummy data for this by taking a value that is between 90 % and 98 % of the actual duration time. This is something that we have to do, since there is no systematic way to get the ideal time in the current set up at cmti, and since we have to demonstrate a prototype we use some same value. \\[ \\text{Ideal Production Time} = \\sum \\text{Ideal Cycle Times for All Cycles during the given Query Range} \\] For example in the previous case, the following would be applicable 120 + 120 = 240 \\[ \\text{Ideal Production Time } = {\\text{240}} \\] The actual production time is already found in previous metric(Availability): Find Performance \\[ \\text{Performance} = \\frac{\\text{Ideal Production Time}}{\\text{Actual Production Time}} \\] \\[ \\text{Performance} = \\frac{\\text{240}}{\\text{253}} \\] \\[ \\text{Performance} = {\\text{0.9486}} \\] \\[ \\text{Performance \\%} = {\\text{94.86 \\%}} \\]","title":"Performance"},{"location":"Project%20Knowledge/KPI%20Calculations%20%28CMTI%29/#quality","text":"The formula for Quality is given by \\[ \\text{Quality} = \\frac{\\text{Good Parts Produced}}{\\text{Total Parts Produced}} \\] Total Parts: This can be calculated by querying the table of machine production timeline, the total count equal to the number of rows with column 'Machine State' equal to production and The number of good parts is equal to the number of rows where the rejected is not equal to 'No'. For example in the above case \\[ \\text{Quality} = \\frac{\\text{2}}{\\text{2}} \\] \\[ \\text{Quality } = {\\text{1}} \\] \\[ \\text{Quality \\%} = {\\text{100 \\%}} \\]","title":"Quality"},{"location":"Project%20Knowledge/KPI%20Calculations%20%28CMTI%29/#overall-equipment-effectiveness-oee","text":"The formula for OEE is given by \\[ \\text{OEE} = {\\text{Availability}}\\times{\\text{Performance}}\\times{\\text{Quality}} \\] \\[ \\text{OEE} = {\\text{0.8754}}\\times{\\text{0.9486}}\\times{\\text{1}} \\] \\[ \\text{OEE} = {\\text{0.8304}} \\] \\[ \\text{OEE \\%} = {\\text{83.04 \\%}} \\]","title":"Overall Equipment Effectiveness (OEE)"},{"location":"Project%20Knowledge/KPI%20Calculations%20%28CMTI%29/#six-big-losses","text":"The Six Big Losses are a key concept in Total Productive Maintenance (TPM) and Overall Equipment Effectiveness (OEE). They represent the most common causes of efficiency loss in manufacturing. Here they are: Downtime Loss (Mapped to Availability in OEE) Breakdowns: These are instances of equipment failure that result in unscheduled downtime. They can be caused by tooling failures, unplanned maintenance, equipment breakdown, etc. Setup and Adjustments: This refers to the time taken to change over from one product variant to another. It includes setup and adjustment time during which the equipment is not operational. Idling and Small Stops: These refer to minor stops or pauses in the production process that last for less than 5 minutes and do not require maintenance personnel. They can occur due to issues like a blocked sensor, a minor jam, or idle time during part changeover. It is the collector's responsibility to accurately identify the reason for the machine's idle state. One simple method is to categorize durations less than 5 minutes as \"Idling and Small Stops,\" durations between 5 minutes and 2 hours as \"Setup and Adjustments,\" and durations exceeding 2 hours as \"Breakdowns.\" Calculation: To calculate the losses associated with these conditions within a specific time range, we need to query the Machine Status Timeline table for that range, focusing on entries where the Machine State column indicates an idle or off condition. For cumulative downtime, we sum the duration values across all corresponding rows related to the above conditions. To obtain individual values, we further filter the rows based on the label column, using the following criteria: Breakdowns: Select entries where the machine state is idle or off, and the label value is breakdown . Setup and Adjustments: Select entries where the machine state is idle or off, and the label value is setup and adjustments . Idling and Small Stops: Select entries where the machine state is idle or off, and the label value is idling and small stops . Speed Loss (Mapped to Performance in OEE) Reduced Speed: This refers to instances where the machinery is operating, but not at its optimal speed. This could be due to wear and tear, equipment issues, or sub-optimal operating conditions. Calculation: The formula for reeduced speed loss is given by the following formula, and it is almost similar to calculation of performance \\[ \\text{Reduced Speed Loss} = \\frac{\\text{Actual Production Time - Ideal Production Time}}{\\text{Actual Production Time}} \\] Defect Loss (Mapped to Quality in OEE) Startup Rejects: These are defects that occur during the startup phase of production. When equipment is first started, it may take a while for it to operate correctly, resulting in defective output. Calculation: To determine the start-up reject loss within a given time range, you can refer to the Machine Production Timeline table. By filtering out the rows with a Part Status column value of either 2 or 3, corresponding to rework_start_up or scrap_start_up in the Part Status Description Table, you can identify the start-up reject instances. Let's assume there are 3 such rows. To calculate the start-up reject loss, you need to consider the total number of parts produced during that time range, which includes both good and bad parts. This can be determined by counting the total number of rows in the table within the specified time range, let's say it's 10. The start-up reject loss can then be calculated as follows: \\[ \\text{Startup Rejects Loss} = \\frac{\\text{Bad Parts Produced During Start Up}}{\\text{Total Parts Produced}} \\] \\[ \\text{Startup Rejects Loss} = \\frac{\\text{3}}{\\text{10}} \\] \\[ \\text{Startup Rejects Loss \\%} = \\text{30 \\%} \\] Production Rejects: These are defects that occur during steady-state production. Despite the equipment running as expected, there can still be quality losses due to factors like tool wear or process variation. Calculation: To determine the start-up reject loss within a given time range, you can refer to the Machine Production Timeline table. By filtering out the rows with a Part Status column value of either 4 or 5, corresponding to rework_production or scrap_production in the Part Status Description Table, you can identify the production reject instances. Let's assume there are 2 such rows. To calculate the production reject loss, you need to consider the total number of parts produced during that time range, which includes both good and bad parts. This can be determined by counting the total number of rows in the table within the specified time range, let's say it's 10. The production reject loss can then be calculated as follows: \\[ \\text{Production Rejects Loss} = \\frac{\\text{Bad Parts Produced During Production}}{\\text{Total Parts Produced}} \\] \\[ \\text{Production Rejects Loss} = \\frac{\\text{2}}{\\text{10}} \\] \\[ \\text{Production Rejects Loss \\%} = \\text{20 \\%} \\] To classify the losses into rework and scrap categories, we can apply additional filtering based on the Part Status column value. Specifically, we can include values 2, 3, 4, or 5, which correspond to different types of losses: rework loss during start-up, scrap loss during start-up, rework loss during production, and scrap loss during production, respectively. By filtering the Part Status column to only include these values, we can further categorize the losses accordingly. By identifying and targeting these Six Big Losses, manufacturers can significantly improve their OEE and overall productivity.","title":"Six Big Losses"},{"location":"Project%20Knowledge/KPI%20Calculations/","text":"OEE Metrics Let's explain the calculation with a sample data shown below: Machine Status Timeline: S.No Machine Name Start Time End Time Duration Machine State Label Label Value Rejected Part 1. MCV - 450 31-05-2023T11:15:03 31-05-2023T11:17:09 126 production program name crank_feature_1 no 2. MCV - 450 31-05-2023T11:17:09 31-05-2023T11:17:45 36 idle reason part_change nil 3. MCV - 450 31-05-2023T11:17:45 31-05-2023T11:19:22 127 production program name crank_feature_1 no Planned Event Timeline: S.No Date Shift Start Time End Time Duration (s) 1. 31/05/2023 1 31-05-2023T8:00:00 31-05-2023T4:00:00 28800 Part Program Meta Data: S.No Machine Name Program Name Ideal Cycle Time (s) 1. MCV - 450 crank_feature_1 120 Availability The formula for availability is given by: \\[ \\text{Availability} = \\frac{\\text{Actual Production Time}}{\\text{Planned Production Time}} \\] Let's say we want to find the availability between Start time : 31-05-2023T11:15:03 End time: 31-05-2023T11:19:22 Find the planned production time for the given duration: We can see that from the planned event timeline, the query start and end datetime falls under prodution (full time), hence the planned production time for the given query time duration is the query time duration itself (which is 31-05-2023T11:19:22 - 31-05-2023T11:15:03 = 289 s). \\[ \\text{Planned Production Time} = \\text{289} \\] Find the Actual Production Time: The actual production time is given by summation of duration column in the Machine Status Timeline table for all rows where the machine state column has value production. For example in the current case: 126 + 127 = 253 seconds. \\[ \\text{Actual Production Time} = \\text{253} \\] Find Availability: By substituting in the previous formula we can find the value \\[ \\text{Availability} = \\frac{\\text{253}}{\\text{289}} \\] \\[ \\text{Availability} = {\\text{0.8754}} \\] \\[ \\text{Availability \\%} = {\\text{87.54 \\%}} \\] Performance The formula for Performance is given by: \\[ \\text{Performance} = \\frac{\\text{Ideal Production Time}}{\\text{Actual Production Time}} \\] Find Ideal Production Time: The ideal production time is determined by summing up the ideal cycle times for all the cycles that occurred between the given start and end time. To calculate this, we require information from two tables. First, we utilize the machine status time line table, which provides the start and end times of all the cycles that took place within the specified query start and end time, along with the corresponding part program name for each cycle. Secondly, we need to access the Part Program Meta Data table to obtain the ideal cycle time associated with each part program name. Once we have this information, we can add up the ideal cycle times to obtain the ideal production time. It is important to note that performing a SQL join operation on these two tables is necessary to accomplish this calculation. \\[ \\text{Ideal Production Time} = \\sum \\text{Ideal Cycle Times for All Cycles during the given Query Range} \\] For example in the previous case, the following table gives all the production cycles along with the part program name Machine Status Timeline: S.no Machine Name Start Time End Time Duration Machine State Label Label Value 1. MCV - 450 31-05-2023T11:15:03 31-05-2023T11:17:09 126 production program name crank_feature_1 3. MCV - 450 31-05-2023T11:17:45 31-05-2023T11:19:22 127 production program name crank_feature_1 The corresponding part program name is given below: Part Program Meta Data: S.No Machine Name Program Name Ideal Cycle Time (s) 1. MCV - 450 crank_feature_1 120 Hence the sum would be 120 + 120 = 240 \\[ \\text{Ideal Production Time } = {\\text{240}} \\] Sometime the ideal part program cycle time would not be available, it is the end user / developers responsibility to somehow update the values (Such as in cmti, it is not available, since we don't usually use cam softwares here.) One possible strategy is to update the part program's ideal cycle time to be equal to the minimum value of the set of cycle times (from the machine status timeline table, from duration column, when the machine state is production), at least this will ensure that we're comparing the cycle time to the lowest that was achieved by the machine. The actual production time is already found in previous metric(Availability): Find Performance \\[ \\text{Performance} = \\frac{\\text{Ideal Production Time}}{\\text{Actual Production Time}} \\] \\[ \\text{Performance} = \\frac{\\text{240}}{\\text{253}} \\] \\[ \\text{Performance} = {\\text{0.9486}} \\] \\[ \\text{Performance \\%} = {\\text{94.86 \\%}} \\] Quality The formula for Quality is given by \\[ \\text{Quality} = \\frac{\\text{Good Parts Produced}}{\\text{Total Parts Produced}} \\] Total Parts: This can be calculated by querying the table of machine status timeline, the total count equal to the number of rows with column 'Machine State' equal to production and The number of good parts is equal to the number of rows where the rejected is not equal to 'No'. For example in the above case \\[ \\text{Quality} = \\frac{\\text{2}}{\\text{2}} \\] \\[ \\text{Quality } = {\\text{1}} \\] \\[ \\text{Quality \\%} = {\\text{100 \\%}} \\] Overall Equipment Effectiveness (OEE) The formula for OEE is given by \\[ \\text{OEE} = {\\text{Availability}}\\times{\\text{Performance}}\\times{\\text{Quality}} \\] \\[ \\text{OEE} = {\\text{0.8754}}\\times{\\text{0.9486}}\\times{\\text{1}} \\] \\[ \\text{OEE} = {\\text{0.8304}} \\] \\[ \\text{OEE \\%} = {\\text{83.04 \\%}} \\] Six Big Losses The Six Big Losses are a key concept in Total Productive Maintenance (TPM) and Overall Equipment Effectiveness (OEE). They represent the most common causes of efficiency loss in manufacturing. Here they are: Downtime Loss (Mapped to Availability in OEE) Breakdowns: These are instances of equipment failure that result in unscheduled downtime. They can be caused by tooling failures, unplanned maintenance, equipment breakdown, etc. Setup and Adjustments: This refers to the time taken to change over from one product variant to another. It includes setup and adjustment time during which the equipment is not operational. Idling and Small Stops: These are minor stops or pauses in the production process that are usually less than 5 minutes and do not require maintenance personnel. They can be caused by issues like a blocked sensor or a minor jam. Speed Loss (Mapped to Performance in OEE) Reduced Speed: This refers to instances where the machinery is operating, but not at its optimal speed. This could be due to wear and tear, equipment issues, or sub-optimal operating conditions. Defect Loss (Mapped to Quality in OEE) Startup Rejects: These are defects that occur during the startup phase of production. When equipment is first started, it may take a while for it to operate correctly, resulting in defective output. Production Rejects: These are defects that occur during steady-state production. Despite the equipment running as expected, there can still be quality losses due to factors like tool wear or process variation. Rework: These are defects that can be rectified by some rework. Scrap: These are defects that cannot be rectified and are scraped. By identifying and targeting these Six Big Losses, manufacturers can significantly improve their OEE and overall productivity.","title":"KPIs Calculations"},{"location":"Project%20Knowledge/KPI%20Calculations/#oee-metrics","text":"Let's explain the calculation with a sample data shown below: Machine Status Timeline: S.No Machine Name Start Time End Time Duration Machine State Label Label Value Rejected Part 1. MCV - 450 31-05-2023T11:15:03 31-05-2023T11:17:09 126 production program name crank_feature_1 no 2. MCV - 450 31-05-2023T11:17:09 31-05-2023T11:17:45 36 idle reason part_change nil 3. MCV - 450 31-05-2023T11:17:45 31-05-2023T11:19:22 127 production program name crank_feature_1 no Planned Event Timeline: S.No Date Shift Start Time End Time Duration (s) 1. 31/05/2023 1 31-05-2023T8:00:00 31-05-2023T4:00:00 28800 Part Program Meta Data: S.No Machine Name Program Name Ideal Cycle Time (s) 1. MCV - 450 crank_feature_1 120","title":"OEE Metrics"},{"location":"Project%20Knowledge/KPI%20Calculations/#availability","text":"The formula for availability is given by: \\[ \\text{Availability} = \\frac{\\text{Actual Production Time}}{\\text{Planned Production Time}} \\] Let's say we want to find the availability between Start time : 31-05-2023T11:15:03 End time: 31-05-2023T11:19:22 Find the planned production time for the given duration: We can see that from the planned event timeline, the query start and end datetime falls under prodution (full time), hence the planned production time for the given query time duration is the query time duration itself (which is 31-05-2023T11:19:22 - 31-05-2023T11:15:03 = 289 s). \\[ \\text{Planned Production Time} = \\text{289} \\] Find the Actual Production Time: The actual production time is given by summation of duration column in the Machine Status Timeline table for all rows where the machine state column has value production. For example in the current case: 126 + 127 = 253 seconds. \\[ \\text{Actual Production Time} = \\text{253} \\] Find Availability: By substituting in the previous formula we can find the value \\[ \\text{Availability} = \\frac{\\text{253}}{\\text{289}} \\] \\[ \\text{Availability} = {\\text{0.8754}} \\] \\[ \\text{Availability \\%} = {\\text{87.54 \\%}} \\]","title":"Availability"},{"location":"Project%20Knowledge/KPI%20Calculations/#performance","text":"The formula for Performance is given by: \\[ \\text{Performance} = \\frac{\\text{Ideal Production Time}}{\\text{Actual Production Time}} \\] Find Ideal Production Time: The ideal production time is determined by summing up the ideal cycle times for all the cycles that occurred between the given start and end time. To calculate this, we require information from two tables. First, we utilize the machine status time line table, which provides the start and end times of all the cycles that took place within the specified query start and end time, along with the corresponding part program name for each cycle. Secondly, we need to access the Part Program Meta Data table to obtain the ideal cycle time associated with each part program name. Once we have this information, we can add up the ideal cycle times to obtain the ideal production time. It is important to note that performing a SQL join operation on these two tables is necessary to accomplish this calculation. \\[ \\text{Ideal Production Time} = \\sum \\text{Ideal Cycle Times for All Cycles during the given Query Range} \\] For example in the previous case, the following table gives all the production cycles along with the part program name Machine Status Timeline: S.no Machine Name Start Time End Time Duration Machine State Label Label Value 1. MCV - 450 31-05-2023T11:15:03 31-05-2023T11:17:09 126 production program name crank_feature_1 3. MCV - 450 31-05-2023T11:17:45 31-05-2023T11:19:22 127 production program name crank_feature_1 The corresponding part program name is given below: Part Program Meta Data: S.No Machine Name Program Name Ideal Cycle Time (s) 1. MCV - 450 crank_feature_1 120 Hence the sum would be 120 + 120 = 240 \\[ \\text{Ideal Production Time } = {\\text{240}} \\] Sometime the ideal part program cycle time would not be available, it is the end user / developers responsibility to somehow update the values (Such as in cmti, it is not available, since we don't usually use cam softwares here.) One possible strategy is to update the part program's ideal cycle time to be equal to the minimum value of the set of cycle times (from the machine status timeline table, from duration column, when the machine state is production), at least this will ensure that we're comparing the cycle time to the lowest that was achieved by the machine. The actual production time is already found in previous metric(Availability): Find Performance \\[ \\text{Performance} = \\frac{\\text{Ideal Production Time}}{\\text{Actual Production Time}} \\] \\[ \\text{Performance} = \\frac{\\text{240}}{\\text{253}} \\] \\[ \\text{Performance} = {\\text{0.9486}} \\] \\[ \\text{Performance \\%} = {\\text{94.86 \\%}} \\]","title":"Performance"},{"location":"Project%20Knowledge/KPI%20Calculations/#quality","text":"The formula for Quality is given by \\[ \\text{Quality} = \\frac{\\text{Good Parts Produced}}{\\text{Total Parts Produced}} \\] Total Parts: This can be calculated by querying the table of machine status timeline, the total count equal to the number of rows with column 'Machine State' equal to production and The number of good parts is equal to the number of rows where the rejected is not equal to 'No'. For example in the above case \\[ \\text{Quality} = \\frac{\\text{2}}{\\text{2}} \\] \\[ \\text{Quality } = {\\text{1}} \\] \\[ \\text{Quality \\%} = {\\text{100 \\%}} \\]","title":"Quality"},{"location":"Project%20Knowledge/KPI%20Calculations/#overall-equipment-effectiveness-oee","text":"The formula for OEE is given by \\[ \\text{OEE} = {\\text{Availability}}\\times{\\text{Performance}}\\times{\\text{Quality}} \\] \\[ \\text{OEE} = {\\text{0.8754}}\\times{\\text{0.9486}}\\times{\\text{1}} \\] \\[ \\text{OEE} = {\\text{0.8304}} \\] \\[ \\text{OEE \\%} = {\\text{83.04 \\%}} \\]","title":"Overall Equipment Effectiveness (OEE)"},{"location":"Project%20Knowledge/KPI%20Calculations/#six-big-losses","text":"The Six Big Losses are a key concept in Total Productive Maintenance (TPM) and Overall Equipment Effectiveness (OEE). They represent the most common causes of efficiency loss in manufacturing. Here they are: Downtime Loss (Mapped to Availability in OEE) Breakdowns: These are instances of equipment failure that result in unscheduled downtime. They can be caused by tooling failures, unplanned maintenance, equipment breakdown, etc. Setup and Adjustments: This refers to the time taken to change over from one product variant to another. It includes setup and adjustment time during which the equipment is not operational. Idling and Small Stops: These are minor stops or pauses in the production process that are usually less than 5 minutes and do not require maintenance personnel. They can be caused by issues like a blocked sensor or a minor jam. Speed Loss (Mapped to Performance in OEE) Reduced Speed: This refers to instances where the machinery is operating, but not at its optimal speed. This could be due to wear and tear, equipment issues, or sub-optimal operating conditions. Defect Loss (Mapped to Quality in OEE) Startup Rejects: These are defects that occur during the startup phase of production. When equipment is first started, it may take a while for it to operate correctly, resulting in defective output. Production Rejects: These are defects that occur during steady-state production. Despite the equipment running as expected, there can still be quality losses due to factors like tool wear or process variation. Rework: These are defects that can be rectified by some rework. Scrap: These are defects that cannot be rectified and are scraped. By identifying and targeting these Six Big Losses, manufacturers can significantly improve their OEE and overall productivity.","title":"Six Big Losses"},{"location":"Project%20Knowledge/Machines/","text":"Overview of Machines at CMTI Introduction This section will have information about the different machines available at cmti, such as their information model, method for getting data etc Mac Power Mono 200 The machine details are given below: S.No Title Information 1 Machine Name Mac Power Mono 200 2. Machine Builder Mac Power 3. Model Mono 200 4. Type Turning Center 5. Controller Seimens 6. Controller Model 828D Information Model 1. ACTUAL_PART_COUNT_MONO-200 2. Alarm 2.1. ALARM 2.2. ALARM_NUMBER_MONO-200 2.3. ALARM_TEXTINDEX_MONO-200 2.4. ALARM_TIME_MONO-200 3. CNC 3.1. CNC_MODE_MONO-200 3.2. CNC_STATE_MONO-200 4. CUTTING_TIME_MONO-200 5. Cycle 5.1. CYCLE_RUNNING_MONO-200 5.2. CYCLE_START_PB_MONO-200 5.3. CYCLE_STOP_PB_MONO-200 5.4. CYCLE_TIME_MONO-200 6. DISCONNECT 7. Disconnect_MONO-200 8. Emergency 8.1. EMERGENCY 8.2. EMERGENCY_SIGNAL_MONO-200 9. MANUAL 10. NC 10.1. NC_CHANNEL_RESET_MONO-200 10.2. NC_RUNNING_MONO-200 10.3. NC_STOP_MONO-200 11. OPERATE 12. OPERATING_TIME_MONO-200 13. OperatorID 14. PROG_NAME_MONO-200 15. Product 15.1. ProductName 15.2. ProductResultNumber 15.3. ProductSerialNumber 16. Servo 16.1. Feedrate 16.1.1. SERVO_AXIS_X_FEEDRATE_MONO-200 16.1.2. SERVO_AXIS_Z_FEEDRATE_MONO-200 16.2. Load 16.2.1. SERVO_DRIVE_LOAD_MONO-200 16.3. Position 16.3.1. SERVO_AXIS_X_POSITION_MONO-200 16.3.2. SERVO_AXIS_Z_POSITION_MONO-200 17. Spindle 17.1. Load 17.1.1. SPINDLE_ACT_LOAD_MONO-200 17.2. Speed 17.2.1. SPINDLE_ACT_SPEED_MONO-200 18. STOP 19. SUSPEND 20. TOOL_NO_MONO-200 21. WARMUP 22. WARNING AMS MCV - 450 The machine details are given below: S.No Title Information 1. Machine Name AMS MCV - 450 2. Machine Builder AMS(ACE MANUFACTURING SYSTEMS) 3. Model MCV - 450 4. Type Milling Center 5. Controller Fanuc 6. Controller Model 0i - Mf Plus 7. Ip Address 172.18.30.147 Information Model 1. ALARM 2. Position 1. Absolute Position 1. AbsPos_0_path1_MCV-450 2. AbsPos_1_path1_MCV-450 3. AbsPos_2_path1_MCV-450 2. Relative Position 1. RelPos_0_path1_MCV-450 2. RelPos_1_path1_MCV-450 3. RelPos_2_path1_MCV-450 3. Machine Position 1. McnPos_0_path1_MCV-450 2. McnPos_1_path1_MCV-450 3. McnPos_2_path1_MCV-450 3. Comment 1. ActComment_path1_MCV-450 4. Actual F 1. ActF_path1_MCV-450 5. Actual FDec 1. ActFdec_path1_MCV-450 6. Actual Program 1. ActProgram_path1_MCV-450 7. Actual S 1. ActS_path1_MCV-450 8. Battery 1. APC 1. Low (APC Battery Low APC could refer to automatic pallet changer - Automatic pallet changers are devices that transfer loads from one pallet to another in a fast and gentle way. They are used to increase productivity, efficiency and flexibility in various industries such as logistics, manufacturing, packaging and machining. Some CNC machines have automatic pallet changers that allow them to switch between different workpieces or parts without interrupting the machining process. This reduces the downtime and increases the output of the CNC machines. Doubt) 1. ApcBatLow_0_path1_MCV-450 2. ApcBatLow_1_path1_MCV-450 3. ApcBatLow_2_path1_MCV-450 2. Zero 1. ApcBatZero_0_path1_MCV-450 2. ApcBatZero_1_path1_MCV-450 3. ApcBatZero_2_path1_MCV-450 2. CNC 1. Low 1. CncBatLow_0_path1_MCV-450 2. CncBatLow_1_path1_MCV-450 3. CncBatLow_2_path1_MCV-450 3. Ind Bat Zero (InductoSync Battery Voltage) 1. IndBatZero_0_path1_MCV-450 2. IndBatZero_1_path1_MCV-450 3. IndBatZero_2_path1_MCV-450 4. S Spd Battery Zero (Serial Separate Detector Battery Voltage) 1. SSpdBatZero_0_path1_MCV-450 2. SSpdBatZero_1_path1_MCV-450 3. SSpdBatZero_2_path1_MCV-450 5. S Spd Battery Zero (Separate Detector Battery Voltage) 1. SpdBatZero_0_path1_MCV-450 2. SpdBatZero_1_path1_MCV-450 3. SpdBatZero_2_path1_MCV-450 9. CNC Fan 1. Speed 1. CncFan1Speed_path1_MCV-450 2. CncFan2Speed_path1_MCV-450 3. CncFan3Speed_path1_MCV-450 4. CncFan4Speed_path1_MCV-450 2. Status 1. CncFan1Status_path1_MCV-450 2. CncFan2Status_path1_MCV-450 3. CncFan3Status_path1_MCV-450 4. CncFan4Status_path1_MCV-450 10. CNC State 1. CncState_path1_MCV-450 11. CNC Warning 1. CncWarning_path1_MCV-450 12. Cut Time 1. CutTime_path1_MCV-450 13. DISCONNECT 14. Disconnect_MCV-450 15. EMERGENCY 16. EMG_path1_MCV-450 17. Inside Fan 1. Spindle 1. Amp (In CNC (Computer Numerical Control) machines, a spindle amplifier is an electronic component that controls the speed and torque of the spindle motor. The spindle motor is a critical component of the machine, and its speed and torque must be carefully controlled during operation to achieve accurate cuts and other machining operations. The spindle amplifier is responsible for receiving signals from the CNC controller and converting them into the appropriate output signals to control the spindle motor. The amplifier typically uses pulse width modulation (PWM) to control the power delivered to the motor, and it may also use feedback from sensors to monitor and adjust the motor's speed and torque. The spindle amplifier may be integrated into the CNC machine's control system, or it may be a separate standalone component. The specific design and capabilities of the spindle amplifier can vary depending on the machine's requirements, but it is typically designed to provide precise control over the spindle motor's speed and torque, as well as protection against overloading and other potential issues. In summary, the spindle amplifier is an important component of CNC machines that plays a critical role in controlling the speed and torque of the spindle motor, which is essential for achieving accurate and precise machining operations. CNC machines often have a fan or other cooling system to help regulate the temperature of the spindle amplifier.) 1. Speed 1. InFan1SpindleAmpSpeed_0_path1_MCV-450 2. InFan2SpindleAmpSpeed_0_path1_MCV-450 2. Status 1. InFan1SpindleAmpStatus_0_path1_MCV-450 2. InFan2SpindleAmpStatus_0_path1_MCV-450 2. Com Pw (Common Power) (Spindle motor common power inside cooling fan) 1. Speed 1. InFan1SpdlComPwSpeed_0_path1_MCV-450 2. InFan2SpdlComPwSpeed_0_path1_MCV-450 2. Status 1. InFan1SpdlComPwStatus_0_path1_MCV-450 2. InFan2SpdlComPwStatus_0_path1_MCV-450 2. Servo 1. Amp 1. Speed 1. Fan 1 1. InFan1SrvAmpSpeed_0_path1_MCV-450 2. InFan1SrvAmpSpeed_1_path1_MCV-450 3. InFan1SrvAmpSpeed_2_path1_MCV-450 2. Fan 2 1. InFan2SrvAmpSpeed_0_path1_MCV-450 2. InFan2SrvAmpSpeed_1_path1_MCV-450 3. InFan2SrvAmpSpeed_2_path1_MCV-450 2. Status 1. Fan 1 1. InFan1SrvAmpStatus_0_path1_MCV-450 2. InFan1SrvAmpStatus_1_path1_MCV-450 3. InFan1SrvAmpStatus_2_path1_MCV-450 2. Fan 2 1. InFan2SrvAmpStatus_0_path1_MCV-450 2. InFan2SrvAmpStatus_1_path1_MCV-450 3. InFan2SrvAmpStatus_2_path1_MCV-450 2. Com Pw (Common Power) (Spindle motor common power inside cooling fan) 1. Speed 1. Fan 1 1. InFan1SrvComPwSpeed_0_path1_MCV-450 2. InFan1SrvComPwSpeed_1_path1_MCV-450 3. InFan1SrvComPwSpeed_2_path1_MCV-450 2. Fan 2 1. InFan2SrvComPwSpeed_0_path1_MCV-450 2. InFan2SrvComPwSpeed_1_path1_MCV-450 3. InFan2SrvComPwSpeed_2_path1_MCV-450 2. Status 1. Fan 1 1. InFan1SrvComPwStatus_0_path1_MCV-450 2. InFan1SrvComPwStatus_1_path1_MCV-450 3. InFan1SrvComPwStatus_2_path1_MCV-450 2. Fan 2 1. InFan2SrvComPwStatus_0_path1_MCV-450 2. InFan2SrvComPwStatus_1_path1_MCV-450 3. InFan2SrvComPwStatus_2_path1_MCV-450 18. MANUAL 19. Macro Variable 1. MacroVar_575_path1_MCV-450 2. MacroVar_576_path1_MCV-450 20. Main Comment 1. MainComment_path1_MCV-450 21. Main Program 1. MainProgram_path1_MCV-450 22. Modal 1. ModalF_path1_MCV-450 2. ModalM2_path1_MCV-450 3. ModalM3_path1_MCV-450 4. ModalM_path1_MCV-450 5. ModalS_path1_MCV-450 6. ModalT_path1_MCV-450 23. Mode 1. Mode_path1_MCV-450 24. OPERATE 25. OperatorID 26. Override 1. Override_path1_MCV-450 27. Total Number of parts Made 1. PartsNumAll_path1_MCV-450 28. Parts made in this session (after the machine was turned on currently). Doubt 1. PartsNum_path1_MCV-450 29. Power On time 1. PowOnTime_path1_MCV-450 30. Product Data 1. Product Name 1. ProductName 2. Product Result Number 1. ProductResultNumber 3. Product Serial Number 1. ProductSerialNumber 31. Encoder Temperature 1. PulseCoderTemp_0_path1_MCV-450 2. PulseCoderTemp_1_path1_MCV-450 3. PulseCoderTemp_2_path1_MCV-450 32. Radiator Fan 1. Spdl 1. Amplifier 1. Speed 1. RadFan1SpindleAmpSpeed_0_path1_MCV-450 2. RadFan2SpindleAmpSpeed_0_path1_MCV-450 2. Status 1. RadFan1SpindleAmpStatus_0_path1_MCV-450 2. RadFan2SpindleAmpStatus_0_path1_MCV-450 2. Com Pw 1. Speed 1. RadFan1SpdlComPwSpeed_0_path1_MCV-450 2. RadFan2SpdlComPwSpeed_0_path1_MCV-450 2. Status 1. RadFan1SpdlComPwStatus_0_path1_MCV-450 2. RadFan2SpdlComPwStatus_0_path1_MCV-450 2. Servo 1. Amplifier 1. Speed 1. Fan 1 1. RadFan1SrvAmpSpeed_0_path1_MCV-450 2. RadFan1SrvAmpSpeed_1_path1_MCV-450 3. RadFan1SrvAmpSpeed_2_path1_MCV-450 2. Fan 2 1. RadFan2SrvAmpSpeed_0_path1_MCV-450 2. RadFan2SrvAmpSpeed_1_path1_MCV-450 3. RadFan2SrvAmpSpeed_2_path1_MCV-450 2. Status 1. Fan 1 1. RadFan1SrvAmpStatus_0_path1_MCV-450 2. RadFan1SrvAmpStatus_1_path1_MCV-450 3. RadFan1SrvAmpStatus_2_path1_MCV-450 2. Fan 2 1. RadFan2SrvAmpStatus_0_path1_MCV-450 2. RadFan2SrvAmpStatus_1_path1_MCV-450 3. RadFan2SrvAmpStatus_2_path1_MCV-450 2. Com Pw 1. Speed 1. Fan 1 1. RadFan1SrvComPwSpeed_0_path1_MCV-450 2. RadFan1SrvComPwSpeed_1_path1_MCV-450 3. RadFan1SrvComPwSpeed_2_path1_MCV-450 2. Fan 2 1. RadFan2SrvComPwSpeed_0_path1_MCV-450 2. RadFan2SrvComPwSpeed_1_path1_MCV-450 3. RadFan2SrvComPwSpeed_2_path1_MCV-450 2. Status 1. Fan 1 1. RadFan1SrvComPwStatus_0_path1_MCV-450 2. RadFan1SrvComPwStatus_1_path1_MCV-450 3. RadFan1SrvComPwStatus_2_path1_MCV-450 2. Fan 2 1. RadFan2SrvComPwStatus_0_path1_MCV-450 2. RadFan2SrvComPwStatus_1_path1_MCV-450 3. RadFan2SrvComPwStatus_2_path1_MCV-450 33. Run Time 1. RunTime_path1_MCV-450 34. STOP 35. SUSPEND 36. Sequence 1. Sequence_path1_MCV-450 37. Servo 1. Current 1. Percentage (Servo Current Percentage parameter might be related to the servo current percentage of the Fanuc controller. Servo current is the amount of electric current that flows through the servo motor, which controls the movement of the machine axes. The parameter value might indicate how much of the maximum servo current is being used by the controller.) 1. ServoCurrentPer_0_path1_MCV-450 2. ServoCurrentPer_1_path1_MCV-450 3. ServoCurrentPer_2_path1_MCV-450 2. Value (Servo Current ) 1. ServoCurrent_0_path1_MCV-450 2. ServoCurrent_1_path1_MCV-450 3. ServoCurrent_2_path1_MCV-450 2. Error 1. ServoError_0_path1_MCV-450 2. ServoError_1_path1_MCV-450 3. ServoError_2_path1_MCV-450 38. Servo 1. Leak Resistance (Servo leak resistance is a measure of how much the servo motor resists unwanted movement or vibration when it is not powered. Maybe this parameter is used to calibrate or monitor the servo leak resistance of your machine. It could also be servo insulation resistance which is a measure of how well the servo motor is insulated from electric currents that could damage it or cause interference. Maybe this parameter is used to check or adjust the servo insulation resistance of your machine.) 1. ServoLeakResistData_0_path1_MCV-450 2. ServoLeakResistData_1_path1_MCV-450 3. ServoLeakResistData_2_path1_MCV-450 2. Load 1. ServoLoad_0_path1_MCV-450 2. ServoLoad_1_path1_MCV-450 3. ServoLoad_2_path1_MCV-450 3. Speed 1. ServoSpeed_0_path1_MCV-450 2. ServoSpeed_1_path1_MCV-450 3. ServoSpeed_2_path1_MCV-450 4. Temperature 1. ServoTemp_0_path1_MCV-450 2. ServoTemp_1_path1_MCV-450 3. ServoTemp_2_path1_MCV-450 39. Signal Related Parameters (unknown) 1. SigAL_path1_MCV-450 2. SigCUT_path1_MCV-450 3. SigDM00_path1_MCV-450 4. SigDM01_path1_MCV-450 5. SigENB_0_path1_MCV-450 6. SigINP_0_path1_MCV-450 7. SigINP_1_path1_MCV-450 8. SigINP_2_path1_MCV-450 9. SigMDRN_path1_MCV-450 10. SigOP_path1_MCV-450 11. SigSBK_path1_MCV-450 12. SigSPL_path1_MCV-450 13. SigSTL_path1_MCV-450 40. Spindle 1. Leak Resistance 1. SpindleLeakResistData_0_path1_MCV-450 2. Load 1. SpindleLoad_0_path1_MCV-450 3. Speed 1. SpindleSpeed_0_path1_MCV-450 4. Temperature 1. SpindleTemp_0_path1_MCV-450 5. Total Revolution 1. SpindleTotalRev1_0_path1_MCV-450 2. SpindleTotalRev2_0_path1_MCV-450 41. WARMUP 42. WARNING Mazak Mazatech H-400N The machine details are given below: S.No Title Information 1. Machine Name Mazak Mazatech H-400N 2. Machine Builder Machine Builder 3. Model H-400 N (Mazatech line of machining centers) 4. Type Milling Machine 5. Controller Fanuc 6. Controller Type 0i -md series 7. Ip Address 172.18.30.157 8. Mac Address 00E0E41B3630 9. Application Layer for Communication Focas Overview of Mazak Mazak is a prominent global manufacturer of machine tools, with a rich history dating back to its establishment in Japan in 1919. Over the years, the company has expanded its operations worldwide and has become a renowned name in the industry. Mazatech: Precision and Versatility in Machining Centers Mazatech is a specialized product line within Mazak that focuses on the development and production of machining centers. These machines are highly regarded for their precision, versatility, and advanced features, making them suitable for a wide range of machining applications. Introducing the H-400N Machining Center The H-400N is a specific model within the Mazatech line of machining centers. While detailed specifications about this particular model are not available due to the training data limitations up until September 2021, it is inferred that the H-400N is designed to handle medium to large-scale machining operations. It is likely optimized for high-speed and high-precision applications. Fanuc: Leading the Industry in CNC Systems Fanuc is a well-known Japanese company specializing in the manufacturing of industrial robots, CNC systems, and factory automation solutions. They are a major supplier of CNC systems to various machine tool manufacturers, including Mazak. Exploring the Fanuc 0i -md Series The 0i -md series refers to a specific family or generation of Fanuc CNC systems. The \"0i\" represents the overall series or platform, while the \"-md\" indicates its specific focus on milling and drilling applications. Fanuc 0i CNC systems are renowned for their reliability, user-friendly interface, and advanced capabilities, providing precise control over the machining process. Note on Variations and Updates It is important to note that the specific capabilities, features, and technical specifications of the Mazak H-400N and the Fanuc 0i -md series may vary, as machine models and CNC systems often offer different configurations and options. For the most accurate and up-to-date information, it is recommended to consult the official Mazak and Fanuc websites or reach out to their representatives directly.","title":"Machines"},{"location":"Project%20Knowledge/Machines/#overview-of-machines-at-cmti","text":"","title":"Overview of Machines at CMTI"},{"location":"Project%20Knowledge/Machines/#introduction","text":"This section will have information about the different machines available at cmti, such as their information model, method for getting data etc","title":"Introduction"},{"location":"Project%20Knowledge/Machines/#mac-power-mono-200","text":"The machine details are given below: S.No Title Information 1 Machine Name Mac Power Mono 200 2. Machine Builder Mac Power 3. Model Mono 200 4. Type Turning Center 5. Controller Seimens 6. Controller Model 828D","title":"Mac Power Mono 200"},{"location":"Project%20Knowledge/Machines/#information-model","text":"1. ACTUAL_PART_COUNT_MONO-200 2. Alarm 2.1. ALARM 2.2. ALARM_NUMBER_MONO-200 2.3. ALARM_TEXTINDEX_MONO-200 2.4. ALARM_TIME_MONO-200 3. CNC 3.1. CNC_MODE_MONO-200 3.2. CNC_STATE_MONO-200 4. CUTTING_TIME_MONO-200 5. Cycle 5.1. CYCLE_RUNNING_MONO-200 5.2. CYCLE_START_PB_MONO-200 5.3. CYCLE_STOP_PB_MONO-200 5.4. CYCLE_TIME_MONO-200 6. DISCONNECT 7. Disconnect_MONO-200 8. Emergency 8.1. EMERGENCY 8.2. EMERGENCY_SIGNAL_MONO-200 9. MANUAL 10. NC 10.1. NC_CHANNEL_RESET_MONO-200 10.2. NC_RUNNING_MONO-200 10.3. NC_STOP_MONO-200 11. OPERATE 12. OPERATING_TIME_MONO-200 13. OperatorID 14. PROG_NAME_MONO-200 15. Product 15.1. ProductName 15.2. ProductResultNumber 15.3. ProductSerialNumber 16. Servo 16.1. Feedrate 16.1.1. SERVO_AXIS_X_FEEDRATE_MONO-200 16.1.2. SERVO_AXIS_Z_FEEDRATE_MONO-200 16.2. Load 16.2.1. SERVO_DRIVE_LOAD_MONO-200 16.3. Position 16.3.1. SERVO_AXIS_X_POSITION_MONO-200 16.3.2. SERVO_AXIS_Z_POSITION_MONO-200 17. Spindle 17.1. Load 17.1.1. SPINDLE_ACT_LOAD_MONO-200 17.2. Speed 17.2.1. SPINDLE_ACT_SPEED_MONO-200 18. STOP 19. SUSPEND 20. TOOL_NO_MONO-200 21. WARMUP 22. WARNING","title":"Information Model"},{"location":"Project%20Knowledge/Machines/#ams-mcv-450","text":"The machine details are given below: S.No Title Information 1. Machine Name AMS MCV - 450 2. Machine Builder AMS(ACE MANUFACTURING SYSTEMS) 3. Model MCV - 450 4. Type Milling Center 5. Controller Fanuc 6. Controller Model 0i - Mf Plus 7. Ip Address 172.18.30.147","title":"AMS MCV - 450"},{"location":"Project%20Knowledge/Machines/#information-model_1","text":"1. ALARM 2. Position 1. Absolute Position 1. AbsPos_0_path1_MCV-450 2. AbsPos_1_path1_MCV-450 3. AbsPos_2_path1_MCV-450 2. Relative Position 1. RelPos_0_path1_MCV-450 2. RelPos_1_path1_MCV-450 3. RelPos_2_path1_MCV-450 3. Machine Position 1. McnPos_0_path1_MCV-450 2. McnPos_1_path1_MCV-450 3. McnPos_2_path1_MCV-450 3. Comment 1. ActComment_path1_MCV-450 4. Actual F 1. ActF_path1_MCV-450 5. Actual FDec 1. ActFdec_path1_MCV-450 6. Actual Program 1. ActProgram_path1_MCV-450 7. Actual S 1. ActS_path1_MCV-450 8. Battery 1. APC 1. Low (APC Battery Low APC could refer to automatic pallet changer - Automatic pallet changers are devices that transfer loads from one pallet to another in a fast and gentle way. They are used to increase productivity, efficiency and flexibility in various industries such as logistics, manufacturing, packaging and machining. Some CNC machines have automatic pallet changers that allow them to switch between different workpieces or parts without interrupting the machining process. This reduces the downtime and increases the output of the CNC machines. Doubt) 1. ApcBatLow_0_path1_MCV-450 2. ApcBatLow_1_path1_MCV-450 3. ApcBatLow_2_path1_MCV-450 2. Zero 1. ApcBatZero_0_path1_MCV-450 2. ApcBatZero_1_path1_MCV-450 3. ApcBatZero_2_path1_MCV-450 2. CNC 1. Low 1. CncBatLow_0_path1_MCV-450 2. CncBatLow_1_path1_MCV-450 3. CncBatLow_2_path1_MCV-450 3. Ind Bat Zero (InductoSync Battery Voltage) 1. IndBatZero_0_path1_MCV-450 2. IndBatZero_1_path1_MCV-450 3. IndBatZero_2_path1_MCV-450 4. S Spd Battery Zero (Serial Separate Detector Battery Voltage) 1. SSpdBatZero_0_path1_MCV-450 2. SSpdBatZero_1_path1_MCV-450 3. SSpdBatZero_2_path1_MCV-450 5. S Spd Battery Zero (Separate Detector Battery Voltage) 1. SpdBatZero_0_path1_MCV-450 2. SpdBatZero_1_path1_MCV-450 3. SpdBatZero_2_path1_MCV-450 9. CNC Fan 1. Speed 1. CncFan1Speed_path1_MCV-450 2. CncFan2Speed_path1_MCV-450 3. CncFan3Speed_path1_MCV-450 4. CncFan4Speed_path1_MCV-450 2. Status 1. CncFan1Status_path1_MCV-450 2. CncFan2Status_path1_MCV-450 3. CncFan3Status_path1_MCV-450 4. CncFan4Status_path1_MCV-450 10. CNC State 1. CncState_path1_MCV-450 11. CNC Warning 1. CncWarning_path1_MCV-450 12. Cut Time 1. CutTime_path1_MCV-450 13. DISCONNECT 14. Disconnect_MCV-450 15. EMERGENCY 16. EMG_path1_MCV-450 17. Inside Fan 1. Spindle 1. Amp (In CNC (Computer Numerical Control) machines, a spindle amplifier is an electronic component that controls the speed and torque of the spindle motor. The spindle motor is a critical component of the machine, and its speed and torque must be carefully controlled during operation to achieve accurate cuts and other machining operations. The spindle amplifier is responsible for receiving signals from the CNC controller and converting them into the appropriate output signals to control the spindle motor. The amplifier typically uses pulse width modulation (PWM) to control the power delivered to the motor, and it may also use feedback from sensors to monitor and adjust the motor's speed and torque. The spindle amplifier may be integrated into the CNC machine's control system, or it may be a separate standalone component. The specific design and capabilities of the spindle amplifier can vary depending on the machine's requirements, but it is typically designed to provide precise control over the spindle motor's speed and torque, as well as protection against overloading and other potential issues. In summary, the spindle amplifier is an important component of CNC machines that plays a critical role in controlling the speed and torque of the spindle motor, which is essential for achieving accurate and precise machining operations. CNC machines often have a fan or other cooling system to help regulate the temperature of the spindle amplifier.) 1. Speed 1. InFan1SpindleAmpSpeed_0_path1_MCV-450 2. InFan2SpindleAmpSpeed_0_path1_MCV-450 2. Status 1. InFan1SpindleAmpStatus_0_path1_MCV-450 2. InFan2SpindleAmpStatus_0_path1_MCV-450 2. Com Pw (Common Power) (Spindle motor common power inside cooling fan) 1. Speed 1. InFan1SpdlComPwSpeed_0_path1_MCV-450 2. InFan2SpdlComPwSpeed_0_path1_MCV-450 2. Status 1. InFan1SpdlComPwStatus_0_path1_MCV-450 2. InFan2SpdlComPwStatus_0_path1_MCV-450 2. Servo 1. Amp 1. Speed 1. Fan 1 1. InFan1SrvAmpSpeed_0_path1_MCV-450 2. InFan1SrvAmpSpeed_1_path1_MCV-450 3. InFan1SrvAmpSpeed_2_path1_MCV-450 2. Fan 2 1. InFan2SrvAmpSpeed_0_path1_MCV-450 2. InFan2SrvAmpSpeed_1_path1_MCV-450 3. InFan2SrvAmpSpeed_2_path1_MCV-450 2. Status 1. Fan 1 1. InFan1SrvAmpStatus_0_path1_MCV-450 2. InFan1SrvAmpStatus_1_path1_MCV-450 3. InFan1SrvAmpStatus_2_path1_MCV-450 2. Fan 2 1. InFan2SrvAmpStatus_0_path1_MCV-450 2. InFan2SrvAmpStatus_1_path1_MCV-450 3. InFan2SrvAmpStatus_2_path1_MCV-450 2. Com Pw (Common Power) (Spindle motor common power inside cooling fan) 1. Speed 1. Fan 1 1. InFan1SrvComPwSpeed_0_path1_MCV-450 2. InFan1SrvComPwSpeed_1_path1_MCV-450 3. InFan1SrvComPwSpeed_2_path1_MCV-450 2. Fan 2 1. InFan2SrvComPwSpeed_0_path1_MCV-450 2. InFan2SrvComPwSpeed_1_path1_MCV-450 3. InFan2SrvComPwSpeed_2_path1_MCV-450 2. Status 1. Fan 1 1. InFan1SrvComPwStatus_0_path1_MCV-450 2. InFan1SrvComPwStatus_1_path1_MCV-450 3. InFan1SrvComPwStatus_2_path1_MCV-450 2. Fan 2 1. InFan2SrvComPwStatus_0_path1_MCV-450 2. InFan2SrvComPwStatus_1_path1_MCV-450 3. InFan2SrvComPwStatus_2_path1_MCV-450 18. MANUAL 19. Macro Variable 1. MacroVar_575_path1_MCV-450 2. MacroVar_576_path1_MCV-450 20. Main Comment 1. MainComment_path1_MCV-450 21. Main Program 1. MainProgram_path1_MCV-450 22. Modal 1. ModalF_path1_MCV-450 2. ModalM2_path1_MCV-450 3. ModalM3_path1_MCV-450 4. ModalM_path1_MCV-450 5. ModalS_path1_MCV-450 6. ModalT_path1_MCV-450 23. Mode 1. Mode_path1_MCV-450 24. OPERATE 25. OperatorID 26. Override 1. Override_path1_MCV-450 27. Total Number of parts Made 1. PartsNumAll_path1_MCV-450 28. Parts made in this session (after the machine was turned on currently). Doubt 1. PartsNum_path1_MCV-450 29. Power On time 1. PowOnTime_path1_MCV-450 30. Product Data 1. Product Name 1. ProductName 2. Product Result Number 1. ProductResultNumber 3. Product Serial Number 1. ProductSerialNumber 31. Encoder Temperature 1. PulseCoderTemp_0_path1_MCV-450 2. PulseCoderTemp_1_path1_MCV-450 3. PulseCoderTemp_2_path1_MCV-450 32. Radiator Fan 1. Spdl 1. Amplifier 1. Speed 1. RadFan1SpindleAmpSpeed_0_path1_MCV-450 2. RadFan2SpindleAmpSpeed_0_path1_MCV-450 2. Status 1. RadFan1SpindleAmpStatus_0_path1_MCV-450 2. RadFan2SpindleAmpStatus_0_path1_MCV-450 2. Com Pw 1. Speed 1. RadFan1SpdlComPwSpeed_0_path1_MCV-450 2. RadFan2SpdlComPwSpeed_0_path1_MCV-450 2. Status 1. RadFan1SpdlComPwStatus_0_path1_MCV-450 2. RadFan2SpdlComPwStatus_0_path1_MCV-450 2. Servo 1. Amplifier 1. Speed 1. Fan 1 1. RadFan1SrvAmpSpeed_0_path1_MCV-450 2. RadFan1SrvAmpSpeed_1_path1_MCV-450 3. RadFan1SrvAmpSpeed_2_path1_MCV-450 2. Fan 2 1. RadFan2SrvAmpSpeed_0_path1_MCV-450 2. RadFan2SrvAmpSpeed_1_path1_MCV-450 3. RadFan2SrvAmpSpeed_2_path1_MCV-450 2. Status 1. Fan 1 1. RadFan1SrvAmpStatus_0_path1_MCV-450 2. RadFan1SrvAmpStatus_1_path1_MCV-450 3. RadFan1SrvAmpStatus_2_path1_MCV-450 2. Fan 2 1. RadFan2SrvAmpStatus_0_path1_MCV-450 2. RadFan2SrvAmpStatus_1_path1_MCV-450 3. RadFan2SrvAmpStatus_2_path1_MCV-450 2. Com Pw 1. Speed 1. Fan 1 1. RadFan1SrvComPwSpeed_0_path1_MCV-450 2. RadFan1SrvComPwSpeed_1_path1_MCV-450 3. RadFan1SrvComPwSpeed_2_path1_MCV-450 2. Fan 2 1. RadFan2SrvComPwSpeed_0_path1_MCV-450 2. RadFan2SrvComPwSpeed_1_path1_MCV-450 3. RadFan2SrvComPwSpeed_2_path1_MCV-450 2. Status 1. Fan 1 1. RadFan1SrvComPwStatus_0_path1_MCV-450 2. RadFan1SrvComPwStatus_1_path1_MCV-450 3. RadFan1SrvComPwStatus_2_path1_MCV-450 2. Fan 2 1. RadFan2SrvComPwStatus_0_path1_MCV-450 2. RadFan2SrvComPwStatus_1_path1_MCV-450 3. RadFan2SrvComPwStatus_2_path1_MCV-450 33. Run Time 1. RunTime_path1_MCV-450 34. STOP 35. SUSPEND 36. Sequence 1. Sequence_path1_MCV-450 37. Servo 1. Current 1. Percentage (Servo Current Percentage parameter might be related to the servo current percentage of the Fanuc controller. Servo current is the amount of electric current that flows through the servo motor, which controls the movement of the machine axes. The parameter value might indicate how much of the maximum servo current is being used by the controller.) 1. ServoCurrentPer_0_path1_MCV-450 2. ServoCurrentPer_1_path1_MCV-450 3. ServoCurrentPer_2_path1_MCV-450 2. Value (Servo Current ) 1. ServoCurrent_0_path1_MCV-450 2. ServoCurrent_1_path1_MCV-450 3. ServoCurrent_2_path1_MCV-450 2. Error 1. ServoError_0_path1_MCV-450 2. ServoError_1_path1_MCV-450 3. ServoError_2_path1_MCV-450 38. Servo 1. Leak Resistance (Servo leak resistance is a measure of how much the servo motor resists unwanted movement or vibration when it is not powered. Maybe this parameter is used to calibrate or monitor the servo leak resistance of your machine. It could also be servo insulation resistance which is a measure of how well the servo motor is insulated from electric currents that could damage it or cause interference. Maybe this parameter is used to check or adjust the servo insulation resistance of your machine.) 1. ServoLeakResistData_0_path1_MCV-450 2. ServoLeakResistData_1_path1_MCV-450 3. ServoLeakResistData_2_path1_MCV-450 2. Load 1. ServoLoad_0_path1_MCV-450 2. ServoLoad_1_path1_MCV-450 3. ServoLoad_2_path1_MCV-450 3. Speed 1. ServoSpeed_0_path1_MCV-450 2. ServoSpeed_1_path1_MCV-450 3. ServoSpeed_2_path1_MCV-450 4. Temperature 1. ServoTemp_0_path1_MCV-450 2. ServoTemp_1_path1_MCV-450 3. ServoTemp_2_path1_MCV-450 39. Signal Related Parameters (unknown) 1. SigAL_path1_MCV-450 2. SigCUT_path1_MCV-450 3. SigDM00_path1_MCV-450 4. SigDM01_path1_MCV-450 5. SigENB_0_path1_MCV-450 6. SigINP_0_path1_MCV-450 7. SigINP_1_path1_MCV-450 8. SigINP_2_path1_MCV-450 9. SigMDRN_path1_MCV-450 10. SigOP_path1_MCV-450 11. SigSBK_path1_MCV-450 12. SigSPL_path1_MCV-450 13. SigSTL_path1_MCV-450 40. Spindle 1. Leak Resistance 1. SpindleLeakResistData_0_path1_MCV-450 2. Load 1. SpindleLoad_0_path1_MCV-450 3. Speed 1. SpindleSpeed_0_path1_MCV-450 4. Temperature 1. SpindleTemp_0_path1_MCV-450 5. Total Revolution 1. SpindleTotalRev1_0_path1_MCV-450 2. SpindleTotalRev2_0_path1_MCV-450 41. WARMUP 42. WARNING","title":"Information Model"},{"location":"Project%20Knowledge/Machines/#mazak-mazatech-h-400n","text":"The machine details are given below: S.No Title Information 1. Machine Name Mazak Mazatech H-400N 2. Machine Builder Machine Builder 3. Model H-400 N (Mazatech line of machining centers) 4. Type Milling Machine 5. Controller Fanuc 6. Controller Type 0i -md series 7. Ip Address 172.18.30.157 8. Mac Address 00E0E41B3630 9. Application Layer for Communication Focas","title":"Mazak Mazatech H-400N"},{"location":"Project%20Knowledge/Machines/#overview-of-mazak","text":"Mazak is a prominent global manufacturer of machine tools, with a rich history dating back to its establishment in Japan in 1919. Over the years, the company has expanded its operations worldwide and has become a renowned name in the industry.","title":"Overview of Mazak"},{"location":"Project%20Knowledge/Machines/#mazatech-precision-and-versatility-in-machining-centers","text":"Mazatech is a specialized product line within Mazak that focuses on the development and production of machining centers. These machines are highly regarded for their precision, versatility, and advanced features, making them suitable for a wide range of machining applications.","title":"Mazatech: Precision and Versatility in Machining Centers"},{"location":"Project%20Knowledge/Machines/#introducing-the-h-400n-machining-center","text":"The H-400N is a specific model within the Mazatech line of machining centers. While detailed specifications about this particular model are not available due to the training data limitations up until September 2021, it is inferred that the H-400N is designed to handle medium to large-scale machining operations. It is likely optimized for high-speed and high-precision applications.","title":"Introducing the H-400N Machining Center"},{"location":"Project%20Knowledge/Machines/#fanuc-leading-the-industry-in-cnc-systems","text":"Fanuc is a well-known Japanese company specializing in the manufacturing of industrial robots, CNC systems, and factory automation solutions. They are a major supplier of CNC systems to various machine tool manufacturers, including Mazak.","title":"Fanuc: Leading the Industry in CNC Systems"},{"location":"Project%20Knowledge/Machines/#exploring-the-fanuc-0i-md-series","text":"The 0i -md series refers to a specific family or generation of Fanuc CNC systems. The \"0i\" represents the overall series or platform, while the \"-md\" indicates its specific focus on milling and drilling applications. Fanuc 0i CNC systems are renowned for their reliability, user-friendly interface, and advanced capabilities, providing precise control over the machining process.","title":"Exploring the Fanuc 0i -md Series"},{"location":"Project%20Knowledge/Machines/#note-on-variations-and-updates","text":"It is important to note that the specific capabilities, features, and technical specifications of the Mazak H-400N and the Fanuc 0i -md series may vary, as machine models and CNC systems often offer different configurations and options. For the most accurate and up-to-date information, it is recommended to consult the official Mazak and Fanuc websites or reach out to their representatives directly.","title":"Note on Variations and Updates"}]}